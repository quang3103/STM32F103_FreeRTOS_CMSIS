
STM32F103_FreeRTOS_CMSIS_Event.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004f00  08004f00  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004f00  08004f00  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f04  08004f04  00005f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004f08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be0  20000060  08004f68  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c40  08004f68  00006c40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016899  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003148  00000000  00000000  0001c922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0001fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3b  00000000  00000000  00020e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2e  00000000  00000000  00021d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149ac  00000000  00000000  00024a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094660  00000000  00000000  00039415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cda75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  000cdab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d3004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e44 	.word	0x08004e44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004e44 	.word	0x08004e44

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a0:	f000 fab8 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a4:	f000 f826 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f890 	bl	80002cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ac:	f000 f864 	bl	8000278 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001b0:	f001 fd16 	bl	8001be0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b4:	4a09      	ldr	r2, [pc, #36]	@ (80001dc <main+0x40>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4809      	ldr	r0, [pc, #36]	@ (80001e0 <main+0x44>)
 80001ba:	f001 fd59 	bl	8001c70 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a08      	ldr	r2, [pc, #32]	@ (80001e4 <main+0x48>)
 80001c2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001c4:	4a08      	ldr	r2, [pc, #32]	@ (80001e8 <main+0x4c>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4808      	ldr	r0, [pc, #32]	@ (80001ec <main+0x50>)
 80001ca:	f001 fd51 	bl	8001c70 <osThreadNew>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a07      	ldr	r2, [pc, #28]	@ (80001f0 <main+0x54>)
 80001d2:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d4:	f001 fd26 	bl	8001c24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	bf00      	nop
 80001da:	e7fd      	b.n	80001d8 <main+0x3c>
 80001dc:	08004e8c 	.word	0x08004e8c
 80001e0:	080003f9 	.word	0x080003f9
 80001e4:	200000c4 	.word	0x200000c4
 80001e8:	08004eb0 	.word	0x08004eb0
 80001ec:	08000439 	.word	0x08000439
 80001f0:	200000c8 	.word	0x200000c8

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f004 fd30 	bl	8004c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000226:	2300      	movs	r3, #0
 8000228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800022a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fd33 	bl	8000ca0 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000240:	f000 f922 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f000 ffa0 	bl	80011a4 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800026a:	f000 f90d 	bl	8000488 <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	@ 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 800027e:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <MX_USART2_UART_Init+0x50>)
 8000280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 8000284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000290:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000296:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 800029e:	220c      	movs	r2, #12
 80002a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a2:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ae:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <MX_USART2_UART_Init+0x4c>)
 80002b0:	f001 fb74 	bl	800199c <HAL_UART_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ba:	f000 f8e5 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000007c 	.word	0x2000007c
 80002c8:	40004400 	.word	0x40004400

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000398 <MX_GPIO_Init+0xcc>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000398 <MX_GPIO_Init+0xcc>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000398 <MX_GPIO_Init+0xcc>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0310 	and.w	r3, r3, #16
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f8:	4b27      	ldr	r3, [pc, #156]	@ (8000398 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a26      	ldr	r2, [pc, #152]	@ (8000398 <MX_GPIO_Init+0xcc>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b24      	ldr	r3, [pc, #144]	@ (8000398 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b21      	ldr	r3, [pc, #132]	@ (8000398 <MX_GPIO_Init+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a20      	ldr	r2, [pc, #128]	@ (8000398 <MX_GPIO_Init+0xcc>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b1e      	ldr	r3, [pc, #120]	@ (8000398 <MX_GPIO_Init+0xcc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <MX_GPIO_Init+0xcc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a1a      	ldr	r2, [pc, #104]	@ (8000398 <MX_GPIO_Init+0xcc>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <MX_GPIO_Init+0xcc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2120      	movs	r1, #32
 8000344:	4815      	ldr	r0, [pc, #84]	@ (800039c <MX_GPIO_Init+0xd0>)
 8000346:	f000 fc7b 	bl	8000c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800034a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800034e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000350:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <MX_GPIO_Init+0xd4>)
 8000352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000358:	f107 0310 	add.w	r3, r7, #16
 800035c:	4619      	mov	r1, r3
 800035e:	4811      	ldr	r0, [pc, #68]	@ (80003a4 <MX_GPIO_Init+0xd8>)
 8000360:	f000 faea 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000364:	2320      	movs	r3, #32
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	2301      	movs	r3, #1
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	2302      	movs	r3, #2
 8000372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000374:	f107 0310 	add.w	r3, r7, #16
 8000378:	4619      	mov	r1, r3
 800037a:	4808      	ldr	r0, [pc, #32]	@ (800039c <MX_GPIO_Init+0xd0>)
 800037c:	f000 fadc 	bl	8000938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	2105      	movs	r1, #5
 8000384:	2028      	movs	r0, #40	@ 0x28
 8000386:	f000 faac 	bl	80008e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800038a:	2028      	movs	r0, #40	@ 0x28
 800038c:	f000 fac5 	bl	800091a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	40010800 	.word	0x40010800
 80003a0:	10110000 	.word	0x10110000
 80003a4:	40011000 	.word	0x40011000

080003a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	80fb      	strh	r3, [r7, #6]
  //UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

	if (GPIO_Pin == B1_Pin)
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003b8:	d108      	bne.n	80003cc <HAL_GPIO_EXTI_Callback+0x24>
	{
		osThreadFlagsSet(defaultTaskHandle, 0x50);
 80003ba:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2150      	movs	r1, #80	@ 0x50
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fce7 	bl	8001d94 <osThreadFlagsSet>
		TaskAction('!');
 80003c6:	2021      	movs	r0, #33	@ 0x21
 80003c8:	f000 f806 	bl	80003d8 <TaskAction>
	}
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000c4 	.word	0x200000c4

080003d8 <TaskAction>:

void TaskAction(char m)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(m);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff feb3 	bl	8000150 <ITM_SendChar>
	ITM_SendChar('\n');
 80003ea:	200a      	movs	r0, #10
 80003ec:	f7ff feb0 	bl	8000150 <ITM_SendChar>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t flagfromGet = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
	uint32_t flagFromWait = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  //osThreadFlagsGet has to be called to let osThreadFlagsWait return expected value
	  flagfromGet = osThreadFlagsGet();
 8000408:	f001 fd12 	bl	8001e30 <osThreadFlagsGet>
 800040c:	60f8      	str	r0, [r7, #12]
	  flagFromWait = osThreadFlagsWait(0x51, osFlagsWaitAll | osFlagsNoClear, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2103      	movs	r1, #3
 8000412:	2051      	movs	r0, #81	@ 0x51
 8000414:	f001 fd2d 	bl	8001e72 <osThreadFlagsWait>
 8000418:	60b8      	str	r0, [r7, #8]
	  if (flagFromWait >= osFlagsErrorISR)
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	f113 0f07 	cmn.w	r3, #7
 8000420:	d806      	bhi.n	8000430 <StartDefaultTask+0x38>
	  {
		  //flagfromGet = osThreadFlagsGet();
	  }
	  else
	  {
		  osDelay(1000);
 8000422:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000426:	f001 fda5 	bl	8001f74 <osDelay>
	  	  TaskAction('1');
 800042a:	2031      	movs	r0, #49	@ 0x31
 800042c:	f7ff ffd4 	bl	80003d8 <TaskAction>
	  	  //flag = osThreadFlagsClear(0x51);
	  }
	  flagFromWait = 0x00;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
	  flagfromGet = osThreadFlagsGet();
 8000434:	e7e8      	b.n	8000408 <StartDefaultTask+0x10>
	...

08000438 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsSet(defaultTaskHandle, 0x01);
 8000440:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <StartTask02+0x28>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2101      	movs	r1, #1
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fca4 	bl	8001d94 <osThreadFlagsSet>
	  TaskAction('2');
 800044c:	2032      	movs	r0, #50	@ 0x32
 800044e:	f7ff ffc3 	bl	80003d8 <TaskAction>
	  osDelay(5000);
 8000452:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000456:	f001 fd8d 	bl	8001f74 <osDelay>
	  osThreadFlagsSet(defaultTaskHandle, 0x01);
 800045a:	bf00      	nop
 800045c:	e7f0      	b.n	8000440 <StartTask02+0x8>
 800045e:	bf00      	nop
 8000460:	200000c4 	.word	0x200000c4

08000464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d101      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000476:	f000 f963 	bl	8000740 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40012c00 	.word	0x40012c00

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <Error_Handler+0x8>

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049a:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <HAL_MspInit+0x68>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a17      	ldr	r2, [pc, #92]	@ (80004fc <HAL_MspInit+0x68>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <HAL_MspInit+0x68>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b12      	ldr	r3, [pc, #72]	@ (80004fc <HAL_MspInit+0x68>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a11      	ldr	r2, [pc, #68]	@ (80004fc <HAL_MspInit+0x68>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <HAL_MspInit+0x68>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	210f      	movs	r1, #15
 80004ce:	f06f 0001 	mvn.w	r0, #1
 80004d2:	f000 fa06 	bl	80008e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <HAL_MspInit+0x6c>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_MspInit+0x6c>)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010000 	.word	0x40010000

08000504 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <HAL_UART_MspInit+0x70>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d123      	bne.n	800056c <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000524:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <HAL_UART_MspInit+0x74>)
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	4a13      	ldr	r2, [pc, #76]	@ (8000578 <HAL_UART_MspInit+0x74>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052e:	61d3      	str	r3, [r2, #28]
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <HAL_UART_MspInit+0x74>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_UART_MspInit+0x74>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <HAL_UART_MspInit+0x74>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <HAL_UART_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000554:	230c      	movs	r3, #12
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_UART_MspInit+0x78>)
 8000568:	f000 f9e6 	bl	8000938 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40004400 	.word	0x40004400
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800

08000580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000588:	2300      	movs	r3, #0
 800058a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000590:	2300      	movs	r3, #0
 8000592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000596:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <HAL_InitTick+0xd0>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a2d      	ldr	r2, [pc, #180]	@ (8000650 <HAL_InitTick+0xd0>)
 800059c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000650 <HAL_InitTick+0xd0>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ae:	f107 020c 	add.w	r2, r7, #12
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff63 	bl	8001484 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005be:	f000 ff4d 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 80005c2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005c6:	4a23      	ldr	r2, [pc, #140]	@ (8000654 <HAL_InitTick+0xd4>)
 80005c8:	fba2 2303 	umull	r2, r3, r2, r3
 80005cc:	0c9b      	lsrs	r3, r3, #18
 80005ce:	3b01      	subs	r3, #1
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005d2:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <HAL_InitTick+0xd8>)
 80005d4:	4a21      	ldr	r2, [pc, #132]	@ (800065c <HAL_InitTick+0xdc>)
 80005d6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <HAL_InitTick+0xd8>)
 80005da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000658 <HAL_InitTick+0xd8>)
 80005e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <HAL_InitTick+0xd8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <HAL_InitTick+0xd8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <HAL_InitTick+0xd8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80005f8:	4817      	ldr	r0, [pc, #92]	@ (8000658 <HAL_InitTick+0xd8>)
 80005fa:	f000 ff91 	bl	8001520 <HAL_TIM_Base_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11b      	bne.n	8000644 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800060c:	4812      	ldr	r0, [pc, #72]	@ (8000658 <HAL_InitTick+0xd8>)
 800060e:	f000 ffdf 	bl	80015d0 <HAL_TIM_Base_Start_IT>
 8000612:	4603      	mov	r3, r0
 8000614:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000618:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800061c:	2b00      	cmp	r3, #0
 800061e:	d111      	bne.n	8000644 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000620:	2019      	movs	r0, #25
 8000622:	f000 f97a 	bl	800091a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b0f      	cmp	r3, #15
 800062a:	d808      	bhi.n	800063e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800062c:	2200      	movs	r2, #0
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	2019      	movs	r0, #25
 8000632:	f000 f956 	bl	80008e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000636:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <HAL_InitTick+0xe0>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	e002      	b.n	8000644 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000644:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000648:	4618      	mov	r0, r3
 800064a:	3730      	adds	r7, #48	@ 0x30
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000
 8000654:	431bde83 	.word	0x431bde83
 8000658:	200000cc 	.word	0x200000cc
 800065c:	40012c00 	.word	0x40012c00
 8000660:	20000004 	.word	0x20000004

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <NMI_Handler+0x4>

0800066c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <MemManage_Handler+0x4>

0800067c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <UsageFault_Handler+0x4>

0800068c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800069c:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <TIM1_UP_IRQHandler+0x10>)
 800069e:	f000 ffe9 	bl	8001674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000cc 	.word	0x200000cc

080006ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006b4:	f000 fadc 	bl	8000c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c8:	f7ff fff8 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ce:	490c      	ldr	r1, [pc, #48]	@ (8000700 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006e4:	4c09      	ldr	r4, [pc, #36]	@ (800070c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f2:	f004 fb1f 	bl	8004d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fd51 	bl	800019c <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000704:	08004f08 	.word	0x08004f08
  ldr r2, =_sbss
 8000708:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800070c:	20001c40 	.word	0x20001c40

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	@ (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f8d1 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	200f      	movs	r0, #15
 800072c:	f7ff ff28 	bl	8000580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff feb0 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_IncTick+0x1c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_IncTick+0x20>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a03      	ldr	r2, [pc, #12]	@ (8000760 <HAL_IncTick+0x20>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	20000008 	.word	0x20000008
 8000760:	20000114 	.word	0x20000114

08000764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b02      	ldr	r3, [pc, #8]	@ (8000774 <HAL_GetTick+0x10>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	20000114 	.word	0x20000114

08000778 <__NVIC_SetPriorityGrouping>:
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007aa:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	60d3      	str	r3, [r2, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_GetPriorityGrouping>:
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4906      	ldr	r1, [pc, #24]	@ (8000810 <__NVIC_EnableIRQ+0x34>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPriority>:
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	@ (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	@ (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	@ 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	@ 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff4f 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff64 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ffb2 	bl	8000868 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff81 	bl	8000814 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff57 	bl	80007dc <__NVIC_EnableIRQ>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b08b      	sub	sp, #44	@ 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e169      	b.n	8000c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800094c:	2201      	movs	r2, #1
 800094e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	429a      	cmp	r2, r3
 8000966:	f040 8158 	bne.w	8000c1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bd8 <HAL_GPIO_Init+0x2a0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d05e      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 8000974:	4a98      	ldr	r2, [pc, #608]	@ (8000bd8 <HAL_GPIO_Init+0x2a0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d875      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 800097a:	4a98      	ldr	r2, [pc, #608]	@ (8000bdc <HAL_GPIO_Init+0x2a4>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d058      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 8000980:	4a96      	ldr	r2, [pc, #600]	@ (8000bdc <HAL_GPIO_Init+0x2a4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d86f      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 8000986:	4a96      	ldr	r2, [pc, #600]	@ (8000be0 <HAL_GPIO_Init+0x2a8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d052      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 800098c:	4a94      	ldr	r2, [pc, #592]	@ (8000be0 <HAL_GPIO_Init+0x2a8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d869      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 8000992:	4a94      	ldr	r2, [pc, #592]	@ (8000be4 <HAL_GPIO_Init+0x2ac>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d04c      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 8000998:	4a92      	ldr	r2, [pc, #584]	@ (8000be4 <HAL_GPIO_Init+0x2ac>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d863      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 800099e:	4a92      	ldr	r2, [pc, #584]	@ (8000be8 <HAL_GPIO_Init+0x2b0>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d046      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 80009a4:	4a90      	ldr	r2, [pc, #576]	@ (8000be8 <HAL_GPIO_Init+0x2b0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d85d      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 80009aa:	2b12      	cmp	r3, #18
 80009ac:	d82a      	bhi.n	8000a04 <HAL_GPIO_Init+0xcc>
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d859      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 80009b2:	a201      	add	r2, pc, #4	@ (adr r2, 80009b8 <HAL_GPIO_Init+0x80>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	08000a33 	.word	0x08000a33
 80009bc:	08000a0d 	.word	0x08000a0d
 80009c0:	08000a1f 	.word	0x08000a1f
 80009c4:	08000a61 	.word	0x08000a61
 80009c8:	08000a67 	.word	0x08000a67
 80009cc:	08000a67 	.word	0x08000a67
 80009d0:	08000a67 	.word	0x08000a67
 80009d4:	08000a67 	.word	0x08000a67
 80009d8:	08000a67 	.word	0x08000a67
 80009dc:	08000a67 	.word	0x08000a67
 80009e0:	08000a67 	.word	0x08000a67
 80009e4:	08000a67 	.word	0x08000a67
 80009e8:	08000a67 	.word	0x08000a67
 80009ec:	08000a67 	.word	0x08000a67
 80009f0:	08000a67 	.word	0x08000a67
 80009f4:	08000a67 	.word	0x08000a67
 80009f8:	08000a67 	.word	0x08000a67
 80009fc:	08000a15 	.word	0x08000a15
 8000a00:	08000a29 	.word	0x08000a29
 8000a04:	4a79      	ldr	r2, [pc, #484]	@ (8000bec <HAL_GPIO_Init+0x2b4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a0a:	e02c      	b.n	8000a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e029      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e024      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	3308      	adds	r3, #8
 8000a24:	623b      	str	r3, [r7, #32]
          break;
 8000a26:	e01f      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	330c      	adds	r3, #12
 8000a2e:	623b      	str	r3, [r7, #32]
          break;
 8000a30:	e01a      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e013      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d105      	bne.n	8000a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	611a      	str	r2, [r3, #16]
          break;
 8000a52:	e009      	b.n	8000a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a54:	2308      	movs	r3, #8
 8000a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	615a      	str	r2, [r3, #20]
          break;
 8000a5e:	e003      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e000      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          break;
 8000a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2bff      	cmp	r3, #255	@ 0xff
 8000a6c:	d801      	bhi.n	8000a72 <HAL_GPIO_Init+0x13a>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	e001      	b.n	8000a76 <HAL_GPIO_Init+0x13e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3304      	adds	r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2bff      	cmp	r3, #255	@ 0xff
 8000a7c:	d802      	bhi.n	8000a84 <HAL_GPIO_Init+0x14c>
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	e002      	b.n	8000a8a <HAL_GPIO_Init+0x152>
 8000a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a86:	3b08      	subs	r3, #8
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	210f      	movs	r1, #15
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	6a39      	ldr	r1, [r7, #32]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 80b1 	beq.w	8000c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf0 <HAL_GPIO_Init+0x2b8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf0 <HAL_GPIO_Init+0x2b8>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf0 <HAL_GPIO_Init+0x2b8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ad0:	4a48      	ldr	r2, [pc, #288]	@ (8000bf4 <HAL_GPIO_Init+0x2bc>)
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a40      	ldr	r2, [pc, #256]	@ (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d013      	beq.n	8000b24 <HAL_GPIO_Init+0x1ec>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a3f      	ldr	r2, [pc, #252]	@ (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d00d      	beq.n	8000b20 <HAL_GPIO_Init+0x1e8>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a3e      	ldr	r2, [pc, #248]	@ (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d007      	beq.n	8000b1c <HAL_GPIO_Init+0x1e4>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d101      	bne.n	8000b18 <HAL_GPIO_Init+0x1e0>
 8000b14:	2303      	movs	r3, #3
 8000b16:	e006      	b.n	8000b26 <HAL_GPIO_Init+0x1ee>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	e004      	b.n	8000b26 <HAL_GPIO_Init+0x1ee>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	e002      	b.n	8000b26 <HAL_GPIO_Init+0x1ee>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e000      	b.n	8000b26 <HAL_GPIO_Init+0x1ee>
 8000b24:	2300      	movs	r3, #0
 8000b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b28:	f002 0203 	and.w	r2, r2, #3
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	4093      	lsls	r3, r2
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b36:	492f      	ldr	r1, [pc, #188]	@ (8000bf4 <HAL_GPIO_Init+0x2bc>)
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b50:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	492c      	ldr	r1, [pc, #176]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	608b      	str	r3, [r1, #8]
 8000b5c:	e006      	b.n	8000b6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4928      	ldr	r1, [pc, #160]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b78:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	4922      	ldr	r1, [pc, #136]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	60cb      	str	r3, [r1, #12]
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	491e      	ldr	r1, [pc, #120]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4918      	ldr	r1, [pc, #96]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4914      	ldr	r1, [pc, #80]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d021      	beq.n	8000c0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	490e      	ldr	r1, [pc, #56]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
 8000bd4:	e021      	b.n	8000c1a <HAL_GPIO_Init+0x2e2>
 8000bd6:	bf00      	nop
 8000bd8:	10320000 	.word	0x10320000
 8000bdc:	10310000 	.word	0x10310000
 8000be0:	10220000 	.word	0x10220000
 8000be4:	10210000 	.word	0x10210000
 8000be8:	10120000 	.word	0x10120000
 8000bec:	10110000 	.word	0x10110000
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	40010c00 	.word	0x40010c00
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40011400 	.word	0x40011400
 8000c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <HAL_GPIO_Init+0x304>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4909      	ldr	r1, [pc, #36]	@ (8000c3c <HAL_GPIO_Init+0x304>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f47f ae8e 	bne.w	800094c <HAL_GPIO_Init+0x14>
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	372c      	adds	r7, #44	@ 0x2c
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c50:	787b      	ldrb	r3, [r7, #1]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c5c:	e003      	b.n	8000c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	041a      	lsls	r2, r3, #16
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	611a      	str	r2, [r3, #16]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fb8a 	bl	80003a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e272      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8087 	beq.w	8000dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc0:	4b92      	ldr	r3, [pc, #584]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00c      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d112      	bne.n	8000cfe <HAL_RCC_OscConfig+0x5e>
 8000cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ce4:	d10b      	bne.n	8000cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce6:	4b89      	ldr	r3, [pc, #548]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d06c      	beq.n	8000dcc <HAL_RCC_OscConfig+0x12c>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d168      	bne.n	8000dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e24c      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d06:	d106      	bne.n	8000d16 <HAL_RCC_OscConfig+0x76>
 8000d08:	4b80      	ldr	r3, [pc, #512]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e02e      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x98>
 8000d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a7a      	ldr	r2, [pc, #488]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b78      	ldr	r3, [pc, #480]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a77      	ldr	r2, [pc, #476]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e01d      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d40:	d10c      	bne.n	8000d5c <HAL_RCC_OscConfig+0xbc>
 8000d42:	4b72      	ldr	r3, [pc, #456]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a71      	ldr	r2, [pc, #452]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a6e      	ldr	r2, [pc, #440]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e00b      	b.n	8000d74 <HAL_RCC_OscConfig+0xd4>
 8000d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a6a      	ldr	r2, [pc, #424]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b68      	ldr	r3, [pc, #416]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a67      	ldr	r2, [pc, #412]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d013      	beq.n	8000da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fcf2 	bl	8000764 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fcee 	bl	8000764 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b64      	cmp	r3, #100	@ 0x64
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e200      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	4b5d      	ldr	r3, [pc, #372]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0xe4>
 8000da2:	e014      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fcde 	bl	8000764 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fcda 	bl	8000764 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	@ 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e1ec      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	4b53      	ldr	r3, [pc, #332]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x10c>
 8000dca:	e000      	b.n	8000dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d063      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dda:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00b      	beq.n	8000dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000de6:	4b49      	ldr	r3, [pc, #292]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d11c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x18c>
 8000df2:	4b46      	ldr	r3, [pc, #280]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d116      	bne.n	8000e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	4b43      	ldr	r3, [pc, #268]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <HAL_RCC_OscConfig+0x176>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d001      	beq.n	8000e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e1c0      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	4b3d      	ldr	r3, [pc, #244]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4939      	ldr	r1, [pc, #228]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	e03a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d020      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e34:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fc93 	bl	8000764 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e42:	f7ff fc8f 	bl	8000764 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e1a1      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e54:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f0      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e60:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4927      	ldr	r1, [pc, #156]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
 8000e74:	e015      	b.n	8000ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e76:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fc72 	bl	8000764 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc6e 	bl	8000764 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e180      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d03a      	beq.n	8000f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d019      	beq.n	8000eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	f7ff fc52 	bl	8000764 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec4:	f7ff fc4e 	bl	8000764 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e160      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f0      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 fafe 	bl	80014e4 <RCC_Delay>
 8000ee8:	e01c      	b.n	8000f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc38 	bl	8000764 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef6:	e00f      	b.n	8000f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc34 	bl	8000764 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d908      	bls.n	8000f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e146      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	42420000 	.word	0x42420000
 8000f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f18:	4b92      	ldr	r3, [pc, #584]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e9      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80a6 	beq.w	800107e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f36:	4b8b      	ldr	r3, [pc, #556]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10d      	bne.n	8000f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b88      	ldr	r3, [pc, #544]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a87      	ldr	r2, [pc, #540]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b85      	ldr	r3, [pc, #532]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5e:	4b82      	ldr	r3, [pc, #520]	@ (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d118      	bne.n	8000f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fbf5 	bl	8000764 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f7e:	f7ff fbf1 	bl	8000764 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	@ 0x64
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e103      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	4b75      	ldr	r3, [pc, #468]	@ (8001168 <HAL_RCC_OscConfig+0x4c8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x312>
 8000fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6213      	str	r3, [r2, #32]
 8000fb0:	e02d      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x334>
 8000fba:	4b6a      	ldr	r3, [pc, #424]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a69      	ldr	r2, [pc, #420]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	4b67      	ldr	r3, [pc, #412]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a66      	ldr	r2, [pc, #408]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	e01c      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x356>
 8000fdc:	4b61      	ldr	r3, [pc, #388]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a60      	ldr	r2, [pc, #384]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a5d      	ldr	r2, [pc, #372]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	e00b      	b.n	800100e <HAL_RCC_OscConfig+0x36e>
 8000ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	4b58      	ldr	r3, [pc, #352]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a57      	ldr	r2, [pc, #348]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d015      	beq.n	8001042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff fba5 	bl	8000764 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fba1 	bl	8000764 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e0b1      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	4b4b      	ldr	r3, [pc, #300]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0ee      	beq.n	800101e <HAL_RCC_OscConfig+0x37e>
 8001040:	e014      	b.n	800106c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb8f 	bl	8000764 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fb8b 	bl	8000764 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e09b      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1ee      	bne.n	800104a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d105      	bne.n	800107e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001072:	4b3c      	ldr	r3, [pc, #240]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a3b      	ldr	r2, [pc, #236]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 8087 	beq.w	8001196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001088:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d061      	beq.n	8001158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d146      	bne.n	800112a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109c:	4b33      	ldr	r3, [pc, #204]	@ (800116c <HAL_RCC_OscConfig+0x4cc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb5f 	bl	8000764 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb5b 	bl	8000764 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e06d      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010bc:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d0:	d108      	bne.n	80010e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d2:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	4921      	ldr	r1, [pc, #132]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a19      	ldr	r1, [r3, #32]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	430b      	orrs	r3, r1
 80010f6:	491b      	ldr	r1, [pc, #108]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <HAL_RCC_OscConfig+0x4cc>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fb2f 	bl	8000764 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110a:	f7ff fb2b 	bl	8000764 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e03d      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x46a>
 8001128:	e035      	b.n	8001196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <HAL_RCC_OscConfig+0x4cc>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fb18 	bl	8000764 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001138:	f7ff fb14 	bl	8000764 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e026      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x498>
 8001156:	e01e      	b.n	8001196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e019      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
 8001164:	40021000 	.word	0x40021000
 8001168:	40007000 	.word	0x40007000
 800116c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_RCC_OscConfig+0x500>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	429a      	cmp	r2, r3
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	429a      	cmp	r2, r3
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0d0      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d910      	bls.n	80011e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b67      	ldr	r3, [pc, #412]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0207 	bic.w	r2, r3, #7
 80011ce:	4965      	ldr	r1, [pc, #404]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b63      	ldr	r3, [pc, #396]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0b8      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001200:	4b59      	ldr	r3, [pc, #356]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a58      	ldr	r2, [pc, #352]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800120a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001218:	4b53      	ldr	r3, [pc, #332]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a52      	ldr	r2, [pc, #328]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001224:	4b50      	ldr	r3, [pc, #320]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	494d      	ldr	r1, [pc, #308]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d040      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	4b47      	ldr	r3, [pc, #284]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d115      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e07f      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001262:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e073      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001272:	4b3d      	ldr	r3, [pc, #244]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e06b      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001282:	4b39      	ldr	r3, [pc, #228]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f023 0203 	bic.w	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4936      	ldr	r1, [pc, #216]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001294:	f7ff fa66 	bl	8000764 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129c:	f7ff fa62 	bl	8000764 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e053      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 020c 	and.w	r2, r3, #12
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d1eb      	bne.n	800129c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c4:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d210      	bcs.n	80012f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 0207 	bic.w	r2, r3, #7
 80012da:	4922      	ldr	r1, [pc, #136]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e032      	b.n	800135a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4916      	ldr	r1, [pc, #88]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	490e      	ldr	r1, [pc, #56]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001332:	f000 f821 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001336:	4602      	mov	r2, r0
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	490a      	ldr	r1, [pc, #40]	@ (800136c <HAL_RCC_ClockConfig+0x1c8>)
 8001344:	5ccb      	ldrb	r3, [r1, r3]
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <HAL_RCC_ClockConfig+0x1cc>)
 800134c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_RCC_ClockConfig+0x1d0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f914 	bl	8000580 <HAL_InitTick>

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000
 8001368:	40021000 	.word	0x40021000
 800136c:	08004ed4 	.word	0x08004ed4
 8001370:	20000000 	.word	0x20000000
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001392:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <HAL_RCC_GetSysClockFreq+0x94>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d002      	beq.n	80013a8 <HAL_RCC_GetSysClockFreq+0x30>
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d003      	beq.n	80013ae <HAL_RCC_GetSysClockFreq+0x36>
 80013a6:	e027      	b.n	80013f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013a8:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <HAL_RCC_GetSysClockFreq+0x98>)
 80013aa:	613b      	str	r3, [r7, #16]
      break;
 80013ac:	e027      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d010      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_RCC_GetSysClockFreq+0x94>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	0c5b      	lsrs	r3, r3, #17
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_RCC_GetSysClockFreq+0x98>)
 80013da:	fb03 f202 	mul.w	r2, r3, r2
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e004      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a0c      	ldr	r2, [pc, #48]	@ (800141c <HAL_RCC_GetSysClockFreq+0xa4>)
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	613b      	str	r3, [r7, #16]
      break;
 80013f6:	e002      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fa:	613b      	str	r3, [r7, #16]
      break;
 80013fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013fe:	693b      	ldr	r3, [r7, #16]
}
 8001400:	4618      	mov	r0, r3
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	007a1200 	.word	0x007a1200
 8001414:	08004eec 	.word	0x08004eec
 8001418:	08004efc 	.word	0x08004efc
 800141c:	003d0900 	.word	0x003d0900

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b02      	ldr	r3, [pc, #8]	@ (8001430 <HAL_RCC_GetHCLKFreq+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000

08001434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001438:	f7ff fff2 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 800143c:	4602      	mov	r2, r0
 800143e:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	4903      	ldr	r1, [pc, #12]	@ (8001458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800144a:	5ccb      	ldrb	r3, [r1, r3]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	08004ee4 	.word	0x08004ee4

0800145c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001460:	f7ff ffde 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4b05      	ldr	r3, [pc, #20]	@ (800147c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	0adb      	lsrs	r3, r3, #11
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4903      	ldr	r1, [pc, #12]	@ (8001480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001472:	5ccb      	ldrb	r3, [r1, r3]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	08004ee4 	.word	0x08004ee4

08001484 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	220f      	movs	r2, #15
 8001492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_RCC_GetClockConfig+0x58>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_RCC_GetClockConfig+0x58>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_RCC_GetClockConfig+0x58>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_RCC_GetClockConfig+0x58>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_RCC_GetClockConfig+0x5c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0207 	and.w	r2, r3, #7
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40022000 	.word	0x40022000

080014e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <RCC_Delay+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <RCC_Delay+0x38>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0a5b      	lsrs	r3, r3, #9
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001500:	bf00      	nop
  }
  while (Delay --);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	60fa      	str	r2, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <RCC_Delay+0x1c>
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000000 	.word	0x20000000
 800151c:	10624dd3 	.word	0x10624dd3

08001520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e041      	b.n	80015b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f839 	bl	80015be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3304      	adds	r3, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f000 f99c 	bl	800189c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d001      	beq.n	80015e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e03a      	b.n	800165e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <HAL_TIM_Base_Start_IT+0x98>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00e      	beq.n	8001628 <HAL_TIM_Base_Start_IT+0x58>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001612:	d009      	beq.n	8001628 <HAL_TIM_Base_Start_IT+0x58>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <HAL_TIM_Base_Start_IT+0x9c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d004      	beq.n	8001628 <HAL_TIM_Base_Start_IT+0x58>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a13      	ldr	r2, [pc, #76]	@ (8001670 <HAL_TIM_Base_Start_IT+0xa0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d111      	bne.n	800164c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d010      	beq.n	800165c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164a:	e007      	b.n	800165c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40000400 	.word	0x40000400
 8001670:	40000800 	.word	0x40000800

08001674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d020      	beq.n	80016d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01b      	beq.n	80016d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0202 	mvn.w	r2, #2
 80016a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f8d1 	bl	8001866 <HAL_TIM_IC_CaptureCallback>
 80016c4:	e005      	b.n	80016d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8c4 	bl	8001854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f8d3 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d020      	beq.n	8001724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01b      	beq.n	8001724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0204 	mvn.w	r2, #4
 80016f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8ab 	bl	8001866 <HAL_TIM_IC_CaptureCallback>
 8001710:	e005      	b.n	800171e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f89e 	bl	8001854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8ad 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d020      	beq.n	8001770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0208 	mvn.w	r2, #8
 8001740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2204      	movs	r2, #4
 8001746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f885 	bl	8001866 <HAL_TIM_IC_CaptureCallback>
 800175c:	e005      	b.n	800176a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f878 	bl	8001854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f887 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d020      	beq.n	80017bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01b      	beq.n	80017bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0210 	mvn.w	r2, #16
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2208      	movs	r2, #8
 8001792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f85f 	bl	8001866 <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f852 	bl	8001854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f861 	bl	8001878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00c      	beq.n	80017e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0201 	mvn.w	r2, #1
 80017d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fe42 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f8c3 	bl	800198a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00c      	beq.n	8001828 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d007      	beq.n	8001828 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f831 	bl	800188a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0220 	mvn.w	r2, #32
 8001844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f896 	bl	8001978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a2f      	ldr	r2, [pc, #188]	@ (800196c <TIM_Base_SetConfig+0xd0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00b      	beq.n	80018cc <TIM_Base_SetConfig+0x30>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ba:	d007      	beq.n	80018cc <TIM_Base_SetConfig+0x30>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a2c      	ldr	r2, [pc, #176]	@ (8001970 <TIM_Base_SetConfig+0xd4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d003      	beq.n	80018cc <TIM_Base_SetConfig+0x30>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001974 <TIM_Base_SetConfig+0xd8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d108      	bne.n	80018de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a22      	ldr	r2, [pc, #136]	@ (800196c <TIM_Base_SetConfig+0xd0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00b      	beq.n	80018fe <TIM_Base_SetConfig+0x62>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ec:	d007      	beq.n	80018fe <TIM_Base_SetConfig+0x62>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <TIM_Base_SetConfig+0xd4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d003      	beq.n	80018fe <TIM_Base_SetConfig+0x62>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001974 <TIM_Base_SetConfig+0xd8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d108      	bne.n	8001910 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <TIM_Base_SetConfig+0xd0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d103      	bne.n	8001944 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f023 0201 	bic.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
  }
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40000400 	.word	0x40000400
 8001974:	40000800 	.word	0x40000800

08001978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e042      	b.n	8001a34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fd9e 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2224      	movs	r2, #36	@ 0x24
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f82b 	bl	8001a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a76:	f023 030c 	bic.w	r3, r3, #12
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b50 <UART_SetConfig+0x114>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d103      	bne.n	8001aac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001aa4:	f7ff fcda 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	e002      	b.n	8001ab2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001aac:	f7ff fcc2 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8001ab0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009a      	lsls	r2, r3, #2
 8001abc:	441a      	add	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <UART_SetConfig+0x118>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	0119      	lsls	r1, r3, #4
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009a      	lsls	r2, r3, #2
 8001adc:	441a      	add	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <UART_SetConfig+0x118>)
 8001aea:	fba3 0302 	umull	r0, r3, r3, r2
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2064      	movs	r0, #100	@ 0x64
 8001af2:	fb00 f303 	mul.w	r3, r0, r3
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	3332      	adds	r3, #50	@ 0x32
 8001afc:	4a15      	ldr	r2, [pc, #84]	@ (8001b54 <UART_SetConfig+0x118>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b08:	4419      	add	r1, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009a      	lsls	r2, r3, #2
 8001b14:	441a      	add	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <UART_SetConfig+0x118>)
 8001b22:	fba3 0302 	umull	r0, r3, r3, r2
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2064      	movs	r0, #100	@ 0x64
 8001b2a:	fb00 f303 	mul.w	r3, r0, r3
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	3332      	adds	r3, #50	@ 0x32
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <UART_SetConfig+0x118>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	f003 020f 	and.w	r2, r3, #15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	440a      	add	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40013800 	.word	0x40013800
 8001b54:	51eb851f 	.word	0x51eb851f

08001b58 <__NVIC_SetPriority>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	@ (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <SysTick_Handler+0x1c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001bb4:	f001 fe36 	bl	8003824 <xTaskGetSchedulerState>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001bbe:	f002 fde3 	bl	8004788 <xPortSysTickHandler>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	f06f 0004 	mvn.w	r0, #4
 8001bd6:	f7ff ffbf 	bl	8001b58 <__NVIC_SetPriority>
#endif
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001be6:	f3ef 8305 	mrs	r3, IPSR
 8001bea:	603b      	str	r3, [r7, #0]
  return(result);
 8001bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001bf2:	f06f 0305 	mvn.w	r3, #5
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	e00c      	b.n	8001c14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <osKernelInitialize+0x40>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d105      	bne.n	8001c0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <osKernelInitialize+0x40>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	e002      	b.n	8001c14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000118 	.word	0x20000118

08001c24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c2a:	f3ef 8305 	mrs	r3, IPSR
 8001c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8001c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001c36:	f06f 0305 	mvn.w	r3, #5
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	e010      	b.n	8001c60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <osKernelStart+0x48>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d109      	bne.n	8001c5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c46:	f7ff ffc1 	bl	8001bcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <osKernelStart+0x48>)
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c50:	f001 f97a 	bl	8002f48 <vTaskStartScheduler>
      stat = osOK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	e002      	b.n	8001c60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000118 	.word	0x20000118

08001c70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	@ 0x38
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c80:	f3ef 8305 	mrs	r3, IPSR
 8001c84:	617b      	str	r3, [r7, #20]
  return(result);
 8001c86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d17e      	bne.n	8001d8a <osThreadNew+0x11a>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07b      	beq.n	8001d8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c96:	2318      	movs	r3, #24
 8001c98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d045      	beq.n	8001d36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <osThreadNew+0x48>
        name = attr->name;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <osThreadNew+0x6e>
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b38      	cmp	r3, #56	@ 0x38
 8001cd0:	d805      	bhi.n	8001cde <osThreadNew+0x6e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <osThreadNew+0x72>
        return (NULL);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e054      	b.n	8001d8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00e      	beq.n	8001d18 <osThreadNew+0xa8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2ba7      	cmp	r3, #167	@ 0xa7
 8001d00:	d90a      	bls.n	8001d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <osThreadNew+0xa8>
        mem = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	e010      	b.n	8001d3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <osThreadNew+0xca>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <osThreadNew+0xca>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <osThreadNew+0xca>
          mem = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	e001      	b.n	8001d3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d110      	bne.n	8001d62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d48:	9202      	str	r2, [sp, #8]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6a3a      	ldr	r2, [r7, #32]
 8001d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 ff02 	bl	8002b60 <xTaskCreateStatic>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	e013      	b.n	8001d8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d110      	bne.n	8001d8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 ff50 	bl	8002c20 <xTaskCreate>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d001      	beq.n	8001d8a <osThreadNew+0x11a>
            hTask = NULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d8a:	693b      	ldr	r3, [r7, #16]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <osThreadFlagsSet+0x1a>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da03      	bge.n	8001db6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8001dae:	f06f 0303 	mvn.w	r3, #3
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e035      	b.n	8001e22 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dbc:	f3ef 8305 	mrs	r3, IPSR
 8001dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8001dc2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01f      	beq.n	8001e08 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6978      	ldr	r0, [r7, #20]
 8001dda:	f001 fed3 	bl	8003b84 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2200      	movs	r2, #0
 8001de4:	9200      	str	r2, [sp, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f001 feca 	bl	8003b84 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d015      	beq.n	8001e22 <osThreadFlagsSet+0x8e>
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <osThreadFlagsSet+0x98>)
 8001df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	f3bf 8f6f 	isb	sy
 8001e06:	e00c      	b.n	8001e22 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f001 fdf6 	bl	8003a00 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6978      	ldr	r0, [r7, #20]
 8001e1e:	f001 fdef 	bl	8003a00 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	e000ed04 	.word	0xe000ed04

08001e30 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e36:	f3ef 8305 	mrs	r3, IPSR
 8001e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 8001e42:	f06f 0305 	mvn.w	r3, #5
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	e00e      	b.n	8001e68 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8001e4a:	f001 fcdd 	bl	8003808 <xTaskGetCurrentTaskHandle>
 8001e4e:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f001 fdd2 	bl	8003a00 <xTaskGenericNotify>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d002      	beq.n	8001e68 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b08c      	sub	sp, #48	@ 0x30
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e7e:	f3ef 8305 	mrs	r3, IPSR
 8001e82:	617b      	str	r3, [r7, #20]
  return(result);
 8001e84:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8001e8a:	f06f 0305 	mvn.w	r3, #5
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e90:	e06b      	b.n	8001f6a <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da03      	bge.n	8001ea0 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8001e98:	f06f 0303 	mvn.w	r3, #3
 8001e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e9e:	e064      	b.n	8001f6a <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eae:	e001      	b.n	8001eb4 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8001ebc:	f001 f960 	bl	8003180 <xTaskGetTickCount>
 8001ec0:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8001ec2:	f107 0210 	add.w	r2, r7, #16
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f001 fd38 	bl	8003940 <xTaskNotifyWait>
 8001ed0:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d137      	bne.n	8001f48 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8001ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d032      	beq.n	8001f64 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10f      	bne.n	8001f24 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8001f04:	f06f 0302 	mvn.w	r3, #2
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8001f0a:	e02e      	b.n	8001f6a <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d128      	bne.n	8001f68 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8001f1c:	f06f 0302 	mvn.w	r3, #2
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8001f22:	e022      	b.n	8001f6a <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8001f24:	f001 f92c 	bl	8003180 <xTaskGetTickCount>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d902      	bls.n	8001f3e <osThreadFlagsWait+0xcc>
          tout  = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	e00e      	b.n	8001f5c <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f46:	e009      	b.n	8001f5c <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8001f4e:	f06f 0302 	mvn.w	r3, #2
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f54:	e002      	b.n	8001f5c <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8001f56:	f06f 0301 	mvn.w	r3, #1
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1af      	bne.n	8001ec2 <osThreadFlagsWait+0x50>
 8001f62:	e002      	b.n	8001f6a <osThreadFlagsWait+0xf8>
            break;
 8001f64:	bf00      	nop
 8001f66:	e000      	b.n	8001f6a <osThreadFlagsWait+0xf8>
            break;
 8001f68:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8001f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3730      	adds	r7, #48	@ 0x30
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f7c:	f3ef 8305 	mrs	r3, IPSR
 8001f80:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <osDelay+0x1c>
    stat = osErrorISR;
 8001f88:	f06f 0305 	mvn.w	r3, #5
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e007      	b.n	8001fa0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 ff9e 	bl	8002edc <vTaskDelay>
    }
  }

  return (stat);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a06      	ldr	r2, [pc, #24]	@ (8001fd4 <vApplicationGetIdleTaskMemory+0x28>)
 8001fbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	2000011c 	.word	0x2000011c
 8001fd8:	200001c4 	.word	0x200001c4

08001fdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <vApplicationGetTimerTaskMemory+0x2c>)
 8001fec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <vApplicationGetTimerTaskMemory+0x30>)
 8001ff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200003c4 	.word	0x200003c4
 800200c:	2000046c 	.word	0x2000046c

08002010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0208 	add.w	r2, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f103 0208 	add.w	r2, r3, #8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f103 0208 	add.w	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d103      	bne.n	80020cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e00c      	b.n	80020e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3308      	adds	r3, #8
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e002      	b.n	80020da <vListInsert+0x2e>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d2f6      	bcs.n	80020d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6892      	ldr	r2, [r2, #8]
 8002132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6852      	ldr	r2, [r2, #4]
 800213c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	429a      	cmp	r2, r3
 8002146:	d103      	bne.n	8002150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1e5a      	subs	r2, r3, #1
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
	...

08002170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800219c:	f002 fa76 	bl	800468c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	441a      	add	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	3b01      	subs	r3, #1
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	441a      	add	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	22ff      	movs	r2, #255	@ 0xff
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	22ff      	movs	r2, #255	@ 0xff
 80021e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d114      	bne.n	800221c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01a      	beq.n	8002230 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3310      	adds	r3, #16
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 f93c 	bl	800347c <xTaskRemoveFromEventList>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d012      	beq.n	8002230 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800220a:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <xQueueGenericReset+0xd0>)
 800220c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	e009      	b.n	8002230 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3310      	adds	r3, #16
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fef5 	bl	8002010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3324      	adds	r3, #36	@ 0x24
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fef0 	bl	8002010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002230:	f002 fa5c 	bl	80046ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000ed04 	.word	0xe000ed04

08002244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08e      	sub	sp, #56	@ 0x38
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10b      	bne.n	800228e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	e7fd      	b.n	800228a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <xQueueGenericCreateStatic+0x56>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <xQueueGenericCreateStatic+0x5a>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <xQueueGenericCreateStatic+0x5c>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	623b      	str	r3, [r7, #32]
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <xQueueGenericCreateStatic+0x84>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <xQueueGenericCreateStatic+0x88>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <xQueueGenericCreateStatic+0x8a>
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80022d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	61fb      	str	r3, [r7, #28]
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	e7fd      	b.n	80022e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022ea:	2350      	movs	r3, #80	@ 0x50
 80022ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b50      	cmp	r3, #80	@ 0x50
 80022f2:	d00b      	beq.n	800230c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	61bb      	str	r3, [r7, #24]
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800230c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002320:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f805 	bl	800233e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002336:	4618      	mov	r0, r3
 8002338:	3730      	adds	r7, #48	@ 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e002      	b.n	8002360 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800236c:	2101      	movs	r1, #1
 800236e:	69b8      	ldr	r0, [r7, #24]
 8002370:	f7ff fefe 	bl	8002170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08e      	sub	sp, #56	@ 0x38
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002392:	2300      	movs	r3, #0
 8002394:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <xQueueGenericSend+0x34>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <xQueueGenericSend+0x42>
 80023be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <xQueueGenericSend+0x46>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <xQueueGenericSend+0x48>
 80023ca:	2300      	movs	r3, #0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <xQueueGenericSend+0x64>
	__asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d103      	bne.n	80023f6 <xQueueGenericSend+0x72>
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <xQueueGenericSend+0x76>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <xQueueGenericSend+0x78>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <xQueueGenericSend+0x94>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	623b      	str	r3, [r7, #32]
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002418:	f001 fa04 	bl	8003824 <xTaskGetSchedulerState>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <xQueueGenericSend+0xa4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <xQueueGenericSend+0xa8>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <xQueueGenericSend+0xaa>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <xQueueGenericSend+0xc6>
	__asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	61fb      	str	r3, [r7, #28]
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	e7fd      	b.n	8002446 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800244a:	f002 f91f 	bl	800468c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <xQueueGenericSend+0xdc>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d129      	bne.n	80024b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002466:	f000 fa0f 	bl	8002888 <prvCopyDataToQueue>
 800246a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800246c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002476:	3324      	adds	r3, #36	@ 0x24
 8002478:	4618      	mov	r0, r3
 800247a:	f000 ffff 	bl	800347c <xTaskRemoveFromEventList>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002484:	4b3f      	ldr	r3, [pc, #252]	@ (8002584 <xQueueGenericSend+0x200>)
 8002486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	e00a      	b.n	80024ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800249c:	4b39      	ldr	r3, [pc, #228]	@ (8002584 <xQueueGenericSend+0x200>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024ac:	f002 f91e 	bl	80046ec <vPortExitCritical>
				return pdPASS;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e063      	b.n	800257c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024ba:	f002 f917 	bl	80046ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	e05c      	b.n	800257c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f839 	bl	8003544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024d6:	f002 f909 	bl	80046ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024da:	f000 fda5 	bl	8003028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024de:	f002 f8d5 	bl	800468c <vPortEnterCritical>
 80024e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d103      	bne.n	80024f8 <xQueueGenericSend+0x174>
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024fe:	b25b      	sxtb	r3, r3
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d103      	bne.n	800250e <xQueueGenericSend+0x18a>
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800250e:	f002 f8ed 	bl	80046ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002512:	1d3a      	adds	r2, r7, #4
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f001 f828 	bl	8003570 <xTaskCheckForTimeOut>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d124      	bne.n	8002570 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002526:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002528:	f000 faa6 	bl	8002a78 <prvIsQueueFull>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d018      	beq.n	8002564 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	3310      	adds	r3, #16
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f000 ff4c 	bl	80033d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002542:	f000 fa31 	bl	80029a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002546:	f000 fd7d 	bl	8003044 <xTaskResumeAll>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f47f af7c 	bne.w	800244a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <xQueueGenericSend+0x200>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	e772      	b.n	800244a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002566:	f000 fa1f 	bl	80029a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800256a:	f000 fd6b 	bl	8003044 <xTaskResumeAll>
 800256e:	e76c      	b.n	800244a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002572:	f000 fa19 	bl	80029a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002576:	f000 fd65 	bl	8003044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800257a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800257c:	4618      	mov	r0, r3
 800257e:	3738      	adds	r7, #56	@ 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	e000ed04 	.word	0xe000ed04

08002588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b090      	sub	sp, #64	@ 0x40
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800259a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <xQueueGenericSendFromISR+0x3e>
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <xQueueGenericSendFromISR+0x42>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <xQueueGenericSendFromISR+0x44>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d103      	bne.n	80025f6 <xQueueGenericSendFromISR+0x6e>
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <xQueueGenericSendFromISR+0x72>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <xQueueGenericSendFromISR+0x74>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	623b      	str	r3, [r7, #32]
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002618:	f002 f8fa 	bl	8004810 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800261c:	f3ef 8211 	mrs	r2, BASEPRI
 8002620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	61fa      	str	r2, [r7, #28]
 8002632:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002634:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002636:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800263c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002640:	429a      	cmp	r2, r3
 8002642:	d302      	bcc.n	800264a <xQueueGenericSendFromISR+0xc2>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d12f      	bne.n	80026aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800264a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002650:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002658:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002660:	f000 f912 	bl	8002888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002664:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d112      	bne.n	8002694 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	3324      	adds	r3, #36	@ 0x24
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fefe 	bl	800347c <xTaskRemoveFromEventList>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00e      	beq.n	80026a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00b      	beq.n	80026a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e007      	b.n	80026a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002694:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002698:	3301      	adds	r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	b25a      	sxtb	r2, r3
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80026a4:	2301      	movs	r3, #1
 80026a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80026a8:	e001      	b.n	80026ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3740      	adds	r7, #64	@ 0x40
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	@ 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <xQueueReceive+0x32>
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	623b      	str	r3, [r7, #32]
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	e7fd      	b.n	80026f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <xQueueReceive+0x40>
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <xQueueReceive+0x44>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <xQueueReceive+0x46>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <xQueueReceive+0x62>
	__asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	61fb      	str	r3, [r7, #28]
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	e7fd      	b.n	8002722 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002726:	f001 f87d 	bl	8003824 <xTaskGetSchedulerState>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <xQueueReceive+0x72>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <xQueueReceive+0x76>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <xQueueReceive+0x78>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <xQueueReceive+0x94>
	__asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	61bb      	str	r3, [r7, #24]
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002758:	f001 ff98 	bl	800468c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01f      	beq.n	80027a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800276c:	f000 f8f6 	bl	800295c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	1e5a      	subs	r2, r3, #1
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00f      	beq.n	80027a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002782:	3310      	adds	r3, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fe79 	bl	800347c <xTaskRemoveFromEventList>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002790:	4b3c      	ldr	r3, [pc, #240]	@ (8002884 <xQueueReceive+0x1c0>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027a0:	f001 ffa4 	bl	80046ec <vPortExitCritical>
				return pdPASS;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e069      	b.n	800287c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ae:	f001 ff9d 	bl	80046ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e062      	b.n	800287c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d106      	bne.n	80027ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 febf 	bl	8003544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027c6:	2301      	movs	r3, #1
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027ca:	f001 ff8f 	bl	80046ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027ce:	f000 fc2b 	bl	8003028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027d2:	f001 ff5b 	bl	800468c <vPortEnterCritical>
 80027d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d103      	bne.n	80027ec <xQueueReceive+0x128>
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d103      	bne.n	8002802 <xQueueReceive+0x13e>
 80027fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002802:	f001 ff73 	bl	80046ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002806:	1d3a      	adds	r2, r7, #4
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 feae 	bl	8003570 <xTaskCheckForTimeOut>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d123      	bne.n	8002862 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800281a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800281c:	f000 f916 	bl	8002a4c <prvIsQueueEmpty>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d017      	beq.n	8002856 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002828:	3324      	adds	r3, #36	@ 0x24
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fdd2 	bl	80033d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002834:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002836:	f000 f8b7 	bl	80029a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800283a:	f000 fc03 	bl	8003044 <xTaskResumeAll>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d189      	bne.n	8002758 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <xQueueReceive+0x1c0>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	e780      	b.n	8002758 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002858:	f000 f8a6 	bl	80029a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800285c:	f000 fbf2 	bl	8003044 <xTaskResumeAll>
 8002860:	e77a      	b.n	8002758 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002864:	f000 f8a0 	bl	80029a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002868:	f000 fbec 	bl	8003044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800286c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800286e:	f000 f8ed 	bl	8002a4c <prvIsQueueEmpty>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f43f af6f 	beq.w	8002758 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800287a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800287c:	4618      	mov	r0, r3
 800287e:	3730      	adds	r7, #48	@ 0x30
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	e000ed04 	.word	0xe000ed04

08002888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d14d      	bne.n	800294a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 ffd4 	bl	8003860 <xTaskPriorityDisinherit>
 80028b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	e043      	b.n	800294a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d119      	bne.n	80028fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6858      	ldr	r0, [r3, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	461a      	mov	r2, r3
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	f002 fa54 	bl	8004d80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	441a      	add	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d32b      	bcc.n	800294a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	e026      	b.n	800294a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68d8      	ldr	r0, [r3, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	461a      	mov	r2, r3
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	f002 fa3a 	bl	8004d80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	425b      	negs	r3, r3
 8002916:	441a      	add	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	425b      	negs	r3, r3
 8002932:	441a      	add	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d105      	bne.n	800294a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	3b01      	subs	r3, #1
 8002948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002952:	697b      	ldr	r3, [r7, #20]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d018      	beq.n	80029a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	441a      	add	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d303      	bcc.n	8002990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68d9      	ldr	r1, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	461a      	mov	r2, r3
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f002 f9f0 	bl	8004d80 <memcpy>
	}
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029b0:	f001 fe6c 	bl	800468c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029bc:	e011      	b.n	80029e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d012      	beq.n	80029ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3324      	adds	r3, #36	@ 0x24
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fd56 	bl	800347c <xTaskRemoveFromEventList>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029d6:	f000 fe2f 	bl	8003638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	3b01      	subs	r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	dce9      	bgt.n	80029be <prvUnlockQueue+0x16>
 80029ea:	e000      	b.n	80029ee <prvUnlockQueue+0x46>
					break;
 80029ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	22ff      	movs	r2, #255	@ 0xff
 80029f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80029f6:	f001 fe79 	bl	80046ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029fa:	f001 fe47 	bl	800468c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a06:	e011      	b.n	8002a2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3310      	adds	r3, #16
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fd31 	bl	800347c <xTaskRemoveFromEventList>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a20:	f000 fe0a 	bl	8003638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	dce9      	bgt.n	8002a08 <prvUnlockQueue+0x60>
 8002a34:	e000      	b.n	8002a38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	22ff      	movs	r2, #255	@ 0xff
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002a40:	f001 fe54 	bl	80046ec <vPortExitCritical>
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a54:	f001 fe1a 	bl	800468c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e001      	b.n	8002a6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a6a:	f001 fe3f 	bl	80046ec <vPortExitCritical>

	return xReturn;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a80:	f001 fe04 	bl	800468c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d102      	bne.n	8002a96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e001      	b.n	8002a9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a9a:	f001 fe27 	bl	80046ec <vPortExitCritical>

	return xReturn;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e014      	b.n	8002ae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8002af4 <vQueueAddToRegistry+0x4c>)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ac4:	490b      	ldr	r1, [pc, #44]	@ (8002af4 <vQueueAddToRegistry+0x4c>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ace:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <vQueueAddToRegistry+0x4c>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ada:	e006      	b.n	8002aea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d9e7      	bls.n	8002ab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	2000086c 	.word	0x2000086c

08002af8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b08:	f001 fdc0 	bl	800468c <vPortEnterCritical>
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d103      	bne.n	8002b22 <vQueueWaitForMessageRestricted+0x2a>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d103      	bne.n	8002b38 <vQueueWaitForMessageRestricted+0x40>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b38:	f001 fdd8 	bl	80046ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3324      	adds	r3, #36	@ 0x24
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fc69 	bl	8003424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff28 	bl	80029a8 <prvUnlockQueue>
	}
 8002b58:	bf00      	nop
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08e      	sub	sp, #56	@ 0x38
 8002b64:	af04      	add	r7, sp, #16
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	623b      	str	r3, [r7, #32]
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <xTaskCreateStatic+0x4a>
	__asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	61fb      	str	r3, [r7, #28]
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	e7fd      	b.n	8002ba6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002baa:	23a8      	movs	r3, #168	@ 0xa8
 8002bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2ba8      	cmp	r3, #168	@ 0xa8
 8002bb2:	d00b      	beq.n	8002bcc <xTaskCreateStatic+0x6c>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	61bb      	str	r3, [r7, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01e      	beq.n	8002c12 <xTaskCreateStatic+0xb2>
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01b      	beq.n	8002c12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bec:	2300      	movs	r3, #0
 8002bee:	9303      	str	r3, [sp, #12]
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	9302      	str	r3, [sp, #8]
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f851 	bl	8002cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c0c:	f000 f8f6 	bl	8002dfc <prvAddNewTaskToReadyList>
 8002c10:	e001      	b.n	8002c16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c16:	697b      	ldr	r3, [r7, #20]
	}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	@ 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	@ 0x30
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fe2b 	bl	8004890 <pvPortMalloc>
 8002c3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00e      	beq.n	8002c60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c42:	20a8      	movs	r0, #168	@ 0xa8
 8002c44:	f001 fe24 	bl	8004890 <pvPortMalloc>
 8002c48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c56:	e005      	b.n	8002c64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f001 fee7 	bl	8004a2c <vPortFree>
 8002c5e:	e001      	b.n	8002c64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d017      	beq.n	8002c9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c72:	88fa      	ldrh	r2, [r7, #6]
 8002c74:	2300      	movs	r3, #0
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f80f 	bl	8002cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c8e:	69f8      	ldr	r0, [r7, #28]
 8002c90:	f000 f8b4 	bl	8002dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e002      	b.n	8002ca0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	21a5      	movs	r1, #165	@ 0xa5
 8002cc6:	f001 ffcf 	bl	8004c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	617b      	str	r3, [r7, #20]
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	e7fd      	b.n	8002d02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01f      	beq.n	8002d4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	e012      	b.n	8002d38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	7819      	ldrb	r1, [r3, #0]
 8002d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3334      	adds	r3, #52	@ 0x34
 8002d22:	460a      	mov	r2, r1
 8002d24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3301      	adds	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b0f      	cmp	r3, #15
 8002d3c:	d9e9      	bls.n	8002d12 <prvInitialiseNewTask+0x66>
 8002d3e:	e000      	b.n	8002d42 <prvInitialiseNewTask+0x96>
			{
				break;
 8002d40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d4a:	e003      	b.n	8002d54 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	2b37      	cmp	r3, #55	@ 0x37
 8002d58:	d901      	bls.n	8002d5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d5a:	2337      	movs	r3, #55	@ 0x37
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d68:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	3304      	adds	r3, #4
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f96a 	bl	800204e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f965 	bl	800204e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	3354      	adds	r3, #84	@ 0x54
 8002dae:	224c      	movs	r2, #76	@ 0x4c
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 ff58 	bl	8004c68 <memset>
 8002db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dba:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <prvInitialiseNewTask+0x144>)
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002df4 <prvInitialiseNewTask+0x148>)
 8002dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <prvInitialiseNewTask+0x14c>)
 8002dc8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	69b8      	ldr	r0, [r7, #24]
 8002dd0:	f001 fb6a 	bl	80044a8 <pxPortInitialiseStack>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002de6:	bf00      	nop
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20001b00 	.word	0x20001b00
 8002df4:	20001b68 	.word	0x20001b68
 8002df8:	20001bd0 	.word	0x20001bd0

08002dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e04:	f001 fc42 	bl	800468c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e08:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec0 <prvAddNewTaskToReadyList+0xc4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <prvAddNewTaskToReadyList+0xc4>)
 8002e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e12:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <prvAddNewTaskToReadyList+0xc8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec4 <prvAddNewTaskToReadyList+0xc8>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e20:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <prvAddNewTaskToReadyList+0xc4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d110      	bne.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e28:	f000 fc2a 	bl	8003680 <prvInitialiseTaskLists>
 8002e2c:	e00d      	b.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <prvAddNewTaskToReadyList+0xcc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e36:	4b23      	ldr	r3, [pc, #140]	@ (8002ec4 <prvAddNewTaskToReadyList+0xc8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d802      	bhi.n	8002e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e44:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <prvAddNewTaskToReadyList+0xc8>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ecc <prvAddNewTaskToReadyList+0xd0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <prvAddNewTaskToReadyList+0xd0>)
 8002e52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <prvAddNewTaskToReadyList+0xd0>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <prvAddNewTaskToReadyList+0xd4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d903      	bls.n	8002e70 <prvAddNewTaskToReadyList+0x74>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ed0 <prvAddNewTaskToReadyList+0xd4>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4a15      	ldr	r2, [pc, #84]	@ (8002ed4 <prvAddNewTaskToReadyList+0xd8>)
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7ff f8ed 	bl	8002066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e8c:	f001 fc2e 	bl	80046ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <prvAddNewTaskToReadyList+0xcc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00e      	beq.n	8002eb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <prvAddNewTaskToReadyList+0xc8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d207      	bcs.n	8002eb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <prvAddNewTaskToReadyList+0xdc>)
 8002ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000d80 	.word	0x20000d80
 8002ec4:	200008ac 	.word	0x200008ac
 8002ec8:	20000d8c 	.word	0x20000d8c
 8002ecc:	20000d9c 	.word	0x20000d9c
 8002ed0:	20000d88 	.word	0x20000d88
 8002ed4:	200008b0 	.word	0x200008b0
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d018      	beq.n	8002f20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002eee:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <vTaskDelay+0x64>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <vTaskDelay+0x32>
	__asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	60bb      	str	r3, [r7, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	e7fd      	b.n	8002f0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f0e:	f000 f88b 	bl	8003028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f12:	2100      	movs	r1, #0
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 ff1b 	bl	8003d50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f1a:	f000 f893 	bl	8003044 <xTaskResumeAll>
 8002f1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002f26:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <vTaskDelay+0x68>)
 8002f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000da8 	.word	0x20000da8
 8002f44:	e000ed04 	.word	0xe000ed04

08002f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	@ 0x28
 8002f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f56:	463a      	mov	r2, r7
 8002f58:	1d39      	adds	r1, r7, #4
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f824 	bl	8001fac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	9202      	str	r2, [sp, #8]
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2300      	movs	r3, #0
 8002f74:	460a      	mov	r2, r1
 8002f76:	4924      	ldr	r1, [pc, #144]	@ (8003008 <vTaskStartScheduler+0xc0>)
 8002f78:	4824      	ldr	r0, [pc, #144]	@ (800300c <vTaskStartScheduler+0xc4>)
 8002f7a:	f7ff fdf1 	bl	8002b60 <xTaskCreateStatic>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <vTaskStartScheduler+0xc8>)
 8002f82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f84:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <vTaskStartScheduler+0xc8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e001      	b.n	8002f96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d102      	bne.n	8002fa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f9c:	f000 ff2c 	bl	8003df8 <xTimerCreateTimerTask>
 8002fa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d11b      	bne.n	8002fe0 <vTaskStartScheduler+0x98>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	613b      	str	r3, [r7, #16]
}
 8002fba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fbc:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <vTaskStartScheduler+0xcc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3354      	adds	r3, #84	@ 0x54
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <vTaskStartScheduler+0xd0>)
 8002fc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <vTaskStartScheduler+0xd4>)
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fce:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <vTaskStartScheduler+0xd8>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <vTaskStartScheduler+0xdc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fda:	f001 fae5 	bl	80045a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fde:	e00f      	b.n	8003000 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d10b      	bne.n	8003000 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60fb      	str	r3, [r7, #12]
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <vTaskStartScheduler+0xb4>
}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08004e74 	.word	0x08004e74
 800300c:	08003651 	.word	0x08003651
 8003010:	20000da4 	.word	0x20000da4
 8003014:	200008ac 	.word	0x200008ac
 8003018:	20000010 	.word	0x20000010
 800301c:	20000da0 	.word	0x20000da0
 8003020:	20000d8c 	.word	0x20000d8c
 8003024:	20000d84 	.word	0x20000d84

08003028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800302c:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <vTaskSuspendAll+0x18>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a03      	ldr	r2, [pc, #12]	@ (8003040 <vTaskSuspendAll+0x18>)
 8003034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000da8 	.word	0x20000da8

08003044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003052:	4b42      	ldr	r3, [pc, #264]	@ (800315c <xTaskResumeAll+0x118>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <xTaskResumeAll+0x2e>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	603b      	str	r3, [r7, #0]
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	e7fd      	b.n	800306e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003072:	f001 fb0b 	bl	800468c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003076:	4b39      	ldr	r3, [pc, #228]	@ (800315c <xTaskResumeAll+0x118>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	4a37      	ldr	r2, [pc, #220]	@ (800315c <xTaskResumeAll+0x118>)
 800307e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003080:	4b36      	ldr	r3, [pc, #216]	@ (800315c <xTaskResumeAll+0x118>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d162      	bne.n	800314e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003088:	4b35      	ldr	r3, [pc, #212]	@ (8003160 <xTaskResumeAll+0x11c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05e      	beq.n	800314e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003090:	e02f      	b.n	80030f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003092:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <xTaskResumeAll+0x120>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3318      	adds	r3, #24
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f83c 	bl	800211c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f837 	bl	800211c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <xTaskResumeAll+0x124>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d903      	bls.n	80030c2 <xTaskResumeAll+0x7e>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	4a2a      	ldr	r2, [pc, #168]	@ (8003168 <xTaskResumeAll+0x124>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4a27      	ldr	r2, [pc, #156]	@ (800316c <xTaskResumeAll+0x128>)
 80030d0:	441a      	add	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4610      	mov	r0, r2
 80030da:	f7fe ffc4 	bl	8002066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e2:	4b23      	ldr	r3, [pc, #140]	@ (8003170 <xTaskResumeAll+0x12c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d302      	bcc.n	80030f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80030ec:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <xTaskResumeAll+0x130>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003164 <xTaskResumeAll+0x120>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1cb      	bne.n	8003092 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003100:	f000 fb62 	bl	80037c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003104:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <xTaskResumeAll+0x134>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003110:	f000 f844 	bl	800319c <xTaskIncrementTick>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <xTaskResumeAll+0x130>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f1      	bne.n	8003110 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800312c:	4b12      	ldr	r3, [pc, #72]	@ (8003178 <xTaskResumeAll+0x134>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003132:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <xTaskResumeAll+0x130>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800313a:	2301      	movs	r3, #1
 800313c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800313e:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <xTaskResumeAll+0x138>)
 8003140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800314e:	f001 facd 	bl	80046ec <vPortExitCritical>

	return xAlreadyYielded;
 8003152:	68bb      	ldr	r3, [r7, #8]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000da8 	.word	0x20000da8
 8003160:	20000d80 	.word	0x20000d80
 8003164:	20000d40 	.word	0x20000d40
 8003168:	20000d88 	.word	0x20000d88
 800316c:	200008b0 	.word	0x200008b0
 8003170:	200008ac 	.word	0x200008ac
 8003174:	20000d94 	.word	0x20000d94
 8003178:	20000d90 	.word	0x20000d90
 800317c:	e000ed04 	.word	0xe000ed04

08003180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003186:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <xTaskGetTickCount+0x18>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800318c:	687b      	ldr	r3, [r7, #4]
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000d84 	.word	0x20000d84

0800319c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a6:	4b4f      	ldr	r3, [pc, #316]	@ (80032e4 <xTaskIncrementTick+0x148>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 8090 	bne.w	80032d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031b0:	4b4d      	ldr	r3, [pc, #308]	@ (80032e8 <xTaskIncrementTick+0x14c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031b8:	4a4b      	ldr	r2, [pc, #300]	@ (80032e8 <xTaskIncrementTick+0x14c>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d121      	bne.n	8003208 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80031c4:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <xTaskIncrementTick+0x150>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	603b      	str	r3, [r7, #0]
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	e7fd      	b.n	80031e2 <xTaskIncrementTick+0x46>
 80031e6:	4b41      	ldr	r3, [pc, #260]	@ (80032ec <xTaskIncrementTick+0x150>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	4b40      	ldr	r3, [pc, #256]	@ (80032f0 <xTaskIncrementTick+0x154>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3e      	ldr	r2, [pc, #248]	@ (80032ec <xTaskIncrementTick+0x150>)
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4a3e      	ldr	r2, [pc, #248]	@ (80032f0 <xTaskIncrementTick+0x154>)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b3e      	ldr	r3, [pc, #248]	@ (80032f4 <xTaskIncrementTick+0x158>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	4a3c      	ldr	r2, [pc, #240]	@ (80032f4 <xTaskIncrementTick+0x158>)
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	f000 fae0 	bl	80037c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003208:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <xTaskIncrementTick+0x15c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	429a      	cmp	r2, r3
 8003210:	d349      	bcc.n	80032a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003212:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <xTaskIncrementTick+0x150>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800321c:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <xTaskIncrementTick+0x15c>)
 800321e:	f04f 32ff 	mov.w	r2, #4294967295
 8003222:	601a      	str	r2, [r3, #0]
					break;
 8003224:	e03f      	b.n	80032a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003226:	4b31      	ldr	r3, [pc, #196]	@ (80032ec <xTaskIncrementTick+0x150>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d203      	bcs.n	8003246 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800323e:	4a2e      	ldr	r2, [pc, #184]	@ (80032f8 <xTaskIncrementTick+0x15c>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003244:	e02f      	b.n	80032a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3304      	adds	r3, #4
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe ff66 	bl	800211c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3318      	adds	r3, #24
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe ff5d 	bl	800211c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003266:	4b25      	ldr	r3, [pc, #148]	@ (80032fc <xTaskIncrementTick+0x160>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d903      	bls.n	8003276 <xTaskIncrementTick+0xda>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003272:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <xTaskIncrementTick+0x160>)
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4a1f      	ldr	r2, [pc, #124]	@ (8003300 <xTaskIncrementTick+0x164>)
 8003284:	441a      	add	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3304      	adds	r3, #4
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f7fe feea 	bl	8002066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003296:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <xTaskIncrementTick+0x168>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	429a      	cmp	r2, r3
 800329e:	d3b8      	bcc.n	8003212 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a4:	e7b5      	b.n	8003212 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032a6:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <xTaskIncrementTick+0x168>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ac:	4914      	ldr	r1, [pc, #80]	@ (8003300 <xTaskIncrementTick+0x164>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d901      	bls.n	80032c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80032be:	2301      	movs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032c2:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <xTaskIncrementTick+0x16c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e004      	b.n	80032da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032d0:	4b0e      	ldr	r3, [pc, #56]	@ (800330c <xTaskIncrementTick+0x170>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <xTaskIncrementTick+0x170>)
 80032d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032da:	697b      	ldr	r3, [r7, #20]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000da8 	.word	0x20000da8
 80032e8:	20000d84 	.word	0x20000d84
 80032ec:	20000d38 	.word	0x20000d38
 80032f0:	20000d3c 	.word	0x20000d3c
 80032f4:	20000d98 	.word	0x20000d98
 80032f8:	20000da0 	.word	0x20000da0
 80032fc:	20000d88 	.word	0x20000d88
 8003300:	200008b0 	.word	0x200008b0
 8003304:	200008ac 	.word	0x200008ac
 8003308:	20000d94 	.word	0x20000d94
 800330c:	20000d90 	.word	0x20000d90

08003310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003316:	4b2a      	ldr	r3, [pc, #168]	@ (80033c0 <vTaskSwitchContext+0xb0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800331e:	4b29      	ldr	r3, [pc, #164]	@ (80033c4 <vTaskSwitchContext+0xb4>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003324:	e047      	b.n	80033b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003326:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <vTaskSwitchContext+0xb4>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800332c:	4b26      	ldr	r3, [pc, #152]	@ (80033c8 <vTaskSwitchContext+0xb8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e011      	b.n	8003358 <vTaskSwitchContext+0x48>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10b      	bne.n	8003352 <vTaskSwitchContext+0x42>
	__asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	607b      	str	r3, [r7, #4]
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	e7fd      	b.n	800334e <vTaskSwitchContext+0x3e>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3b01      	subs	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	491c      	ldr	r1, [pc, #112]	@ (80033cc <vTaskSwitchContext+0xbc>)
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0e3      	beq.n	8003334 <vTaskSwitchContext+0x24>
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a15      	ldr	r2, [pc, #84]	@ (80033cc <vTaskSwitchContext+0xbc>)
 8003378:	4413      	add	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3308      	adds	r3, #8
 800338e:	429a      	cmp	r2, r3
 8003390:	d104      	bne.n	800339c <vTaskSwitchContext+0x8c>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4a0b      	ldr	r2, [pc, #44]	@ (80033d0 <vTaskSwitchContext+0xc0>)
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4a08      	ldr	r2, [pc, #32]	@ (80033c8 <vTaskSwitchContext+0xb8>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033ac:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <vTaskSwitchContext+0xc0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3354      	adds	r3, #84	@ 0x54
 80033b2:	4a08      	ldr	r2, [pc, #32]	@ (80033d4 <vTaskSwitchContext+0xc4>)
 80033b4:	6013      	str	r3, [r2, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000da8 	.word	0x20000da8
 80033c4:	20000d94 	.word	0x20000d94
 80033c8:	20000d88 	.word	0x20000d88
 80033cc:	200008b0 	.word	0x200008b0
 80033d0:	200008ac 	.word	0x200008ac
 80033d4:	20000010 	.word	0x20000010

080033d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60fb      	str	r3, [r7, #12]
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <vTaskPlaceOnEventList+0x48>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3318      	adds	r3, #24
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fe fe4f 	bl	80020ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800340e:	2101      	movs	r1, #1
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	f000 fc9d 	bl	8003d50 <prvAddCurrentTaskToDelayedList>
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200008ac 	.word	0x200008ac

08003424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <vTaskPlaceOnEventListRestricted+0x54>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3318      	adds	r3, #24
 8003454:	4619      	mov	r1, r3
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fe fe05 	bl	8002066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68b8      	ldr	r0, [r7, #8]
 800346c:	f000 fc70 	bl	8003d50 <prvAddCurrentTaskToDelayedList>
	}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200008ac 	.word	0x200008ac

0800347c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60fb      	str	r3, [r7, #12]
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	e7fd      	b.n	80034a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fe34 	bl	800211c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <xTaskRemoveFromEventList+0xb0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11d      	bne.n	80034f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3304      	adds	r3, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fe2b 	bl	800211c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ca:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <xTaskRemoveFromEventList+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d903      	bls.n	80034da <xTaskRemoveFromEventList+0x5e>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	4a16      	ldr	r2, [pc, #88]	@ (8003530 <xTaskRemoveFromEventList+0xb4>)
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <xTaskRemoveFromEventList+0xb8>)
 80034e8:	441a      	add	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7fe fdb8 	bl	8002066 <vListInsertEnd>
 80034f6:	e005      	b.n	8003504 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3318      	adds	r3, #24
 80034fc:	4619      	mov	r1, r3
 80034fe:	480e      	ldr	r0, [pc, #56]	@ (8003538 <xTaskRemoveFromEventList+0xbc>)
 8003500:	f7fe fdb1 	bl	8002066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <xTaskRemoveFromEventList+0xc0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	429a      	cmp	r2, r3
 8003510:	d905      	bls.n	800351e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003512:	2301      	movs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003516:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <xTaskRemoveFromEventList+0xc4>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e001      	b.n	8003522 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003522:	697b      	ldr	r3, [r7, #20]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000da8 	.word	0x20000da8
 8003530:	20000d88 	.word	0x20000d88
 8003534:	200008b0 	.word	0x200008b0
 8003538:	20000d40 	.word	0x20000d40
 800353c:	200008ac 	.word	0x200008ac
 8003540:	20000d94 	.word	0x20000d94

08003544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <vTaskInternalSetTimeOutState+0x24>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <vTaskInternalSetTimeOutState+0x28>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	605a      	str	r2, [r3, #4]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000d98 	.word	0x20000d98
 800356c:	20000d84 	.word	0x20000d84

08003570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	613b      	str	r3, [r7, #16]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	60fb      	str	r3, [r7, #12]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80035b6:	f001 f869 	bl	800468c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <xTaskCheckForTimeOut+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e023      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <xTaskCheckForTimeOut+0xc4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d007      	beq.n	80035f6 <xTaskCheckForTimeOut+0x86>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e015      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d20b      	bcs.n	8003618 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff99 	bl	8003544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e004      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003622:	f001 f863 	bl	80046ec <vPortExitCritical>

	return xReturn;
 8003626:	69fb      	ldr	r3, [r7, #28]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000d84 	.word	0x20000d84
 8003634:	20000d98 	.word	0x20000d98

08003638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <vTaskMissedYield+0x14>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000d94 	.word	0x20000d94

08003650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003658:	f000 f852 	bl	8003700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <prvIdleTask+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d9f9      	bls.n	8003658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <prvIdleTask+0x2c>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003674:	e7f0      	b.n	8003658 <prvIdleTask+0x8>
 8003676:	bf00      	nop
 8003678:	200008b0 	.word	0x200008b0
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e00c      	b.n	80036a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <prvInitialiseTaskLists+0x60>)
 8003698:	4413      	add	r3, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fcb8 	bl	8002010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b37      	cmp	r3, #55	@ 0x37
 80036aa:	d9ef      	bls.n	800368c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036ac:	480d      	ldr	r0, [pc, #52]	@ (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ae:	f7fe fcaf 	bl	8002010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036b2:	480d      	ldr	r0, [pc, #52]	@ (80036e8 <prvInitialiseTaskLists+0x68>)
 80036b4:	f7fe fcac 	bl	8002010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036b8:	480c      	ldr	r0, [pc, #48]	@ (80036ec <prvInitialiseTaskLists+0x6c>)
 80036ba:	f7fe fca9 	bl	8002010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036be:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <prvInitialiseTaskLists+0x70>)
 80036c0:	f7fe fca6 	bl	8002010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036c4:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <prvInitialiseTaskLists+0x74>)
 80036c6:	f7fe fca3 	bl	8002010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <prvInitialiseTaskLists+0x78>)
 80036cc:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <prvInitialiseTaskLists+0x7c>)
 80036d2:	4a05      	ldr	r2, [pc, #20]	@ (80036e8 <prvInitialiseTaskLists+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200008b0 	.word	0x200008b0
 80036e4:	20000d10 	.word	0x20000d10
 80036e8:	20000d24 	.word	0x20000d24
 80036ec:	20000d40 	.word	0x20000d40
 80036f0:	20000d54 	.word	0x20000d54
 80036f4:	20000d6c 	.word	0x20000d6c
 80036f8:	20000d38 	.word	0x20000d38
 80036fc:	20000d3c 	.word	0x20000d3c

08003700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003706:	e019      	b.n	800373c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003708:	f000 ffc0 	bl	800468c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <prvCheckTasksWaitingTermination+0x50>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fcff 	bl	800211c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a0b      	ldr	r2, [pc, #44]	@ (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a0a      	ldr	r2, [pc, #40]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 8003730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003732:	f000 ffdb 	bl	80046ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f810 	bl	800375c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000d54 	.word	0x20000d54
 8003754:	20000d80 	.word	0x20000d80
 8003758:	20000d68 	.word	0x20000d68

0800375c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3354      	adds	r3, #84	@ 0x54
 8003768:	4618      	mov	r0, r3
 800376a:	f001 fa85 	bl	8004c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f955 	bl	8004a2c <vPortFree>
				vPortFree( pxTCB );
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f001 f952 	bl	8004a2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003788:	e019      	b.n	80037be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003790:	2b01      	cmp	r3, #1
 8003792:	d103      	bne.n	800379c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f001 f949 	bl	8004a2c <vPortFree>
	}
 800379a:	e010      	b.n	80037be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d00b      	beq.n	80037be <prvDeleteTCB+0x62>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60fb      	str	r3, [r7, #12]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <prvDeleteTCB+0x5e>
	}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <prvResetNextTaskUnblockTime+0x38>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <prvResetNextTaskUnblockTime+0x3c>)
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037e0:	e008      	b.n	80037f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e2:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <prvResetNextTaskUnblockTime+0x38>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a04      	ldr	r2, [pc, #16]	@ (8003804 <prvResetNextTaskUnblockTime+0x3c>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000d38 	.word	0x20000d38
 8003804:	20000da0 	.word	0x20000da0

08003808 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800380e:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <xTaskGetCurrentTaskHandle+0x18>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003814:	687b      	ldr	r3, [r7, #4]
	}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	200008ac 	.word	0x200008ac

08003824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <xTaskGetSchedulerState+0x34>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003832:	2301      	movs	r3, #1
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	e008      	b.n	800384a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003838:	4b08      	ldr	r3, [pc, #32]	@ (800385c <xTaskGetSchedulerState+0x38>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003840:	2302      	movs	r3, #2
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	e001      	b.n	800384a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800384a:	687b      	ldr	r3, [r7, #4]
	}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000d8c 	.word	0x20000d8c
 800385c:	20000da8 	.word	0x20000da8

08003860 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d058      	beq.n	8003928 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003876:	4b2f      	ldr	r3, [pc, #188]	@ (8003934 <xTaskPriorityDisinherit+0xd4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	429a      	cmp	r2, r3
 800387e:	d00b      	beq.n	8003898 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60fb      	str	r3, [r7, #12]
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	60bb      	str	r3, [r7, #8]
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d02c      	beq.n	8003928 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d128      	bne.n	8003928 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	3304      	adds	r3, #4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fc1e 	bl	800211c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <xTaskPriorityDisinherit+0xd8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d903      	bls.n	8003908 <xTaskPriorityDisinherit+0xa8>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	4a0c      	ldr	r2, [pc, #48]	@ (8003938 <xTaskPriorityDisinherit+0xd8>)
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4a09      	ldr	r2, [pc, #36]	@ (800393c <xTaskPriorityDisinherit+0xdc>)
 8003916:	441a      	add	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f7fe fba1 	bl	8002066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003928:	697b      	ldr	r3, [r7, #20]
	}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200008ac 	.word	0x200008ac
 8003938:	20000d88 	.word	0x20000d88
 800393c:	200008b0 	.word	0x200008b0

08003940 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800394e:	f000 fe9d 	bl	800468c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003952:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <xTaskNotifyWait+0xb8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d01c      	beq.n	800399a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003960:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <xTaskNotifyWait+0xb8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	43d2      	mvns	r2, r2
 800396c:	400a      	ands	r2, r1
 800396e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003972:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <xTaskNotifyWait+0xb8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003982:	2101      	movs	r1, #1
 8003984:	6838      	ldr	r0, [r7, #0]
 8003986:	f000 f9e3 	bl	8003d50 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800398a:	4b1c      	ldr	r3, [pc, #112]	@ (80039fc <xTaskNotifyWait+0xbc>)
 800398c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800399a:	f000 fea7 	bl	80046ec <vPortExitCritical>

		taskENTER_CRITICAL();
 800399e:	f000 fe75 	bl	800468c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <xTaskNotifyWait+0xb8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <xTaskNotifyWait+0xb8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d002      	beq.n	80039c8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e00a      	b.n	80039de <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <xTaskNotifyWait+0xb8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	43d2      	mvns	r2, r2
 80039d4:	400a      	ands	r2, r1
 80039d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80039da:	2301      	movs	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <xTaskNotifyWait+0xb8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80039e8:	f000 fe80 	bl	80046ec <vPortExitCritical>

		return xReturn;
 80039ec:	697b      	ldr	r3, [r7, #20]
	}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200008ac 	.word	0x200008ac
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	@ 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003a10:	2301      	movs	r3, #1
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <xTaskGenericNotify+0x32>
	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	61bb      	str	r3, [r7, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	e7fd      	b.n	8003a2e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003a36:	f000 fe29 	bl	800468c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003a50:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d82e      	bhi.n	8003abe <xTaskGenericNotify+0xbe>
 8003a60:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <xTaskGenericNotify+0x68>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003ae3 	.word	0x08003ae3
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8f 	.word	0x08003a8f
 8003a74:	08003a9f 	.word	0x08003a9f
 8003a78:	08003aa9 	.word	0x08003aa9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8003a8c:	e02c      	b.n	8003ae8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8003a9c:	e024      	b.n	8003ae8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8003aa6:	e01f      	b.n	8003ae8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d004      	beq.n	8003ab8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003ab6:	e017      	b.n	8003ae8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003abc:	e014      	b.n	8003ae8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d00d      	beq.n	8003ae6 <xTaskGenericNotify+0xe6>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	617b      	str	r3, [r7, #20]
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	e7fd      	b.n	8003ade <xTaskGenericNotify+0xde>
					break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <xTaskGenericNotify+0xe8>

					break;
 8003ae6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ae8:	7ffb      	ldrb	r3, [r7, #31]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d13b      	bne.n	8003b66 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fb12 	bl	800211c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <xTaskGenericNotify+0x174>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d903      	bls.n	8003b0c <xTaskGenericNotify+0x10c>
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4a1a      	ldr	r2, [pc, #104]	@ (8003b74 <xTaskGenericNotify+0x174>)
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <xTaskGenericNotify+0x178>)
 8003b1a:	441a      	add	r2, r3
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f7fe fa9f 	bl	8002066 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <xTaskGenericNotify+0x148>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	613b      	str	r3, [r7, #16]
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <xTaskGenericNotify+0x17c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d907      	bls.n	8003b66 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003b56:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <xTaskGenericNotify+0x180>)
 8003b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003b66:	f000 fdc1 	bl	80046ec <vPortExitCritical>

		return xReturn;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000d88 	.word	0x20000d88
 8003b78:	200008b0 	.word	0x200008b0
 8003b7c:	200008ac 	.word	0x200008ac
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08e      	sub	sp, #56	@ 0x38
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003b94:	2301      	movs	r3, #1
 8003b96:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bb6:	f000 fe2b 	bl	8004810 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8003bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	623a      	str	r2, [r7, #32]
 8003bd4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8003bd6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003bf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d82e      	bhi.n	8003c60 <xTaskGenericNotifyFromISR+0xdc>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <xTaskGenericNotifyFromISR+0x84>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c85 	.word	0x08003c85
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c2f 	.word	0x08003c2f
 8003c14:	08003c3f 	.word	0x08003c3f
 8003c18:	08003c49 	.word	0x08003c49
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8003c2c:	e02d      	b.n	8003c8a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8003c3c:	e025      	b.n	8003c8a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8003c46:	e020      	b.n	8003c8a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003c48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d004      	beq.n	8003c5a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003c58:	e017      	b.n	8003c8a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8003c5e:	e014      	b.n	8003c8a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d00d      	beq.n	8003c88 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	61bb      	str	r3, [r7, #24]
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <xTaskGenericNotifyFromISR+0x106>
					break;
 8003c88:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d147      	bne.n	8003d22 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	617b      	str	r3, [r7, #20]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb2:	4b21      	ldr	r3, [pc, #132]	@ (8003d38 <xTaskGenericNotifyFromISR+0x1b4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11d      	bne.n	8003cf6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fa2c 	bl	800211c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d3c <xTaskGenericNotifyFromISR+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d903      	bls.n	8003cd8 <xTaskGenericNotifyFromISR+0x154>
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	4a19      	ldr	r2, [pc, #100]	@ (8003d3c <xTaskGenericNotifyFromISR+0x1b8>)
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <xTaskGenericNotifyFromISR+0x1bc>)
 8003ce6:	441a      	add	r2, r3
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe f9b9 	bl	8002066 <vListInsertEnd>
 8003cf4:	e005      	b.n	8003d02 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4811      	ldr	r0, [pc, #68]	@ (8003d44 <xTaskGenericNotifyFromISR+0x1c0>)
 8003cfe:	f7fe f9b2 	bl	8002066 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	4b10      	ldr	r3, [pc, #64]	@ (8003d48 <xTaskGenericNotifyFromISR+0x1c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d908      	bls.n	8003d22 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <xTaskGenericNotifyFromISR+0x1c8>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f383 8811 	msr	BASEPRI, r3
}
 8003d2c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3738      	adds	r7, #56	@ 0x38
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000da8 	.word	0x20000da8
 8003d3c:	20000d88 	.word	0x20000d88
 8003d40:	200008b0 	.word	0x200008b0
 8003d44:	20000d40 	.word	0x20000d40
 8003d48:	200008ac 	.word	0x200008ac
 8003d4c:	20000d94 	.word	0x20000d94

08003d50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d5a:	4b21      	ldr	r3, [pc, #132]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe f9d8 	bl	800211c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d10a      	bne.n	8003d8a <prvAddCurrentTaskToDelayedList+0x3a>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4819      	ldr	r0, [pc, #100]	@ (8003de8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d84:	f7fe f96f 	bl	8002066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d88:	e026      	b.n	8003dd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d92:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d209      	bcs.n	8003db6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da2:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <prvAddCurrentTaskToDelayedList+0x9c>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f7fe f97c 	bl	80020ac <vListInsert>
}
 8003db4:	e010      	b.n	8003dd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db6:	4b0e      	ldr	r3, [pc, #56]	@ (8003df0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7fe f972 	bl	80020ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003df4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d202      	bcs.n	8003dd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000d84 	.word	0x20000d84
 8003de4:	200008ac 	.word	0x200008ac
 8003de8:	20000d6c 	.word	0x20000d6c
 8003dec:	20000d3c 	.word	0x20000d3c
 8003df0:	20000d38 	.word	0x20000d38
 8003df4:	20000da0 	.word	0x20000da0

08003df8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	@ 0x28
 8003dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e02:	f000 fb11 	bl	8004428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e06:	4b1d      	ldr	r3, [pc, #116]	@ (8003e7c <xTimerCreateTimerTask+0x84>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d021      	beq.n	8003e52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e16:	1d3a      	adds	r2, r7, #4
 8003e18:	f107 0108 	add.w	r1, r7, #8
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe f8db 	bl	8001fdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	9202      	str	r2, [sp, #8]
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	2302      	movs	r3, #2
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2300      	movs	r3, #0
 8003e36:	460a      	mov	r2, r1
 8003e38:	4911      	ldr	r1, [pc, #68]	@ (8003e80 <xTimerCreateTimerTask+0x88>)
 8003e3a:	4812      	ldr	r0, [pc, #72]	@ (8003e84 <xTimerCreateTimerTask+0x8c>)
 8003e3c:	f7fe fe90 	bl	8002b60 <xTaskCreateStatic>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4a11      	ldr	r2, [pc, #68]	@ (8003e88 <xTimerCreateTimerTask+0x90>)
 8003e44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e46:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <xTimerCreateTimerTask+0x90>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	613b      	str	r3, [r7, #16]
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003e70:	697b      	ldr	r3, [r7, #20]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000ddc 	.word	0x20000ddc
 8003e80:	08004e7c 	.word	0x08004e7c
 8003e84:	08003fc5 	.word	0x08003fc5
 8003e88:	20000de0 	.word	0x20000de0

08003e8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	@ 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <xTimerGenericCommand+0x30>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	623b      	str	r3, [r7, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <xTimerGenericCommand+0x98>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d02a      	beq.n	8003f1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	dc18      	bgt.n	8003f08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ed6:	f7ff fca5 	bl	8003824 <xTaskGetSchedulerState>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d109      	bne.n	8003ef4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ee0:	4b10      	ldr	r3, [pc, #64]	@ (8003f24 <xTimerGenericCommand+0x98>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	f107 0110 	add.w	r1, r7, #16
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eec:	f7fe fa4a 	bl	8002384 <xQueueGenericSend>
 8003ef0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ef2:	e012      	b.n	8003f1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <xTimerGenericCommand+0x98>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	f107 0110 	add.w	r1, r7, #16
 8003efc:	2300      	movs	r3, #0
 8003efe:	2200      	movs	r2, #0
 8003f00:	f7fe fa40 	bl	8002384 <xQueueGenericSend>
 8003f04:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f06:	e008      	b.n	8003f1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f08:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <xTimerGenericCommand+0x98>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	f107 0110 	add.w	r1, r7, #16
 8003f10:	2300      	movs	r3, #0
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	f7fe fb38 	bl	8002588 <xQueueGenericSendFromISR>
 8003f18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	@ 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000ddc 	.word	0x20000ddc

08003f28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f32:	4b23      	ldr	r3, [pc, #140]	@ (8003fc0 <prvProcessExpiredTimer+0x98>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe f8eb 	bl	800211c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d023      	beq.n	8003f9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	18d1      	adds	r1, r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6978      	ldr	r0, [r7, #20]
 8003f62:	f000 f8d3 	bl	800410c <prvInsertTimerInActiveList>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	2100      	movs	r1, #0
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff88 	bl	8003e8c <xTimerGenericCommand>
 8003f7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d114      	bne.n	8003fae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	60fb      	str	r3, [r7, #12]
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	6978      	ldr	r0, [r7, #20]
 8003fb4:	4798      	blx	r3
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000dd4 	.word	0x20000dd4

08003fc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fcc:	f107 0308 	add.w	r3, r7, #8
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 f859 	bl	8004088 <prvGetNextExpireTime>
 8003fd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f805 	bl	8003fec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fe2:	f000 f8d5 	bl	8004190 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fe6:	bf00      	nop
 8003fe8:	e7f0      	b.n	8003fcc <prvTimerTask+0x8>
	...

08003fec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ff6:	f7ff f817 	bl	8003028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f864 	bl	80040cc <prvSampleTimeNow>
 8004004:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d130      	bne.n	800406e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <prvProcessTimerOrBlockTask+0x3c>
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	429a      	cmp	r2, r3
 8004018:	d806      	bhi.n	8004028 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800401a:	f7ff f813 	bl	8003044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff81 	bl	8003f28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004026:	e024      	b.n	8004072 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800402e:	4b13      	ldr	r3, [pc, #76]	@ (800407c <prvProcessTimerOrBlockTask+0x90>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <prvProcessTimerOrBlockTask+0x50>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <prvProcessTimerOrBlockTask+0x52>
 800403c:	2300      	movs	r3, #0
 800403e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004040:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <prvProcessTimerOrBlockTask+0x94>)
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	f7fe fd53 	bl	8002af8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004052:	f7fe fff7 	bl	8003044 <xTaskResumeAll>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800405c:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <prvProcessTimerOrBlockTask+0x98>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
}
 800406c:	e001      	b.n	8004072 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800406e:	f7fe ffe9 	bl	8003044 <xTaskResumeAll>
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000dd8 	.word	0x20000dd8
 8004080:	20000ddc 	.word	0x20000ddc
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004090:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <prvGetNextExpireTime+0x40>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <prvGetNextExpireTime+0x16>
 800409a:	2201      	movs	r2, #1
 800409c:	e000      	b.n	80040a0 <prvGetNextExpireTime+0x18>
 800409e:	2200      	movs	r2, #0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ac:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <prvGetNextExpireTime+0x40>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e001      	b.n	80040bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040bc:	68fb      	ldr	r3, [r7, #12]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	20000dd4 	.word	0x20000dd4

080040cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040d4:	f7ff f854 	bl	8003180 <xTaskGetTickCount>
 80040d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <prvSampleTimeNow+0x3c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d205      	bcs.n	80040f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040e4:	f000 f93a 	bl	800435c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e002      	b.n	80040f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040f6:	4a04      	ldr	r2, [pc, #16]	@ (8004108 <prvSampleTimeNow+0x3c>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000de4 	.word	0x20000de4

0800410c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d812      	bhi.n	8004158 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e01b      	b.n	800417e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004146:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <prvInsertTimerInActiveList+0x7c>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3304      	adds	r3, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f7fd ffab 	bl	80020ac <vListInsert>
 8004156:	e012      	b.n	800417e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d206      	bcs.n	800416e <prvInsertTimerInActiveList+0x62>
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e007      	b.n	800417e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <prvInsertTimerInActiveList+0x80>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3304      	adds	r3, #4
 8004176:	4619      	mov	r1, r3
 8004178:	4610      	mov	r0, r2
 800417a:	f7fd ff97 	bl	80020ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800417e:	697b      	ldr	r3, [r7, #20]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20000dd8 	.word	0x20000dd8
 800418c:	20000dd4 	.word	0x20000dd4

08004190 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08e      	sub	sp, #56	@ 0x38
 8004194:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004196:	e0ce      	b.n	8004336 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	da19      	bge.n	80041d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	3304      	adds	r3, #4
 80041a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	61fb      	str	r3, [r7, #28]
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	e7fd      	b.n	80041be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c8:	6850      	ldr	r0, [r2, #4]
 80041ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f2c0 80ae 	blt.w	8004336 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	3304      	adds	r3, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd ff96 	bl	800211c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041f0:	463b      	mov	r3, r7
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff6a 	bl	80040cc <prvSampleTimeNow>
 80041f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	f200 8097 	bhi.w	8004330 <prvProcessReceivedCommands+0x1a0>
 8004202:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <prvProcessReceivedCommands+0x78>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004231 	.word	0x08004231
 800420c:	08004231 	.word	0x08004231
 8004210:	08004231 	.word	0x08004231
 8004214:	080042a7 	.word	0x080042a7
 8004218:	080042bb 	.word	0x080042bb
 800421c:	08004307 	.word	0x08004307
 8004220:	08004231 	.word	0x08004231
 8004224:	08004231 	.word	0x08004231
 8004228:	080042a7 	.word	0x080042a7
 800422c:	080042bb 	.word	0x080042bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	b2da      	uxtb	r2, r3
 800423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	18d1      	adds	r1, r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004250:	f7ff ff5c 	bl	800410c <prvInsertTimerInActiveList>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d06c      	beq.n	8004334 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004260:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d061      	beq.n	8004334 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	441a      	add	r2, r3
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2300      	movs	r3, #0
 800427e:	2100      	movs	r1, #0
 8004280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004282:	f7ff fe03 	bl	8003e8c <xTimerGenericCommand>
 8004286:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d152      	bne.n	8004334 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	61bb      	str	r3, [r7, #24]
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	e7fd      	b.n	80042a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80042b8:	e03d      	b.n	8004336 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	617b      	str	r3, [r7, #20]
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	e7fd      	b.n	80042ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	18d1      	adds	r1, r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004300:	f7ff ff04 	bl	800410c <prvInsertTimerInActiveList>
					break;
 8004304:	e017      	b.n	8004336 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004316:	f000 fb89 	bl	8004a2c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800431a:	e00c      	b.n	8004336 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800432e:	e002      	b.n	8004336 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004330:	bf00      	nop
 8004332:	e000      	b.n	8004336 <prvProcessReceivedCommands+0x1a6>
					break;
 8004334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <prvProcessReceivedCommands+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	1d39      	adds	r1, r7, #4
 800433c:	2200      	movs	r2, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe f9c0 	bl	80026c4 <xQueueReceive>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	f47f af26 	bne.w	8004198 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3730      	adds	r7, #48	@ 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000ddc 	.word	0x20000ddc

0800435c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004362:	e049      	b.n	80043f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004364:	4b2e      	ldr	r3, [pc, #184]	@ (8004420 <prvSwitchTimerLists+0xc4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436e:	4b2c      	ldr	r3, [pc, #176]	@ (8004420 <prvSwitchTimerLists+0xc4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd fecd 	bl	800211c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02f      	beq.n	80043f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d90e      	bls.n	80043c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <prvSwitchTimerLists+0xc4>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7fd fe73 	bl	80020ac <vListInsert>
 80043c6:	e017      	b.n	80043f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2300      	movs	r3, #0
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	2100      	movs	r1, #0
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff fd5a 	bl	8003e8c <xTimerGenericCommand>
 80043d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	603b      	str	r3, [r7, #0]
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	e7fd      	b.n	80043f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <prvSwitchTimerLists+0xc4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1b0      	bne.n	8004364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004402:	4b07      	ldr	r3, [pc, #28]	@ (8004420 <prvSwitchTimerLists+0xc4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <prvSwitchTimerLists+0xc8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a04      	ldr	r2, [pc, #16]	@ (8004420 <prvSwitchTimerLists+0xc4>)
 800440e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004410:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <prvSwitchTimerLists+0xc8>)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	6013      	str	r3, [r2, #0]
}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000dd4 	.word	0x20000dd4
 8004424:	20000dd8 	.word	0x20000dd8

08004428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800442e:	f000 f92d 	bl	800468c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004432:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <prvCheckForValidListAndQueue+0x60>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d120      	bne.n	800447c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800443a:	4814      	ldr	r0, [pc, #80]	@ (800448c <prvCheckForValidListAndQueue+0x64>)
 800443c:	f7fd fde8 	bl	8002010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004440:	4813      	ldr	r0, [pc, #76]	@ (8004490 <prvCheckForValidListAndQueue+0x68>)
 8004442:	f7fd fde5 	bl	8002010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004446:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <prvCheckForValidListAndQueue+0x6c>)
 8004448:	4a10      	ldr	r2, [pc, #64]	@ (800448c <prvCheckForValidListAndQueue+0x64>)
 800444a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <prvCheckForValidListAndQueue+0x70>)
 800444e:	4a10      	ldr	r2, [pc, #64]	@ (8004490 <prvCheckForValidListAndQueue+0x68>)
 8004450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004452:	2300      	movs	r3, #0
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4b11      	ldr	r3, [pc, #68]	@ (800449c <prvCheckForValidListAndQueue+0x74>)
 8004458:	4a11      	ldr	r2, [pc, #68]	@ (80044a0 <prvCheckForValidListAndQueue+0x78>)
 800445a:	2110      	movs	r1, #16
 800445c:	200a      	movs	r0, #10
 800445e:	f7fd fef1 	bl	8002244 <xQueueGenericCreateStatic>
 8004462:	4603      	mov	r3, r0
 8004464:	4a08      	ldr	r2, [pc, #32]	@ (8004488 <prvCheckForValidListAndQueue+0x60>)
 8004466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004468:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <prvCheckForValidListAndQueue+0x60>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <prvCheckForValidListAndQueue+0x60>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	490b      	ldr	r1, [pc, #44]	@ (80044a4 <prvCheckForValidListAndQueue+0x7c>)
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fb16 	bl	8002aa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800447c:	f000 f936 	bl	80046ec <vPortExitCritical>
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000ddc 	.word	0x20000ddc
 800448c:	20000dac 	.word	0x20000dac
 8004490:	20000dc0 	.word	0x20000dc0
 8004494:	20000dd4 	.word	0x20000dd4
 8004498:	20000dd8 	.word	0x20000dd8
 800449c:	20000e88 	.word	0x20000e88
 80044a0:	20000de8 	.word	0x20000de8
 80044a4:	08004e84 	.word	0x08004e84

080044a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3b04      	subs	r3, #4
 80044b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3b04      	subs	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b04      	subs	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044d8:	4a08      	ldr	r2, [pc, #32]	@ (80044fc <pxPortInitialiseStack+0x54>)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b14      	subs	r3, #20
 80044e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3b20      	subs	r3, #32
 80044ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f0:	68fb      	ldr	r3, [r7, #12]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	08004501 	.word	0x08004501

08004500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800450a:	4b12      	ldr	r3, [pc, #72]	@ (8004554 <prvTaskExitError+0x54>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d00b      	beq.n	800452c <prvTaskExitError+0x2c>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60fb      	str	r3, [r7, #12]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <prvTaskExitError+0x28>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60bb      	str	r3, [r7, #8]
}
 800453e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004540:	bf00      	nop
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0fc      	beq.n	8004542 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	2000000c 	.word	0x2000000c
	...

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	f04e 0e0d 	orr.w	lr, lr, #13
 800457e:	4770      	bx	lr

08004580 <pxCurrentTCBConst2>:
 8004580:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004588:	4806      	ldr	r0, [pc, #24]	@ (80045a4 <prvPortStartFirstTask+0x1c>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	b662      	cpsie	i
 8004594:	b661      	cpsie	f
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	df00      	svc	0
 80045a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045a2:	bf00      	nop
 80045a4:	e000ed08 	.word	0xe000ed08

080045a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ae:	4b32      	ldr	r3, [pc, #200]	@ (8004678 <xPortStartScheduler+0xd0>)
 80045b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	22ff      	movs	r2, #255	@ 0xff
 80045be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4b2a      	ldr	r3, [pc, #168]	@ (800467c <xPortStartScheduler+0xd4>)
 80045d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004680 <xPortStartScheduler+0xd8>)
 80045d8:	2207      	movs	r2, #7
 80045da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045dc:	e009      	b.n	80045f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045de:	4b28      	ldr	r3, [pc, #160]	@ (8004680 <xPortStartScheduler+0xd8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	4a26      	ldr	r2, [pc, #152]	@ (8004680 <xPortStartScheduler+0xd8>)
 80045e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fa:	2b80      	cmp	r3, #128	@ 0x80
 80045fc:	d0ef      	beq.n	80045de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045fe:	4b20      	ldr	r3, [pc, #128]	@ (8004680 <xPortStartScheduler+0xd8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1c3 0307 	rsb	r3, r3, #7
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00b      	beq.n	8004622 <xPortStartScheduler+0x7a>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004622:	4b17      	ldr	r3, [pc, #92]	@ (8004680 <xPortStartScheduler+0xd8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	4a15      	ldr	r2, [pc, #84]	@ (8004680 <xPortStartScheduler+0xd8>)
 800462a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800462c:	4b14      	ldr	r3, [pc, #80]	@ (8004680 <xPortStartScheduler+0xd8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004634:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <xPortStartScheduler+0xd8>)
 8004636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004640:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <xPortStartScheduler+0xdc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0f      	ldr	r2, [pc, #60]	@ (8004684 <xPortStartScheduler+0xdc>)
 8004646:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800464a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800464c:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <xPortStartScheduler+0xdc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <xPortStartScheduler+0xdc>)
 8004652:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004658:	f000 f8b8 	bl	80047cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <xPortStartScheduler+0xe0>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004662:	f7ff ff91 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004666:	f7fe fe53 	bl	8003310 <vTaskSwitchContext>
	prvTaskExitError();
 800466a:	f7ff ff49 	bl	8004500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	e000e400 	.word	0xe000e400
 800467c:	20000ed8 	.word	0x20000ed8
 8004680:	20000edc 	.word	0x20000edc
 8004684:	e000ed20 	.word	0xe000ed20
 8004688:	2000000c 	.word	0x2000000c

0800468c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046a6:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <vPortEnterCritical+0x58>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a0d      	ldr	r2, [pc, #52]	@ (80046e4 <vPortEnterCritical+0x58>)
 80046ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046b0:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <vPortEnterCritical+0x58>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d110      	bne.n	80046da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <vPortEnterCritical+0x5c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <vPortEnterCritical+0x4e>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	603b      	str	r3, [r7, #0]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <vPortEnterCritical+0x4a>
	}
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	2000000c 	.word	0x2000000c
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046f2:	4b12      	ldr	r3, [pc, #72]	@ (800473c <vPortExitCritical+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <vPortExitCritical+0x26>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	607b      	str	r3, [r7, #4]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <vPortExitCritical+0x50>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3b01      	subs	r3, #1
 8004718:	4a08      	ldr	r2, [pc, #32]	@ (800473c <vPortExitCritical+0x50>)
 800471a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800471c:	4b07      	ldr	r3, [pc, #28]	@ (800473c <vPortExitCritical+0x50>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <vPortExitCritical+0x44>
 8004724:	2300      	movs	r3, #0
 8004726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f383 8811 	msr	BASEPRI, r3
}
 800472e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000000c 	.word	0x2000000c

08004740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004740:	f3ef 8009 	mrs	r0, PSP
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <pxCurrentTCBConst>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004750:	6010      	str	r0, [r2, #0]
 8004752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004756:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800475a:	f380 8811 	msr	BASEPRI, r0
 800475e:	f7fe fdd7 	bl	8003310 <vTaskSwitchContext>
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8811 	msr	BASEPRI, r0
 800476a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	6808      	ldr	r0, [r1, #0]
 8004772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004776:	f380 8809 	msr	PSP, r0
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	4770      	bx	lr

08004780 <pxCurrentTCBConst>:
 8004780:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
}
 80047a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047a2:	f7fe fcfb 	bl	800319c <xTaskIncrementTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <xPortSysTickHandler+0x40>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f383 8811 	msr	BASEPRI, r3
}
 80047be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <vPortSetupTimerInterrupt+0x30>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047dc:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <vPortSetupTimerInterrupt+0x38>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a09      	ldr	r2, [pc, #36]	@ (8004808 <vPortSetupTimerInterrupt+0x3c>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a08      	ldr	r2, [pc, #32]	@ (800480c <vPortSetupTimerInterrupt+0x40>)
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ee:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <vPortSetupTimerInterrupt+0x30>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	e000e010 	.word	0xe000e010
 8004800:	e000e018 	.word	0xe000e018
 8004804:	20000000 	.word	0x20000000
 8004808:	10624dd3 	.word	0x10624dd3
 800480c:	e000e014 	.word	0xe000e014

08004810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004816:	f3ef 8305 	mrs	r3, IPSR
 800481a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b0f      	cmp	r3, #15
 8004820:	d915      	bls.n	800484e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004822:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <vPortValidateInterruptPriority+0x70>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800482c:	4b15      	ldr	r3, [pc, #84]	@ (8004884 <vPortValidateInterruptPriority+0x74>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	7afa      	ldrb	r2, [r7, #11]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20b      	bcs.n	800484e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	607b      	str	r3, [r7, #4]
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	e7fd      	b.n	800484a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800484e:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <vPortValidateInterruptPriority+0x78>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004856:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <vPortValidateInterruptPriority+0x7c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d90b      	bls.n	8004876 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	603b      	str	r3, [r7, #0]
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	e7fd      	b.n	8004872 <vPortValidateInterruptPriority+0x62>
	}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	e000e3f0 	.word	0xe000e3f0
 8004884:	20000ed8 	.word	0x20000ed8
 8004888:	e000ed0c 	.word	0xe000ed0c
 800488c:	20000edc 	.word	0x20000edc

08004890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	@ 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800489c:	f7fe fbc4 	bl	8003028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a14 <pvPortMalloc+0x184>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048a8:	f000 f924 	bl	8004af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004a18 <pvPortMalloc+0x188>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 8095 	bne.w	80049e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01e      	beq.n	80048fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80048c0:	2208      	movs	r2, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d015      	beq.n	80048fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	3308      	adds	r3, #8
 80048da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <pvPortMalloc+0x6e>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	617b      	str	r3, [r7, #20]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d06f      	beq.n	80049e4 <pvPortMalloc+0x154>
 8004904:	4b45      	ldr	r3, [pc, #276]	@ (8004a1c <pvPortMalloc+0x18c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d86a      	bhi.n	80049e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800490e:	4b44      	ldr	r3, [pc, #272]	@ (8004a20 <pvPortMalloc+0x190>)
 8004910:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004912:	4b43      	ldr	r3, [pc, #268]	@ (8004a20 <pvPortMalloc+0x190>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004918:	e004      	b.n	8004924 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d903      	bls.n	8004936 <pvPortMalloc+0xa6>
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f1      	bne.n	800491a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004936:	4b37      	ldr	r3, [pc, #220]	@ (8004a14 <pvPortMalloc+0x184>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	429a      	cmp	r2, r3
 800493e:	d051      	beq.n	80049e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2208      	movs	r2, #8
 8004946:	4413      	add	r3, r2
 8004948:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	2308      	movs	r3, #8
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	429a      	cmp	r2, r3
 8004960:	d920      	bls.n	80049a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4413      	add	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <pvPortMalloc+0xfc>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	613b      	str	r3, [r7, #16]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800499e:	69b8      	ldr	r0, [r7, #24]
 80049a0:	f000 f90a 	bl	8004bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049a4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <pvPortMalloc+0x18c>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	4a1b      	ldr	r2, [pc, #108]	@ (8004a1c <pvPortMalloc+0x18c>)
 80049b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049b2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a1c <pvPortMalloc+0x18c>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <pvPortMalloc+0x194>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d203      	bcs.n	80049c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049be:	4b17      	ldr	r3, [pc, #92]	@ (8004a1c <pvPortMalloc+0x18c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <pvPortMalloc+0x194>)
 80049c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	4b13      	ldr	r3, [pc, #76]	@ (8004a18 <pvPortMalloc+0x188>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80049da:	4b13      	ldr	r3, [pc, #76]	@ (8004a28 <pvPortMalloc+0x198>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	4a11      	ldr	r2, [pc, #68]	@ (8004a28 <pvPortMalloc+0x198>)
 80049e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049e4:	f7fe fb2e 	bl	8003044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <pvPortMalloc+0x17a>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60fb      	str	r3, [r7, #12]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <pvPortMalloc+0x176>
	return pvReturn;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	@ 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20001ae8 	.word	0x20001ae8
 8004a18:	20001afc 	.word	0x20001afc
 8004a1c:	20001aec 	.word	0x20001aec
 8004a20:	20001ae0 	.word	0x20001ae0
 8004a24:	20001af0 	.word	0x20001af0
 8004a28:	20001af4 	.word	0x20001af4

08004a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04f      	beq.n	8004ade <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a3e:	2308      	movs	r3, #8
 8004a40:	425b      	negs	r3, r3
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4413      	add	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4b25      	ldr	r3, [pc, #148]	@ (8004ae8 <vPortFree+0xbc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <vPortFree+0x46>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60fb      	str	r3, [r7, #12]
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <vPortFree+0x66>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60bb      	str	r3, [r7, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <vPortFree+0xbc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01e      	beq.n	8004ade <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11a      	bne.n	8004ade <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <vPortFree+0xbc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ab8:	f7fe fab6 	bl	8003028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <vPortFree+0xc0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4a09      	ldr	r2, [pc, #36]	@ (8004aec <vPortFree+0xc0>)
 8004ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aca:	6938      	ldr	r0, [r7, #16]
 8004acc:	f000 f874 	bl	8004bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ad0:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <vPortFree+0xc4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	4a06      	ldr	r2, [pc, #24]	@ (8004af0 <vPortFree+0xc4>)
 8004ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ada:	f7fe fab3 	bl	8003044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ade:	bf00      	nop
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20001afc 	.word	0x20001afc
 8004aec:	20001aec 	.word	0x20001aec
 8004af0:	20001af8 	.word	0x20001af8

08004af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004afa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b00:	4b27      	ldr	r3, [pc, #156]	@ (8004ba0 <prvHeapInit+0xac>)
 8004b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3307      	adds	r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba0 <prvHeapInit+0xac>)
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba4 <prvHeapInit+0xb0>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba4 <prvHeapInit+0xb0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b40:	2208      	movs	r2, #8
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a15      	ldr	r2, [pc, #84]	@ (8004ba8 <prvHeapInit+0xb4>)
 8004b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b56:	4b14      	ldr	r3, [pc, #80]	@ (8004ba8 <prvHeapInit+0xb4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b5e:	4b12      	ldr	r3, [pc, #72]	@ (8004ba8 <prvHeapInit+0xb4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <prvHeapInit+0xb4>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <prvHeapInit+0xb8>)
 8004b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a09      	ldr	r2, [pc, #36]	@ (8004bb0 <prvHeapInit+0xbc>)
 8004b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b8c:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <prvHeapInit+0xc0>)
 8004b8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000ee0 	.word	0x20000ee0
 8004ba4:	20001ae0 	.word	0x20001ae0
 8004ba8:	20001ae8 	.word	0x20001ae8
 8004bac:	20001af0 	.word	0x20001af0
 8004bb0:	20001aec 	.word	0x20001aec
 8004bb4:	20001afc 	.word	0x20001afc

08004bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bc0:	4b27      	ldr	r3, [pc, #156]	@ (8004c60 <prvInsertBlockIntoFreeList+0xa8>)
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e002      	b.n	8004bcc <prvInsertBlockIntoFreeList+0x14>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d8f7      	bhi.n	8004bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4413      	add	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d108      	bne.n	8004bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	441a      	add	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d118      	bne.n	8004c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b14      	ldr	r3, [pc, #80]	@ (8004c64 <prvInsertBlockIntoFreeList+0xac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d00d      	beq.n	8004c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	441a      	add	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e008      	b.n	8004c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <prvInsertBlockIntoFreeList+0xac>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e003      	b.n	8004c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d002      	beq.n	8004c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	20001ae0 	.word	0x20001ae0
 8004c64:	20001ae8 	.word	0x20001ae8

08004c68 <memset>:
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4402      	add	r2, r0
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <memset+0xa>
 8004c70:	4770      	bx	lr
 8004c72:	f803 1b01 	strb.w	r1, [r3], #1
 8004c76:	e7f9      	b.n	8004c6c <memset+0x4>

08004c78 <_reclaim_reent>:
 8004c78:	4b2d      	ldr	r3, [pc, #180]	@ (8004d30 <_reclaim_reent+0xb8>)
 8004c7a:	b570      	push	{r4, r5, r6, lr}
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4283      	cmp	r3, r0
 8004c82:	d053      	beq.n	8004d2c <_reclaim_reent+0xb4>
 8004c84:	69c3      	ldr	r3, [r0, #28]
 8004c86:	b31b      	cbz	r3, 8004cd0 <_reclaim_reent+0x58>
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	b163      	cbz	r3, 8004ca6 <_reclaim_reent+0x2e>
 8004c8c:	2500      	movs	r5, #0
 8004c8e:	69e3      	ldr	r3, [r4, #28]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	5959      	ldr	r1, [r3, r5]
 8004c94:	b9b1      	cbnz	r1, 8004cc4 <_reclaim_reent+0x4c>
 8004c96:	3504      	adds	r5, #4
 8004c98:	2d80      	cmp	r5, #128	@ 0x80
 8004c9a:	d1f8      	bne.n	8004c8e <_reclaim_reent+0x16>
 8004c9c:	69e3      	ldr	r3, [r4, #28]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	f000 f87b 	bl	8004d9c <_free_r>
 8004ca6:	69e3      	ldr	r3, [r4, #28]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	b111      	cbz	r1, 8004cb2 <_reclaim_reent+0x3a>
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 f875 	bl	8004d9c <_free_r>
 8004cb2:	69e3      	ldr	r3, [r4, #28]
 8004cb4:	689d      	ldr	r5, [r3, #8]
 8004cb6:	b15d      	cbz	r5, 8004cd0 <_reclaim_reent+0x58>
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4620      	mov	r0, r4
 8004cbc:	682d      	ldr	r5, [r5, #0]
 8004cbe:	f000 f86d 	bl	8004d9c <_free_r>
 8004cc2:	e7f8      	b.n	8004cb6 <_reclaim_reent+0x3e>
 8004cc4:	680e      	ldr	r6, [r1, #0]
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 f868 	bl	8004d9c <_free_r>
 8004ccc:	4631      	mov	r1, r6
 8004cce:	e7e1      	b.n	8004c94 <_reclaim_reent+0x1c>
 8004cd0:	6961      	ldr	r1, [r4, #20]
 8004cd2:	b111      	cbz	r1, 8004cda <_reclaim_reent+0x62>
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f000 f861 	bl	8004d9c <_free_r>
 8004cda:	69e1      	ldr	r1, [r4, #28]
 8004cdc:	b111      	cbz	r1, 8004ce4 <_reclaim_reent+0x6c>
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 f85c 	bl	8004d9c <_free_r>
 8004ce4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ce6:	b111      	cbz	r1, 8004cee <_reclaim_reent+0x76>
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 f857 	bl	8004d9c <_free_r>
 8004cee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cf0:	b111      	cbz	r1, 8004cf8 <_reclaim_reent+0x80>
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 f852 	bl	8004d9c <_free_r>
 8004cf8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004cfa:	b111      	cbz	r1, 8004d02 <_reclaim_reent+0x8a>
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f84d 	bl	8004d9c <_free_r>
 8004d02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004d04:	b111      	cbz	r1, 8004d0c <_reclaim_reent+0x94>
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 f848 	bl	8004d9c <_free_r>
 8004d0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004d0e:	b111      	cbz	r1, 8004d16 <_reclaim_reent+0x9e>
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 f843 	bl	8004d9c <_free_r>
 8004d16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004d18:	b111      	cbz	r1, 8004d20 <_reclaim_reent+0xa8>
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 f83e 	bl	8004d9c <_free_r>
 8004d20:	6a23      	ldr	r3, [r4, #32]
 8004d22:	b11b      	cbz	r3, 8004d2c <_reclaim_reent+0xb4>
 8004d24:	4620      	mov	r0, r4
 8004d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d2a:	4718      	bx	r3
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000010 	.word	0x20000010

08004d34 <__libc_init_array>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	2600      	movs	r6, #0
 8004d38:	4d0c      	ldr	r5, [pc, #48]	@ (8004d6c <__libc_init_array+0x38>)
 8004d3a:	4c0d      	ldr	r4, [pc, #52]	@ (8004d70 <__libc_init_array+0x3c>)
 8004d3c:	1b64      	subs	r4, r4, r5
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	42a6      	cmp	r6, r4
 8004d42:	d109      	bne.n	8004d58 <__libc_init_array+0x24>
 8004d44:	f000 f87e 	bl	8004e44 <_init>
 8004d48:	2600      	movs	r6, #0
 8004d4a:	4d0a      	ldr	r5, [pc, #40]	@ (8004d74 <__libc_init_array+0x40>)
 8004d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8004d78 <__libc_init_array+0x44>)
 8004d4e:	1b64      	subs	r4, r4, r5
 8004d50:	10a4      	asrs	r4, r4, #2
 8004d52:	42a6      	cmp	r6, r4
 8004d54:	d105      	bne.n	8004d62 <__libc_init_array+0x2e>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5c:	4798      	blx	r3
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7ee      	b.n	8004d40 <__libc_init_array+0xc>
 8004d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d66:	4798      	blx	r3
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7f2      	b.n	8004d52 <__libc_init_array+0x1e>
 8004d6c:	08004f00 	.word	0x08004f00
 8004d70:	08004f00 	.word	0x08004f00
 8004d74:	08004f00 	.word	0x08004f00
 8004d78:	08004f04 	.word	0x08004f04

08004d7c <__retarget_lock_acquire_recursive>:
 8004d7c:	4770      	bx	lr

08004d7e <__retarget_lock_release_recursive>:
 8004d7e:	4770      	bx	lr

08004d80 <memcpy>:
 8004d80:	440a      	add	r2, r1
 8004d82:	4291      	cmp	r1, r2
 8004d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d88:	d100      	bne.n	8004d8c <memcpy+0xc>
 8004d8a:	4770      	bx	lr
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d92:	4291      	cmp	r1, r2
 8004d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d98:	d1f9      	bne.n	8004d8e <memcpy+0xe>
 8004d9a:	bd10      	pop	{r4, pc}

08004d9c <_free_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4605      	mov	r5, r0
 8004da0:	2900      	cmp	r1, #0
 8004da2:	d040      	beq.n	8004e26 <_free_r+0x8a>
 8004da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da8:	1f0c      	subs	r4, r1, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfb8      	it	lt
 8004dae:	18e4      	addlt	r4, r4, r3
 8004db0:	f000 f83c 	bl	8004e2c <__malloc_lock>
 8004db4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e28 <_free_r+0x8c>)
 8004db6:	6813      	ldr	r3, [r2, #0]
 8004db8:	b933      	cbnz	r3, 8004dc8 <_free_r+0x2c>
 8004dba:	6063      	str	r3, [r4, #4]
 8004dbc:	6014      	str	r4, [r2, #0]
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dc4:	f000 b838 	b.w	8004e38 <__malloc_unlock>
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	d908      	bls.n	8004dde <_free_r+0x42>
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	1821      	adds	r1, r4, r0
 8004dd0:	428b      	cmp	r3, r1
 8004dd2:	bf01      	itttt	eq
 8004dd4:	6819      	ldreq	r1, [r3, #0]
 8004dd6:	685b      	ldreq	r3, [r3, #4]
 8004dd8:	1809      	addeq	r1, r1, r0
 8004dda:	6021      	streq	r1, [r4, #0]
 8004ddc:	e7ed      	b.n	8004dba <_free_r+0x1e>
 8004dde:	461a      	mov	r2, r3
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	b10b      	cbz	r3, 8004de8 <_free_r+0x4c>
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	d9fa      	bls.n	8004dde <_free_r+0x42>
 8004de8:	6811      	ldr	r1, [r2, #0]
 8004dea:	1850      	adds	r0, r2, r1
 8004dec:	42a0      	cmp	r0, r4
 8004dee:	d10b      	bne.n	8004e08 <_free_r+0x6c>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	4401      	add	r1, r0
 8004df4:	1850      	adds	r0, r2, r1
 8004df6:	4283      	cmp	r3, r0
 8004df8:	6011      	str	r1, [r2, #0]
 8004dfa:	d1e0      	bne.n	8004dbe <_free_r+0x22>
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4408      	add	r0, r1
 8004e02:	6010      	str	r0, [r2, #0]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	e7da      	b.n	8004dbe <_free_r+0x22>
 8004e08:	d902      	bls.n	8004e10 <_free_r+0x74>
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	e7d6      	b.n	8004dbe <_free_r+0x22>
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	1821      	adds	r1, r4, r0
 8004e14:	428b      	cmp	r3, r1
 8004e16:	bf01      	itttt	eq
 8004e18:	6819      	ldreq	r1, [r3, #0]
 8004e1a:	685b      	ldreq	r3, [r3, #4]
 8004e1c:	1809      	addeq	r1, r1, r0
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	6054      	str	r4, [r2, #4]
 8004e24:	e7cb      	b.n	8004dbe <_free_r+0x22>
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20001c3c 	.word	0x20001c3c

08004e2c <__malloc_lock>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	@ (8004e34 <__malloc_lock+0x8>)
 8004e2e:	f7ff bfa5 	b.w	8004d7c <__retarget_lock_acquire_recursive>
 8004e32:	bf00      	nop
 8004e34:	20001c38 	.word	0x20001c38

08004e38 <__malloc_unlock>:
 8004e38:	4801      	ldr	r0, [pc, #4]	@ (8004e40 <__malloc_unlock+0x8>)
 8004e3a:	f7ff bfa0 	b.w	8004d7e <__retarget_lock_release_recursive>
 8004e3e:	bf00      	nop
 8004e40:	20001c38 	.word	0x20001c38

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
