
STM32F103_FreeRTOS_CMSIS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000470c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800481c  0800481c  0000581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004890  08004890  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004890  08004890  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004890  08004890  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004890  08004890  00005890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004898  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  20000060  080048f8  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c3c  080048f8  00006c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167dd  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003135  00000000  00000000  0001c866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0001f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f30  00000000  00000000  00020d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2e  00000000  00000000  00021c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014963  00000000  00000000  0002497e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945b9  00000000  00000000  000392e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd89a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005508  00000000  00000000  000cd8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d2de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004804 	.word	0x08004804

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004804 	.word	0x08004804

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a0:	f000 fa7c 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a4:	f000 f818 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f882 	bl	80002b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ac:	f000 f856 	bl	800025c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001b0:	f001 fcfe 	bl	8001bb0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b4:	4a05      	ldr	r2, [pc, #20]	@ (80001cc <main+0x30>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4805      	ldr	r0, [pc, #20]	@ (80001d0 <main+0x34>)
 80001ba:	f001 fd41 	bl	8001c40 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a04      	ldr	r2, [pc, #16]	@ (80001d4 <main+0x38>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f001 fd16 	bl	8001bf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	bf00      	nop
 80001ca:	e7fd      	b.n	80001c8 <main+0x2c>
 80001cc:	08004840 	.word	0x08004840
 80001d0:	080003ad 	.word	0x080003ad
 80001d4:	200000c4 	.word	0x200000c4

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	@ 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	@ 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f004 fa1e 	bl	8004628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fa:	2302      	movs	r3, #2
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000202:	2310      	movs	r3, #16
 8000204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800020a:	2300      	movs	r3, #0
 800020c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800020e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fd29 	bl	8000c70 <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000224:	f000 f8e8 	bl	80003f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ff96 	bl	8001174 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800024e:	f000 f8d3 	bl	80003f8 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	@ 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000260:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000262:	4a12      	ldr	r2, [pc, #72]	@ (80002ac <MX_USART2_UART_Init+0x50>)
 8000264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000266:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000268:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800026c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000282:	220c      	movs	r2, #12
 8000284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000286:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000292:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <MX_USART2_UART_Init+0x4c>)
 8000294:	f001 fb6a 	bl	800196c <HAL_UART_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029e:	f000 f8ab 	bl	80003f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	40004400 	.word	0x40004400

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b2d      	ldr	r3, [pc, #180]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a2c      	ldr	r2, [pc, #176]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b2a      	ldr	r3, [pc, #168]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b27      	ldr	r3, [pc, #156]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a26      	ldr	r2, [pc, #152]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b24      	ldr	r3, [pc, #144]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b21      	ldr	r3, [pc, #132]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a20      	ldr	r2, [pc, #128]	@ (800037c <MX_GPIO_Init+0xcc>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b1e      	ldr	r3, [pc, #120]	@ (800037c <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b1b      	ldr	r3, [pc, #108]	@ (800037c <MX_GPIO_Init+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a1a      	ldr	r2, [pc, #104]	@ (800037c <MX_GPIO_Init+0xcc>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b18      	ldr	r3, [pc, #96]	@ (800037c <MX_GPIO_Init+0xcc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2120      	movs	r1, #32
 8000328:	4815      	ldr	r0, [pc, #84]	@ (8000380 <MX_GPIO_Init+0xd0>)
 800032a:	f000 fc4d 	bl	8000bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800032e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000334:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <MX_GPIO_Init+0xd4>)
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4619      	mov	r1, r3
 8000342:	4811      	ldr	r0, [pc, #68]	@ (8000388 <MX_GPIO_Init+0xd8>)
 8000344:	f000 fabc 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000348:	2320      	movs	r3, #32
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034c:	2301      	movs	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	2300      	movs	r3, #0
 8000352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000354:	2302      	movs	r3, #2
 8000356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000358:	f107 0310 	add.w	r3, r7, #16
 800035c:	4619      	mov	r1, r3
 800035e:	4808      	ldr	r0, [pc, #32]	@ (8000380 <MX_GPIO_Init+0xd0>)
 8000360:	f000 faae 	bl	80008c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2105      	movs	r1, #5
 8000368:	2028      	movs	r0, #40	@ 0x28
 800036a:	f000 fa7e 	bl	800086a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800036e:	2028      	movs	r0, #40	@ 0x28
 8000370:	f000 fa97 	bl	80008a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000374:	bf00      	nop
 8000376:	3720      	adds	r7, #32
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40021000 	.word	0x40021000
 8000380:	40010800 	.word	0x40010800
 8000384:	10110000 	.word	0x10110000
 8000388:	40011000 	.word	0x40011000

0800038c <TaskAction>:

/* USER CODE BEGIN 4 */
void TaskAction(char m) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(m);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff fed9 	bl	8000150 <ITM_SendChar>
	ITM_SendChar('\n');
 800039e:	200a      	movs	r0, #10
 80003a0:	f7ff fed6 	bl	8000150 <ITM_SendChar>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80003b4:	2120      	movs	r1, #32
 80003b6:	4806      	ldr	r0, [pc, #24]	@ (80003d0 <StartDefaultTask+0x24>)
 80003b8:	f000 fc1e 	bl	8000bf8 <HAL_GPIO_TogglePin>
	  TaskAction('1');
 80003bc:	2031      	movs	r0, #49	@ 0x31
 80003be:	f7ff ffe5 	bl	800038c <TaskAction>
	  osDelay(1000);
 80003c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003c6:	f001 fccd 	bl	8001d64 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80003ca:	bf00      	nop
 80003cc:	e7f2      	b.n	80003b4 <StartDefaultTask+0x8>
 80003ce:	bf00      	nop
 80003d0:	40010800 	.word	0x40010800

080003d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d101      	bne.n	80003ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80003e6:	f000 f96f 	bl	80006c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40012c00 	.word	0x40012c00

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <Error_Handler+0x8>

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <HAL_MspInit+0x68>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a17      	ldr	r2, [pc, #92]	@ (800046c <HAL_MspInit+0x68>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <HAL_MspInit+0x68>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b12      	ldr	r3, [pc, #72]	@ (800046c <HAL_MspInit+0x68>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a11      	ldr	r2, [pc, #68]	@ (800046c <HAL_MspInit+0x68>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <HAL_MspInit+0x68>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	210f      	movs	r1, #15
 800043e:	f06f 0001 	mvn.w	r0, #1
 8000442:	f000 fa12 	bl	800086a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000446:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <HAL_MspInit+0x6c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <HAL_MspInit+0x6c>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000

08000474 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a1b      	ldr	r2, [pc, #108]	@ (80004fc <HAL_UART_MspInit+0x88>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d12f      	bne.n	80004f4 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000494:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	4a19      	ldr	r2, [pc, #100]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 800049a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800049e:	61d3      	str	r3, [r2, #28]
 80004a0:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a13      	ldr	r2, [pc, #76]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <HAL_UART_MspInit+0x8c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004c4:	2304      	movs	r3, #4
 80004c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	2302      	movs	r3, #2
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004cc:	2303      	movs	r3, #3
 80004ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	480b      	ldr	r0, [pc, #44]	@ (8000504 <HAL_UART_MspInit+0x90>)
 80004d8:	f000 f9f2 	bl	80008c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004dc:	2308      	movs	r3, #8
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <HAL_UART_MspInit+0x90>)
 80004f0:	f000 f9e6 	bl	80008c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40004400 	.word	0x40004400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000510:	2300      	movs	r3, #0
 8000512:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000518:	2300      	movs	r3, #0
 800051a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800051e:	4b2e      	ldr	r3, [pc, #184]	@ (80005d8 <HAL_InitTick+0xd0>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a2d      	ldr	r2, [pc, #180]	@ (80005d8 <HAL_InitTick+0xd0>)
 8000524:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b2b      	ldr	r3, [pc, #172]	@ (80005d8 <HAL_InitTick+0xd0>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000536:	f107 020c 	add.w	r2, r7, #12
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4611      	mov	r1, r2
 8000540:	4618      	mov	r0, r3
 8000542:	f000 ff87 	bl	8001454 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000546:	f000 ff71 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 800054a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800054c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800054e:	4a23      	ldr	r2, [pc, #140]	@ (80005dc <HAL_InitTick+0xd4>)
 8000550:	fba2 2303 	umull	r2, r3, r2, r3
 8000554:	0c9b      	lsrs	r3, r3, #18
 8000556:	3b01      	subs	r3, #1
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800055a:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <HAL_InitTick+0xd8>)
 800055c:	4a21      	ldr	r2, [pc, #132]	@ (80005e4 <HAL_InitTick+0xdc>)
 800055e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <HAL_InitTick+0xd8>)
 8000562:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000566:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000568:	4a1d      	ldr	r2, [pc, #116]	@ (80005e0 <HAL_InitTick+0xd8>)
 800056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <HAL_InitTick+0xd8>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <HAL_InitTick+0xd8>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <HAL_InitTick+0xd8>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000580:	4817      	ldr	r0, [pc, #92]	@ (80005e0 <HAL_InitTick+0xd8>)
 8000582:	f000 ffb5 	bl	80014f0 <HAL_TIM_Base_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800058c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000590:	2b00      	cmp	r3, #0
 8000592:	d11b      	bne.n	80005cc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000594:	4812      	ldr	r0, [pc, #72]	@ (80005e0 <HAL_InitTick+0xd8>)
 8000596:	f001 f803 	bl	80015a0 <HAL_TIM_Base_Start_IT>
 800059a:	4603      	mov	r3, r0
 800059c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80005a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d111      	bne.n	80005cc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005a8:	2019      	movs	r0, #25
 80005aa:	f000 f97a 	bl	80008a2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d808      	bhi.n	80005c6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	2019      	movs	r0, #25
 80005ba:	f000 f956 	bl	800086a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <HAL_InitTick+0xe0>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	e002      	b.n	80005cc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80005cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3730      	adds	r7, #48	@ 0x30
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	431bde83 	.word	0x431bde83
 80005e0:	200000c8 	.word	0x200000c8
 80005e4:	40012c00 	.word	0x40012c00
 80005e8:	20000004 	.word	0x20000004

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <NMI_Handler+0x4>

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <MemManage_Handler+0x4>

08000604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <UsageFault_Handler+0x4>

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000624:	4802      	ldr	r0, [pc, #8]	@ (8000630 <TIM1_UP_IRQHandler+0x10>)
 8000626:	f001 f80d 	bl	8001644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000c8 	.word	0x200000c8

08000634 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000638:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800063c:	f000 faf6 	bl	8000c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000650:	f7ff fff8 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000656:	490c      	ldr	r1, [pc, #48]	@ (8000688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <LoopFillZerobss+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a09      	ldr	r2, [pc, #36]	@ (8000690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800066c:	4c09      	ldr	r4, [pc, #36]	@ (8000694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067a:	f004 f83b 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fd8d 	bl	800019c <main>
  bx lr
 8000682:	4770      	bx	lr
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800068c:	08004898 	.word	0x08004898
  ldr r2, =_sbss
 8000690:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000694:	20001c3c 	.word	0x20001c3c

08000698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_2_IRQHandler>
	...

0800069c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <HAL_Init+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <HAL_Init+0x28>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f8d1 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	200f      	movs	r0, #15
 80006b4:	f7ff ff28 	bl	8000508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff fea4 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <HAL_IncTick+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <HAL_IncTick+0x20>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000110 	.word	0x20000110

080006ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b02      	ldr	r3, [pc, #8]	@ (80006fc <HAL_GetTick+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000110 	.word	0x20000110

08000700 <__NVIC_SetPriorityGrouping>:
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	@ (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_EnableIRQ>:
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db0b      	blt.n	800078e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 021f 	and.w	r2, r3, #31
 800077c:	4906      	ldr	r1, [pc, #24]	@ (8000798 <__NVIC_EnableIRQ+0x34>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	095b      	lsrs	r3, r3, #5
 8000784:	2001      	movs	r0, #1
 8000786:	fa00 f202 	lsl.w	r2, r0, r2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_SetPriority>:
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	@ (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	@ (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	@ 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	@ 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff4f 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff64 	bl	8000748 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ffb2 	bl	80007f0 <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff81 	bl	800079c <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff57 	bl	8000764 <__NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b08b      	sub	sp, #44	@ 0x2c
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d2:	e169      	b.n	8000ba8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008d4:	2201      	movs	r2, #1
 80008d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f040 8158 	bne.w	8000ba2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4a9a      	ldr	r2, [pc, #616]	@ (8000b60 <HAL_GPIO_Init+0x2a0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d05e      	beq.n	80009ba <HAL_GPIO_Init+0xfa>
 80008fc:	4a98      	ldr	r2, [pc, #608]	@ (8000b60 <HAL_GPIO_Init+0x2a0>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d875      	bhi.n	80009ee <HAL_GPIO_Init+0x12e>
 8000902:	4a98      	ldr	r2, [pc, #608]	@ (8000b64 <HAL_GPIO_Init+0x2a4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d058      	beq.n	80009ba <HAL_GPIO_Init+0xfa>
 8000908:	4a96      	ldr	r2, [pc, #600]	@ (8000b64 <HAL_GPIO_Init+0x2a4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d86f      	bhi.n	80009ee <HAL_GPIO_Init+0x12e>
 800090e:	4a96      	ldr	r2, [pc, #600]	@ (8000b68 <HAL_GPIO_Init+0x2a8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d052      	beq.n	80009ba <HAL_GPIO_Init+0xfa>
 8000914:	4a94      	ldr	r2, [pc, #592]	@ (8000b68 <HAL_GPIO_Init+0x2a8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d869      	bhi.n	80009ee <HAL_GPIO_Init+0x12e>
 800091a:	4a94      	ldr	r2, [pc, #592]	@ (8000b6c <HAL_GPIO_Init+0x2ac>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d04c      	beq.n	80009ba <HAL_GPIO_Init+0xfa>
 8000920:	4a92      	ldr	r2, [pc, #584]	@ (8000b6c <HAL_GPIO_Init+0x2ac>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d863      	bhi.n	80009ee <HAL_GPIO_Init+0x12e>
 8000926:	4a92      	ldr	r2, [pc, #584]	@ (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d046      	beq.n	80009ba <HAL_GPIO_Init+0xfa>
 800092c:	4a90      	ldr	r2, [pc, #576]	@ (8000b70 <HAL_GPIO_Init+0x2b0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d85d      	bhi.n	80009ee <HAL_GPIO_Init+0x12e>
 8000932:	2b12      	cmp	r3, #18
 8000934:	d82a      	bhi.n	800098c <HAL_GPIO_Init+0xcc>
 8000936:	2b12      	cmp	r3, #18
 8000938:	d859      	bhi.n	80009ee <HAL_GPIO_Init+0x12e>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <HAL_GPIO_Init+0x80>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	080009bb 	.word	0x080009bb
 8000944:	08000995 	.word	0x08000995
 8000948:	080009a7 	.word	0x080009a7
 800094c:	080009e9 	.word	0x080009e9
 8000950:	080009ef 	.word	0x080009ef
 8000954:	080009ef 	.word	0x080009ef
 8000958:	080009ef 	.word	0x080009ef
 800095c:	080009ef 	.word	0x080009ef
 8000960:	080009ef 	.word	0x080009ef
 8000964:	080009ef 	.word	0x080009ef
 8000968:	080009ef 	.word	0x080009ef
 800096c:	080009ef 	.word	0x080009ef
 8000970:	080009ef 	.word	0x080009ef
 8000974:	080009ef 	.word	0x080009ef
 8000978:	080009ef 	.word	0x080009ef
 800097c:	080009ef 	.word	0x080009ef
 8000980:	080009ef 	.word	0x080009ef
 8000984:	0800099d 	.word	0x0800099d
 8000988:	080009b1 	.word	0x080009b1
 800098c:	4a79      	ldr	r2, [pc, #484]	@ (8000b74 <HAL_GPIO_Init+0x2b4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d013      	beq.n	80009ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000992:	e02c      	b.n	80009ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e029      	b.n	80009f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	3304      	adds	r3, #4
 80009a2:	623b      	str	r3, [r7, #32]
          break;
 80009a4:	e024      	b.n	80009f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	3308      	adds	r3, #8
 80009ac:	623b      	str	r3, [r7, #32]
          break;
 80009ae:	e01f      	b.n	80009f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	330c      	adds	r3, #12
 80009b6:	623b      	str	r3, [r7, #32]
          break;
 80009b8:	e01a      	b.n	80009f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009c2:	2304      	movs	r3, #4
 80009c4:	623b      	str	r3, [r7, #32]
          break;
 80009c6:	e013      	b.n	80009f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d105      	bne.n	80009dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009d0:	2308      	movs	r3, #8
 80009d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	69fa      	ldr	r2, [r7, #28]
 80009d8:	611a      	str	r2, [r3, #16]
          break;
 80009da:	e009      	b.n	80009f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009dc:	2308      	movs	r3, #8
 80009de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	615a      	str	r2, [r3, #20]
          break;
 80009e6:	e003      	b.n	80009f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e000      	b.n	80009f0 <HAL_GPIO_Init+0x130>
          break;
 80009ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	2bff      	cmp	r3, #255	@ 0xff
 80009f4:	d801      	bhi.n	80009fa <HAL_GPIO_Init+0x13a>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	e001      	b.n	80009fe <HAL_GPIO_Init+0x13e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3304      	adds	r3, #4
 80009fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	2bff      	cmp	r3, #255	@ 0xff
 8000a04:	d802      	bhi.n	8000a0c <HAL_GPIO_Init+0x14c>
 8000a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	e002      	b.n	8000a12 <HAL_GPIO_Init+0x152>
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	3b08      	subs	r3, #8
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	210f      	movs	r1, #15
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	401a      	ands	r2, r3
 8000a24:	6a39      	ldr	r1, [r7, #32]
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f000 80b1 	beq.w	8000ba2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a40:	4b4d      	ldr	r3, [pc, #308]	@ (8000b78 <HAL_GPIO_Init+0x2b8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a4c      	ldr	r2, [pc, #304]	@ (8000b78 <HAL_GPIO_Init+0x2b8>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b78 <HAL_GPIO_Init+0x2b8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a58:	4a48      	ldr	r2, [pc, #288]	@ (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3302      	adds	r3, #2
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	220f      	movs	r2, #15
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a40      	ldr	r2, [pc, #256]	@ (8000b80 <HAL_GPIO_Init+0x2c0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d013      	beq.n	8000aac <HAL_GPIO_Init+0x1ec>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a3f      	ldr	r2, [pc, #252]	@ (8000b84 <HAL_GPIO_Init+0x2c4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d00d      	beq.n	8000aa8 <HAL_GPIO_Init+0x1e8>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b88 <HAL_GPIO_Init+0x2c8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d007      	beq.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a3d      	ldr	r2, [pc, #244]	@ (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d101      	bne.n	8000aa0 <HAL_GPIO_Init+0x1e0>
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x1ee>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	e004      	b.n	8000aae <HAL_GPIO_Init+0x1ee>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x1ee>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <HAL_GPIO_Init+0x1ee>
 8000aac:	2300      	movs	r3, #0
 8000aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab0:	f002 0203 	and.w	r2, r2, #3
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000abe:	492f      	ldr	r1, [pc, #188]	@ (8000b7c <HAL_GPIO_Init+0x2bc>)
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	492c      	ldr	r1, [pc, #176]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	608b      	str	r3, [r1, #8]
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4928      	ldr	r1, [pc, #160]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d006      	beq.n	8000b0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b00:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	4922      	ldr	r1, [pc, #136]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	60cb      	str	r3, [r1, #12]
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	491e      	ldr	r1, [pc, #120]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4918      	ldr	r1, [pc, #96]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	604b      	str	r3, [r1, #4]
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	4914      	ldr	r1, [pc, #80]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d021      	beq.n	8000b94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	490e      	ldr	r1, [pc, #56]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	600b      	str	r3, [r1, #0]
 8000b5c:	e021      	b.n	8000ba2 <HAL_GPIO_Init+0x2e2>
 8000b5e:	bf00      	nop
 8000b60:	10320000 	.word	0x10320000
 8000b64:	10310000 	.word	0x10310000
 8000b68:	10220000 	.word	0x10220000
 8000b6c:	10210000 	.word	0x10210000
 8000b70:	10120000 	.word	0x10120000
 8000b74:	10110000 	.word	0x10110000
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	40011000 	.word	0x40011000
 8000b8c:	40011400 	.word	0x40011400
 8000b90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_GPIO_Init+0x304>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	4909      	ldr	r1, [pc, #36]	@ (8000bc4 <HAL_GPIO_Init+0x304>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bae:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f47f ae8e 	bne.w	80008d4 <HAL_GPIO_Init+0x14>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	372c      	adds	r7, #44	@ 0x2c
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000be4:	e003      	b.n	8000bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	041a      	lsls	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	611a      	str	r2, [r3, #16]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43d9      	mvns	r1, r3
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	400b      	ands	r3, r1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	611a      	str	r2, [r3, #16]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f806 	bl	8000c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e272      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8087 	beq.w	8000d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c90:	4b92      	ldr	r3, [pc, #584]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d00c      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	d112      	bne.n	8000cce <HAL_RCC_OscConfig+0x5e>
 8000ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb4:	d10b      	bne.n	8000cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb6:	4b89      	ldr	r3, [pc, #548]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d06c      	beq.n	8000d9c <HAL_RCC_OscConfig+0x12c>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d168      	bne.n	8000d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e24c      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd6:	d106      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x76>
 8000cd8:	4b80      	ldr	r3, [pc, #512]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e02e      	b.n	8000d44 <HAL_RCC_OscConfig+0xd4>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x98>
 8000cee:	4b7b      	ldr	r3, [pc, #492]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a7a      	ldr	r2, [pc, #488]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b78      	ldr	r3, [pc, #480]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a77      	ldr	r2, [pc, #476]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e01d      	b.n	8000d44 <HAL_RCC_OscConfig+0xd4>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0xbc>
 8000d12:	4b72      	ldr	r3, [pc, #456]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a71      	ldr	r2, [pc, #452]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a6e      	ldr	r2, [pc, #440]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0xd4>
 8000d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a6a      	ldr	r2, [pc, #424]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b68      	ldr	r3, [pc, #416]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a67      	ldr	r2, [pc, #412]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fcce 	bl	80006ec <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fcca 	bl	80006ec <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	@ 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e200      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4b5d      	ldr	r3, [pc, #372]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0xe4>
 8000d72:	e014      	b.n	8000d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fcba 	bl	80006ec <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fcb6 	bl	80006ec <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	@ 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e1ec      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	4b53      	ldr	r3, [pc, #332]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x10c>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d063      	beq.n	8000e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000daa:	4b4c      	ldr	r3, [pc, #304]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000db6:	4b49      	ldr	r3, [pc, #292]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d11c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x18c>
 8000dc2:	4b46      	ldr	r3, [pc, #280]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d116      	bne.n	8000dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	4b43      	ldr	r3, [pc, #268]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <HAL_RCC_OscConfig+0x176>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e1c0      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4939      	ldr	r1, [pc, #228]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfa:	e03a      	b.n	8000e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d020      	beq.n	8000e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e04:	4b36      	ldr	r3, [pc, #216]	@ (8000ee0 <HAL_RCC_OscConfig+0x270>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fc6f 	bl	80006ec <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e12:	f7ff fc6b 	bl	80006ec <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e1a1      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4927      	ldr	r1, [pc, #156]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <HAL_RCC_OscConfig+0x270>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fc4e 	bl	80006ec <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc4a 	bl	80006ec <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e180      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d03a      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d019      	beq.n	8000eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_RCC_OscConfig+0x274>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fc2e 	bl	80006ec <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff fc2a 	bl	80006ec <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e160      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 fafe 	bl	80014b4 <RCC_Delay>
 8000eb8:	e01c      	b.n	8000ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_RCC_OscConfig+0x274>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec0:	f7ff fc14 	bl	80006ec <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec6:	e00f      	b.n	8000ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fc10 	bl	80006ec <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d908      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e146      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	42420000 	.word	0x42420000
 8000ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1e9      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80a6 	beq.w	800104e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f06:	4b8b      	ldr	r3, [pc, #556]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b88      	ldr	r3, [pc, #544]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a87      	ldr	r2, [pc, #540]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b85      	ldr	r3, [pc, #532]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2e:	4b82      	ldr	r3, [pc, #520]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d118      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f46:	f7ff fbd1 	bl	80006ec <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4e:	f7ff fbcd 	bl	80006ec <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b64      	cmp	r3, #100	@ 0x64
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e103      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f60:	4b75      	ldr	r3, [pc, #468]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d106      	bne.n	8000f82 <HAL_RCC_OscConfig+0x312>
 8000f74:	4b6f      	ldr	r3, [pc, #444]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a6e      	ldr	r2, [pc, #440]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	e02d      	b.n	8000fde <HAL_RCC_OscConfig+0x36e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x334>
 8000f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a69      	ldr	r2, [pc, #420]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6213      	str	r3, [r2, #32]
 8000f96:	4b67      	ldr	r3, [pc, #412]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a66      	ldr	r2, [pc, #408]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	e01c      	b.n	8000fde <HAL_RCC_OscConfig+0x36e>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d10c      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x356>
 8000fac:	4b61      	ldr	r3, [pc, #388]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4a60      	ldr	r2, [pc, #384]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6213      	str	r3, [r2, #32]
 8000fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	e00b      	b.n	8000fde <HAL_RCC_OscConfig+0x36e>
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a5a      	ldr	r2, [pc, #360]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	4b58      	ldr	r3, [pc, #352]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a57      	ldr	r2, [pc, #348]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d015      	beq.n	8001012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fb81 	bl	80006ec <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fb7d 	bl	80006ec <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e0b1      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001004:	4b4b      	ldr	r3, [pc, #300]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0ee      	beq.n	8000fee <HAL_RCC_OscConfig+0x37e>
 8001010:	e014      	b.n	800103c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fb6b 	bl	80006ec <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101a:	f7ff fb67 	bl	80006ec <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e09b      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	4b40      	ldr	r3, [pc, #256]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1ee      	bne.n	800101a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d105      	bne.n	800104e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001042:	4b3c      	ldr	r3, [pc, #240]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a3b      	ldr	r2, [pc, #236]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 8087 	beq.w	8001166 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d061      	beq.n	8001128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d146      	bne.n	80010fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fb3b 	bl	80006ec <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107a:	f7ff fb37 	bl	80006ec <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e06d      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f0      	bne.n	800107a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a0:	d108      	bne.n	80010b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	4921      	ldr	r1, [pc, #132]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a19      	ldr	r1, [r3, #32]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c4:	430b      	orrs	r3, r1
 80010c6:	491b      	ldr	r1, [pc, #108]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fb0b 	bl	80006ec <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff fb07 	bl	80006ec <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e03d      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x46a>
 80010f8:	e035      	b.n	8001166 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff faf4 	bl	80006ec <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001108:	f7ff faf0 	bl	80006ec <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e026      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x498>
 8001126:	e01e      	b.n	8001166 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d107      	bne.n	8001140 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e019      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
 8001134:	40021000 	.word	0x40021000
 8001138:	40007000 	.word	0x40007000
 800113c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_RCC_OscConfig+0x500>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	429a      	cmp	r2, r3
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115e:	429a      	cmp	r2, r3
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0d0      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b6a      	ldr	r3, [pc, #424]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d910      	bls.n	80011b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b67      	ldr	r3, [pc, #412]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 0207 	bic.w	r2, r3, #7
 800119e:	4965      	ldr	r1, [pc, #404]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a6:	4b63      	ldr	r3, [pc, #396]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d001      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0b8      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d0:	4b59      	ldr	r3, [pc, #356]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a58      	ldr	r2, [pc, #352]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e8:	4b53      	ldr	r3, [pc, #332]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f4:	4b50      	ldr	r3, [pc, #320]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	494d      	ldr	r1, [pc, #308]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d040      	beq.n	8001294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b47      	ldr	r3, [pc, #284]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d115      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e07f      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001232:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e073      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	4b3d      	ldr	r3, [pc, #244]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06b      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4936      	ldr	r1, [pc, #216]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001264:	f7ff fa42 	bl	80006ec <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fa3e 	bl	80006ec <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e053      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d210      	bcs.n	80012c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 0207 	bic.w	r2, r3, #7
 80012aa:	4922      	ldr	r1, [pc, #136]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e032      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4916      	ldr	r1, [pc, #88]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	490e      	ldr	r1, [pc, #56]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001302:	f000 f821 	bl	8001348 <HAL_RCC_GetSysClockFreq>
 8001306:	4602      	mov	r2, r0
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	490a      	ldr	r1, [pc, #40]	@ (800133c <HAL_RCC_ClockConfig+0x1c8>)
 8001314:	5ccb      	ldrb	r3, [r1, r3]
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <HAL_RCC_ClockConfig+0x1cc>)
 800131c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_RCC_ClockConfig+0x1d0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8f0 	bl	8000508 <HAL_InitTick>

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000
 8001338:	40021000 	.word	0x40021000
 800133c:	08004864 	.word	0x08004864
 8001340:	20000000 	.word	0x20000000
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001362:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b04      	cmp	r3, #4
 8001370:	d002      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x30>
 8001372:	2b08      	cmp	r3, #8
 8001374:	d003      	beq.n	800137e <HAL_RCC_GetSysClockFreq+0x36>
 8001376:	e027      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800137a:	613b      	str	r3, [r7, #16]
      break;
 800137c:	e027      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0c9b      	lsrs	r3, r3, #18
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d010      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	0c5b      	lsrs	r3, r3, #17
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013aa:	fb03 f202 	mul.w	r2, r3, r2
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e004      	b.n	80013c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	613b      	str	r3, [r7, #16]
      break;
 80013c6:	e002      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ca:	613b      	str	r3, [r7, #16]
      break;
 80013cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ce:	693b      	ldr	r3, [r7, #16]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	007a1200 	.word	0x007a1200
 80013e4:	0800487c 	.word	0x0800487c
 80013e8:	0800488c 	.word	0x0800488c
 80013ec:	003d0900 	.word	0x003d0900

080013f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f4:	4b02      	ldr	r3, [pc, #8]	@ (8001400 <HAL_RCC_GetHCLKFreq+0x10>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001408:	f7ff fff2 	bl	80013f0 <HAL_RCC_GetHCLKFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	4903      	ldr	r1, [pc, #12]	@ (8001428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	08004874 	.word	0x08004874

0800142c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001430:	f7ff ffde 	bl	80013f0 <HAL_RCC_GetHCLKFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	0adb      	lsrs	r3, r3, #11
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	4903      	ldr	r1, [pc, #12]	@ (8001450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	08004874 	.word	0x08004874

08001454 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	220f      	movs	r2, #15
 8001462:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <HAL_RCC_GetClockConfig+0x58>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_RCC_GetClockConfig+0x58>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_RCC_GetClockConfig+0x58>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_RCC_GetClockConfig+0x58>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0207 	and.w	r2, r3, #7
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40022000 	.word	0x40022000

080014b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <RCC_Delay+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <RCC_Delay+0x38>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0a5b      	lsrs	r3, r3, #9
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d0:	bf00      	nop
  }
  while (Delay --);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	60fa      	str	r2, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <RCC_Delay+0x1c>
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000000 	.word	0x20000000
 80014ec:	10624dd3 	.word	0x10624dd3

080014f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e041      	b.n	8001586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f839 	bl	800158e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3304      	adds	r3, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f000 f99c 	bl	800186c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d001      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e03a      	b.n	800162e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <HAL_TIM_Base_Start_IT+0x98>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00e      	beq.n	80015f8 <HAL_TIM_Base_Start_IT+0x58>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e2:	d009      	beq.n	80015f8 <HAL_TIM_Base_Start_IT+0x58>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <HAL_TIM_Base_Start_IT+0x9c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d004      	beq.n	80015f8 <HAL_TIM_Base_Start_IT+0x58>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a13      	ldr	r2, [pc, #76]	@ (8001640 <HAL_TIM_Base_Start_IT+0xa0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d111      	bne.n	800161c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b06      	cmp	r3, #6
 8001608:	d010      	beq.n	800162c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800161a:	e007      	b.n	800162c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40000400 	.word	0x40000400
 8001640:	40000800 	.word	0x40000800

08001644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d020      	beq.n	80016a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01b      	beq.n	80016a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0202 	mvn.w	r2, #2
 8001678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f8d1 	bl	8001836 <HAL_TIM_IC_CaptureCallback>
 8001694:	e005      	b.n	80016a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f8c4 	bl	8001824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f8d3 	bl	8001848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d020      	beq.n	80016f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01b      	beq.n	80016f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0204 	mvn.w	r2, #4
 80016c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8ab 	bl	8001836 <HAL_TIM_IC_CaptureCallback>
 80016e0:	e005      	b.n	80016ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f89e 	bl	8001824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8ad 	bl	8001848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d020      	beq.n	8001740 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f06f 0208 	mvn.w	r2, #8
 8001710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2204      	movs	r2, #4
 8001716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f885 	bl	8001836 <HAL_TIM_IC_CaptureCallback>
 800172c:	e005      	b.n	800173a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f878 	bl	8001824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f887 	bl	8001848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d020      	beq.n	800178c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01b      	beq.n	800178c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0210 	mvn.w	r2, #16
 800175c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2208      	movs	r2, #8
 8001762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f85f 	bl	8001836 <HAL_TIM_IC_CaptureCallback>
 8001778:	e005      	b.n	8001786 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f852 	bl	8001824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f861 	bl	8001848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00c      	beq.n	80017b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f06f 0201 	mvn.w	r2, #1
 80017a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7fe fe12 	bl	80003d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00c      	beq.n	80017d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8c3 	bl	800195a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f831 	bl	800185a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00c      	beq.n	800181c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0220 	mvn.w	r2, #32
 8001814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f896 	bl	8001948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a2f      	ldr	r2, [pc, #188]	@ (800193c <TIM_Base_SetConfig+0xd0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00b      	beq.n	800189c <TIM_Base_SetConfig+0x30>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800188a:	d007      	beq.n	800189c <TIM_Base_SetConfig+0x30>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a2c      	ldr	r2, [pc, #176]	@ (8001940 <TIM_Base_SetConfig+0xd4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d003      	beq.n	800189c <TIM_Base_SetConfig+0x30>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <TIM_Base_SetConfig+0xd8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d108      	bne.n	80018ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a22      	ldr	r2, [pc, #136]	@ (800193c <TIM_Base_SetConfig+0xd0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00b      	beq.n	80018ce <TIM_Base_SetConfig+0x62>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018bc:	d007      	beq.n	80018ce <TIM_Base_SetConfig+0x62>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001940 <TIM_Base_SetConfig+0xd4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d003      	beq.n	80018ce <TIM_Base_SetConfig+0x62>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <TIM_Base_SetConfig+0xd8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d108      	bne.n	80018e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <TIM_Base_SetConfig+0xd0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d103      	bne.n	8001914 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f023 0201 	bic.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]
  }
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40000400 	.word	0x40000400
 8001944:	40000800 	.word	0x40000800

08001948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e042      	b.n	8001a04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7fe fd6e 	bl	8000474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2224      	movs	r2, #36	@ 0x24
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f82b 	bl	8001a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a46:	f023 030c 	bic.w	r3, r3, #12
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b20 <UART_SetConfig+0x114>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d103      	bne.n	8001a7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a74:	f7ff fcda 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	e002      	b.n	8001a82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a7c:	f7ff fcc2 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
 8001a80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009a      	lsls	r2, r3, #2
 8001a8c:	441a      	add	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a98:	4a22      	ldr	r2, [pc, #136]	@ (8001b24 <UART_SetConfig+0x118>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	0119      	lsls	r1, r3, #4
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009a      	lsls	r2, r3, #2
 8001aac:	441a      	add	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <UART_SetConfig+0x118>)
 8001aba:	fba3 0302 	umull	r0, r3, r3, r2
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2064      	movs	r0, #100	@ 0x64
 8001ac2:	fb00 f303 	mul.w	r3, r0, r3
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	3332      	adds	r3, #50	@ 0x32
 8001acc:	4a15      	ldr	r2, [pc, #84]	@ (8001b24 <UART_SetConfig+0x118>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ad8:	4419      	add	r1, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009a      	lsls	r2, r3, #2
 8001ae4:	441a      	add	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <UART_SetConfig+0x118>)
 8001af2:	fba3 0302 	umull	r0, r3, r3, r2
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2064      	movs	r0, #100	@ 0x64
 8001afa:	fb00 f303 	mul.w	r3, r0, r3
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	3332      	adds	r3, #50	@ 0x32
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <UART_SetConfig+0x118>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	f003 020f 	and.w	r2, r3, #15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	440a      	add	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40013800 	.word	0x40013800
 8001b24:	51eb851f 	.word	0x51eb851f

08001b28 <__NVIC_SetPriority>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	@ (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	@ (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <SysTick_Handler+0x1c>)
 8001b82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001b84:	f001 fd38 	bl	80035f8 <xTaskGetSchedulerState>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001b8e:	f002 fadb 	bl	8004148 <xPortSysTickHandler>
  }
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f06f 0004 	mvn.w	r0, #4
 8001ba6:	f7ff ffbf 	bl	8001b28 <__NVIC_SetPriority>
#endif
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bb6:	f3ef 8305 	mrs	r3, IPSR
 8001bba:	603b      	str	r3, [r7, #0]
  return(result);
 8001bbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001bc2:	f06f 0305 	mvn.w	r3, #5
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	e00c      	b.n	8001be4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <osKernelInitialize+0x40>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <osKernelInitialize+0x40>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	e002      	b.n	8001be4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000114 	.word	0x20000114

08001bf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bfa:	f3ef 8305 	mrs	r3, IPSR
 8001bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8001c00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001c06:	f06f 0305 	mvn.w	r3, #5
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	e010      	b.n	8001c30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <osKernelStart+0x48>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d109      	bne.n	8001c2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c16:	f7ff ffc1 	bl	8001b9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <osKernelStart+0x48>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c20:	f001 f88a 	bl	8002d38 <vTaskStartScheduler>
      stat = osOK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	e002      	b.n	8001c30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000114 	.word	0x20000114

08001c40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	@ 0x38
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c50:	f3ef 8305 	mrs	r3, IPSR
 8001c54:	617b      	str	r3, [r7, #20]
  return(result);
 8001c56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d17e      	bne.n	8001d5a <osThreadNew+0x11a>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d07b      	beq.n	8001d5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c66:	2318      	movs	r3, #24
 8001c68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d045      	beq.n	8001d06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <osThreadNew+0x48>
        name = attr->name;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <osThreadNew+0x6e>
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b38      	cmp	r3, #56	@ 0x38
 8001ca0:	d805      	bhi.n	8001cae <osThreadNew+0x6e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <osThreadNew+0x72>
        return (NULL);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e054      	b.n	8001d5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00e      	beq.n	8001ce8 <osThreadNew+0xa8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2ba7      	cmp	r3, #167	@ 0xa7
 8001cd0:	d90a      	bls.n	8001ce8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <osThreadNew+0xa8>
        mem = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	e010      	b.n	8001d0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <osThreadNew+0xca>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <osThreadNew+0xca>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <osThreadNew+0xca>
          mem = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	e001      	b.n	8001d0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d110      	bne.n	8001d32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d18:	9202      	str	r2, [sp, #8]
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6a3a      	ldr	r2, [r7, #32]
 8001d24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fe12 	bl	8002950 <xTaskCreateStatic>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e013      	b.n	8001d5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d110      	bne.n	8001d5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fe60 	bl	8002a10 <xTaskCreate>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <osThreadNew+0x11a>
            hTask = NULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d5a:	693b      	ldr	r3, [r7, #16]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d6c:	f3ef 8305 	mrs	r3, IPSR
 8001d70:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <osDelay+0x1c>
    stat = osErrorISR;
 8001d78:	f06f 0305 	mvn.w	r3, #5
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e007      	b.n	8001d90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 ff9e 	bl	8002ccc <vTaskDelay>
    }
  }

  return (stat);
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <vApplicationGetIdleTaskMemory+0x28>)
 8001dac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001db2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	601a      	str	r2, [r3, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000118 	.word	0x20000118
 8001dc8:	200001c0 	.word	0x200001c0

08001dcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ddc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <vApplicationGetTimerTaskMemory+0x30>)
 8001de2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200003c0 	.word	0x200003c0
 8001dfc:	20000468 	.word	0x20000468

08001e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f103 0208 	add.w	r2, r3, #8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f103 0208 	add.w	r2, r3, #8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f103 0208 	add.w	r2, r3, #8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d103      	bne.n	8001ebc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e00c      	b.n	8001ed6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e002      	b.n	8001eca <vListInsert+0x2e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d2f6      	bcs.n	8001ec4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6892      	ldr	r2, [r2, #8]
 8001f22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6852      	ldr	r2, [r2, #4]
 8001f2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d103      	bne.n	8001f40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
	...

08001f60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10b      	bne.n	8001f8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f8c:	f002 f85e 	bl	800404c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	441a      	add	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	441a      	add	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	22ff      	movs	r2, #255	@ 0xff
 8001fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	22ff      	movs	r2, #255	@ 0xff
 8001fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d114      	bne.n	800200c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01a      	beq.n	8002020 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3310      	adds	r3, #16
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 f93c 	bl	800326c <xTaskRemoveFromEventList>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <xQueueGenericReset+0xd0>)
 8001ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	e009      	b.n	8002020 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3310      	adds	r3, #16
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fef5 	bl	8001e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3324      	adds	r3, #36	@ 0x24
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fef0 	bl	8001e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002020:	f002 f844 	bl	80040ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000ed04 	.word	0xe000ed04

08002034 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08e      	sub	sp, #56	@ 0x38
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	e7fd      	b.n	800207a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <xQueueGenericCreateStatic+0x56>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <xQueueGenericCreateStatic+0x5a>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <xQueueGenericCreateStatic+0x5c>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	623b      	str	r3, [r7, #32]
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <xQueueGenericCreateStatic+0x84>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <xQueueGenericCreateStatic+0x88>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <xQueueGenericCreateStatic+0x8a>
 80020bc:	2300      	movs	r3, #0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80020c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	61fb      	str	r3, [r7, #28]
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	e7fd      	b.n	80020d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80020da:	2350      	movs	r3, #80	@ 0x50
 80020dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b50      	cmp	r3, #80	@ 0x50
 80020e2:	d00b      	beq.n	80020fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80020e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e8:	f383 8811 	msr	BASEPRI, r3
 80020ec:	f3bf 8f6f 	isb	sy
 80020f0:	f3bf 8f4f 	dsb	sy
 80020f4:	61bb      	str	r3, [r7, #24]
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80020fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002110:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f805 	bl	800212e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002126:	4618      	mov	r0, r3
 8002128:	3730      	adds	r7, #48	@ 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e002      	b.n	8002150 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800215c:	2101      	movs	r1, #1
 800215e:	69b8      	ldr	r0, [r7, #24]
 8002160:	f7ff fefe 	bl	8001f60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	@ 0x38
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800218a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <xQueueGenericSend+0x34>
	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <xQueueGenericSend+0x42>
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <xQueueGenericSend+0x46>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <xQueueGenericSend+0x48>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <xQueueGenericSend+0x64>
	__asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d103      	bne.n	80021e6 <xQueueGenericSend+0x72>
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <xQueueGenericSend+0x76>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <xQueueGenericSend+0x78>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <xQueueGenericSend+0x94>
	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	623b      	str	r3, [r7, #32]
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002208:	f001 f9f6 	bl	80035f8 <xTaskGetSchedulerState>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <xQueueGenericSend+0xa4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <xQueueGenericSend+0xa8>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <xQueueGenericSend+0xaa>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <xQueueGenericSend+0xc6>
	__asm volatile
 8002222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002226:	f383 8811 	msr	BASEPRI, r3
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	61fb      	str	r3, [r7, #28]
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	e7fd      	b.n	8002236 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800223a:	f001 ff07 	bl	800404c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002246:	429a      	cmp	r2, r3
 8002248:	d302      	bcc.n	8002250 <xQueueGenericSend+0xdc>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d129      	bne.n	80022a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002256:	f000 fa0f 	bl	8002678 <prvCopyDataToQueue>
 800225a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	3324      	adds	r3, #36	@ 0x24
 8002268:	4618      	mov	r0, r3
 800226a:	f000 ffff 	bl	800326c <xTaskRemoveFromEventList>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002274:	4b3f      	ldr	r3, [pc, #252]	@ (8002374 <xQueueGenericSend+0x200>)
 8002276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	f3bf 8f6f 	isb	sy
 8002284:	e00a      	b.n	800229c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800228c:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <xQueueGenericSend+0x200>)
 800228e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800229c:	f001 ff06 	bl	80040ac <vPortExitCritical>
				return pdPASS;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e063      	b.n	800236c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022aa:	f001 feff 	bl	80040ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e05c      	b.n	800236c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4618      	mov	r0, r3
 80022be:	f001 f839 	bl	8003334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022c6:	f001 fef1 	bl	80040ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022ca:	f000 fda5 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022ce:	f001 febd 	bl	800404c <vPortEnterCritical>
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022de:	d103      	bne.n	80022e8 <xQueueGenericSend+0x174>
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d103      	bne.n	80022fe <xQueueGenericSend+0x18a>
 80022f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022fe:	f001 fed5 	bl	80040ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002302:	1d3a      	adds	r2, r7, #4
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f828 	bl	8003360 <xTaskCheckForTimeOut>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d124      	bne.n	8002360 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002318:	f000 faa6 	bl	8002868 <prvIsQueueFull>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d018      	beq.n	8002354 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	3310      	adds	r3, #16
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 ff4c 	bl	80031c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002332:	f000 fa31 	bl	8002798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002336:	f000 fd7d 	bl	8002e34 <xTaskResumeAll>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f47f af7c 	bne.w	800223a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002342:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <xQueueGenericSend+0x200>)
 8002344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	e772      	b.n	800223a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002356:	f000 fa1f 	bl	8002798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800235a:	f000 fd6b 	bl	8002e34 <xTaskResumeAll>
 800235e:	e76c      	b.n	800223a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002362:	f000 fa19 	bl	8002798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002366:	f000 fd65 	bl	8002e34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800236a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800236c:	4618      	mov	r0, r3
 800236e:	3738      	adds	r7, #56	@ 0x38
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	@ 0x40
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <xQueueGenericSendFromISR+0x3e>
 80023ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <xQueueGenericSendFromISR+0x42>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <xQueueGenericSendFromISR+0x44>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d103      	bne.n	80023e6 <xQueueGenericSendFromISR+0x6e>
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <xQueueGenericSendFromISR+0x72>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueGenericSendFromISR+0x74>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	623b      	str	r3, [r7, #32]
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002408:	f001 fee2 	bl	80041d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800240c:	f3ef 8211 	mrs	r2, BASEPRI
 8002410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	61fa      	str	r2, [r7, #28]
 8002422:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002424:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800242c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	429a      	cmp	r2, r3
 8002432:	d302      	bcc.n	800243a <xQueueGenericSendFromISR+0xc2>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d12f      	bne.n	800249a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002440:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002450:	f000 f912 	bl	8002678 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002454:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d112      	bne.n	8002484 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002468:	3324      	adds	r3, #36	@ 0x24
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fefe 	bl	800326c <xTaskRemoveFromEventList>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00e      	beq.n	8002494 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e007      	b.n	8002494 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002488:	3301      	adds	r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	b25a      	sxtb	r2, r3
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002494:	2301      	movs	r3, #1
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002498:	e001      	b.n	800249e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800249a:	2300      	movs	r3, #0
 800249c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800249e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80024a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3740      	adds	r7, #64	@ 0x40
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <xQueueReceive+0x32>
	__asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	623b      	str	r3, [r7, #32]
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	e7fd      	b.n	80024e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <xQueueReceive+0x40>
 80024ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <xQueueReceive+0x44>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <xQueueReceive+0x46>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <xQueueReceive+0x62>
	__asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	61fb      	str	r3, [r7, #28]
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	e7fd      	b.n	8002512 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002516:	f001 f86f 	bl	80035f8 <xTaskGetSchedulerState>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <xQueueReceive+0x72>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <xQueueReceive+0x76>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <xQueueReceive+0x78>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <xQueueReceive+0x94>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	61bb      	str	r3, [r7, #24]
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002548:	f001 fd80 	bl	800404c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800254c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01f      	beq.n	8002598 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800255c:	f000 f8f6 	bl	800274c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00f      	beq.n	8002590 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	3310      	adds	r3, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fe79 	bl	800326c <xTaskRemoveFromEventList>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002580:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <xQueueReceive+0x1c0>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002590:	f001 fd8c 	bl	80040ac <vPortExitCritical>
				return pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	e069      	b.n	800266c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800259e:	f001 fd85 	bl	80040ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e062      	b.n	800266c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 febf 	bl	8003334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ba:	f001 fd77 	bl	80040ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025be:	f000 fc2b 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025c2:	f001 fd43 	bl	800404c <vPortEnterCritical>
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d103      	bne.n	80025dc <xQueueReceive+0x128>
 80025d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d103      	bne.n	80025f2 <xQueueReceive+0x13e>
 80025ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025f2:	f001 fd5b 	bl	80040ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 feae 	bl	8003360 <xTaskCheckForTimeOut>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d123      	bne.n	8002652 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800260a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800260c:	f000 f916 	bl	800283c <prvIsQueueEmpty>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d017      	beq.n	8002646 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	3324      	adds	r3, #36	@ 0x24
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fdd2 	bl	80031c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002626:	f000 f8b7 	bl	8002798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800262a:	f000 fc03 	bl	8002e34 <xTaskResumeAll>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d189      	bne.n	8002548 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <xQueueReceive+0x1c0>)
 8002636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	e780      	b.n	8002548 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002648:	f000 f8a6 	bl	8002798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800264c:	f000 fbf2 	bl	8002e34 <xTaskResumeAll>
 8002650:	e77a      	b.n	8002548 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002654:	f000 f8a0 	bl	8002798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002658:	f000 fbec 	bl	8002e34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800265c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800265e:	f000 f8ed 	bl	800283c <prvIsQueueEmpty>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	f43f af6f 	beq.w	8002548 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800266a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800266c:	4618      	mov	r0, r3
 800266e:	3730      	adds	r7, #48	@ 0x30
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d14d      	bne.n	800273a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 ffc6 	bl	8003634 <xTaskPriorityDisinherit>
 80026a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	e043      	b.n	800273a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6858      	ldr	r0, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	461a      	mov	r2, r3
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	f002 f83c 	bl	8004740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	441a      	add	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d32b      	bcc.n	800273a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	e026      	b.n	800273a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68d8      	ldr	r0, [r3, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	461a      	mov	r2, r3
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	f002 f822 	bl	8004740 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	425b      	negs	r3, r3
 8002706:	441a      	add	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	425b      	negs	r3, r3
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d105      	bne.n	800273a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3b01      	subs	r3, #1
 8002738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002742:	697b      	ldr	r3, [r7, #20]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d018      	beq.n	8002790 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	441a      	add	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d303      	bcc.n	8002780 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68d9      	ldr	r1, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	461a      	mov	r2, r3
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	f001 ffd8 	bl	8004740 <memcpy>
	}
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80027a0:	f001 fc54 	bl	800404c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ac:	e011      	b.n	80027d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3324      	adds	r3, #36	@ 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fd56 	bl	800326c <xTaskRemoveFromEventList>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027c6:	f000 fe2f 	bl	8003428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	dce9      	bgt.n	80027ae <prvUnlockQueue+0x16>
 80027da:	e000      	b.n	80027de <prvUnlockQueue+0x46>
					break;
 80027dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	22ff      	movs	r2, #255	@ 0xff
 80027e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027e6:	f001 fc61 	bl	80040ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027ea:	f001 fc2f 	bl	800404c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f6:	e011      	b.n	800281c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3310      	adds	r3, #16
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fd31 	bl	800326c <xTaskRemoveFromEventList>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002810:	f000 fe0a 	bl	8003428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002814:	7bbb      	ldrb	r3, [r7, #14]
 8002816:	3b01      	subs	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800281c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002820:	2b00      	cmp	r3, #0
 8002822:	dce9      	bgt.n	80027f8 <prvUnlockQueue+0x60>
 8002824:	e000      	b.n	8002828 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002826:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	22ff      	movs	r2, #255	@ 0xff
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002830:	f001 fc3c 	bl	80040ac <vPortExitCritical>
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002844:	f001 fc02 	bl	800404c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002850:	2301      	movs	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e001      	b.n	800285a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800285a:	f001 fc27 	bl	80040ac <vPortExitCritical>

	return xReturn;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002870:	f001 fbec 	bl	800404c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	429a      	cmp	r2, r3
 800287e:	d102      	bne.n	8002886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002880:	2301      	movs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e001      	b.n	800288a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800288a:	f001 fc0f 	bl	80040ac <vPortExitCritical>

	return xReturn;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e014      	b.n	80028d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028a8:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <vQueueAddToRegistry+0x4c>)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028b4:	490b      	ldr	r1, [pc, #44]	@ (80028e4 <vQueueAddToRegistry+0x4c>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028be:	4a09      	ldr	r2, [pc, #36]	@ (80028e4 <vQueueAddToRegistry+0x4c>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028ca:	e006      	b.n	80028da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	d9e7      	bls.n	80028a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000868 	.word	0x20000868

080028e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028f8:	f001 fba8 	bl	800404c <vPortEnterCritical>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002902:	b25b      	sxtb	r3, r3
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d103      	bne.n	8002912 <vQueueWaitForMessageRestricted+0x2a>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002918:	b25b      	sxtb	r3, r3
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d103      	bne.n	8002928 <vQueueWaitForMessageRestricted+0x40>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002928:	f001 fbc0 	bl	80040ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3324      	adds	r3, #36	@ 0x24
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fc69 	bl	8003214 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff28 	bl	8002798 <prvUnlockQueue>
	}
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08e      	sub	sp, #56	@ 0x38
 8002954:	af04      	add	r7, sp, #16
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800295e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	623b      	str	r3, [r7, #32]
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800297c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10b      	bne.n	800299a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	61fb      	str	r3, [r7, #28]
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	e7fd      	b.n	8002996 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800299a:	23a8      	movs	r3, #168	@ 0xa8
 800299c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80029a2:	d00b      	beq.n	80029bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	61bb      	str	r3, [r7, #24]
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01e      	beq.n	8002a02 <xTaskCreateStatic+0xb2>
 80029c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01b      	beq.n	8002a02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029dc:	2300      	movs	r3, #0
 80029de:	9303      	str	r3, [sp, #12]
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f851 	bl	8002a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029fc:	f000 f8f6 	bl	8002bec <prvAddNewTaskToReadyList>
 8002a00:	e001      	b.n	8002a06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a06:	697b      	ldr	r3, [r7, #20]
	}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3728      	adds	r7, #40	@ 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	@ 0x30
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fc13 	bl	8004250 <pvPortMalloc>
 8002a2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00e      	beq.n	8002a50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a32:	20a8      	movs	r0, #168	@ 0xa8
 8002a34:	f001 fc0c 	bl	8004250 <pvPortMalloc>
 8002a38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a46:	e005      	b.n	8002a54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	f001 fccf 	bl	80043ec <vPortFree>
 8002a4e:	e001      	b.n	8002a54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d017      	beq.n	8002a8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a62:	88fa      	ldrh	r2, [r7, #6]
 8002a64:	2300      	movs	r3, #0
 8002a66:	9303      	str	r3, [sp, #12]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	9302      	str	r3, [sp, #8]
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f80f 	bl	8002a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a7e:	69f8      	ldr	r0, [r7, #28]
 8002a80:	f000 f8b4 	bl	8002bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e002      	b.n	8002a90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a90:	69bb      	ldr	r3, [r7, #24]
	}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	21a5      	movs	r1, #165	@ 0xa5
 8002ab6:	f001 fdb7 	bl	8004628 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f023 0307 	bic.w	r3, r3, #7
 8002ad2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	617b      	str	r3, [r7, #20]
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	e7fd      	b.n	8002af2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01f      	beq.n	8002b3c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	e012      	b.n	8002b28 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4413      	add	r3, r2
 8002b08:	7819      	ldrb	r1, [r3, #0]
 8002b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3334      	adds	r3, #52	@ 0x34
 8002b12:	460a      	mov	r2, r1
 8002b14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	d9e9      	bls.n	8002b02 <prvInitialiseNewTask+0x66>
 8002b2e:	e000      	b.n	8002b32 <prvInitialiseNewTask+0x96>
			{
				break;
 8002b30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b3a:	e003      	b.n	8002b44 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2b37      	cmp	r3, #55	@ 0x37
 8002b48:	d901      	bls.n	8002b4e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b4a:	2337      	movs	r3, #55	@ 0x37
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	3304      	adds	r3, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f96a 	bl	8001e3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f965 	bl	8001e3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	3354      	adds	r3, #84	@ 0x54
 8002b9e:	224c      	movs	r2, #76	@ 0x4c
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 fd40 	bl	8004628 <memset>
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	4a0d      	ldr	r2, [pc, #52]	@ (8002be0 <prvInitialiseNewTask+0x144>)
 8002bac:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <prvInitialiseNewTask+0x148>)
 8002bb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8002be8 <prvInitialiseNewTask+0x14c>)
 8002bb8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	68f9      	ldr	r1, [r7, #12]
 8002bbe:	69b8      	ldr	r0, [r7, #24]
 8002bc0:	f001 f954 	bl	8003e6c <pxPortInitialiseStack>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bd6:	bf00      	nop
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20001afc 	.word	0x20001afc
 8002be4:	20001b64 	.word	0x20001b64
 8002be8:	20001bcc 	.word	0x20001bcc

08002bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bf4:	f001 fa2a 	bl	800404c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <prvAddNewTaskToReadyList+0xc4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8002cb0 <prvAddNewTaskToReadyList+0xc4>)
 8002c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c02:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <prvAddNewTaskToReadyList+0xc8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb4 <prvAddNewTaskToReadyList+0xc8>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c10:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <prvAddNewTaskToReadyList+0xc4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d110      	bne.n	8002c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c18:	f000 fc2a 	bl	8003470 <prvInitialiseTaskLists>
 8002c1c:	e00d      	b.n	8002c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c1e:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <prvAddNewTaskToReadyList+0xcc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c26:	4b23      	ldr	r3, [pc, #140]	@ (8002cb4 <prvAddNewTaskToReadyList+0xc8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d802      	bhi.n	8002c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c34:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb4 <prvAddNewTaskToReadyList+0xc8>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c3a:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <prvAddNewTaskToReadyList+0xd0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	4a1e      	ldr	r2, [pc, #120]	@ (8002cbc <prvAddNewTaskToReadyList+0xd0>)
 8002c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <prvAddNewTaskToReadyList+0xd0>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <prvAddNewTaskToReadyList+0xd4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d903      	bls.n	8002c60 <prvAddNewTaskToReadyList+0x74>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	4a18      	ldr	r2, [pc, #96]	@ (8002cc0 <prvAddNewTaskToReadyList+0xd4>)
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <prvAddNewTaskToReadyList+0xd8>)
 8002c6e:	441a      	add	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f7ff f8ed 	bl	8001e56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c7c:	f001 fa16 	bl	80040ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c80:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <prvAddNewTaskToReadyList+0xcc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <prvAddNewTaskToReadyList+0xc8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d207      	bcs.n	8002ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c96:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <prvAddNewTaskToReadyList+0xdc>)
 8002c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000d7c 	.word	0x20000d7c
 8002cb4:	200008a8 	.word	0x200008a8
 8002cb8:	20000d88 	.word	0x20000d88
 8002cbc:	20000d98 	.word	0x20000d98
 8002cc0:	20000d84 	.word	0x20000d84
 8002cc4:	200008ac 	.word	0x200008ac
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cde:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <vTaskDelay+0x64>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <vTaskDelay+0x32>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	60bb      	str	r3, [r7, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	e7fd      	b.n	8002cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cfe:	f000 f88b 	bl	8002e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d02:	2100      	movs	r1, #0
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fd05 	bl	8003714 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d0a:	f000 f893 	bl	8002e34 <xTaskResumeAll>
 8002d0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002d16:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <vTaskDelay+0x68>)
 8002d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000da4 	.word	0x20000da4
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d46:	463a      	mov	r2, r7
 8002d48:	1d39      	adds	r1, r7, #4
 8002d4a:	f107 0308 	add.w	r3, r7, #8
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f824 	bl	8001d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	9202      	str	r2, [sp, #8]
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2300      	movs	r3, #0
 8002d64:	460a      	mov	r2, r1
 8002d66:	4924      	ldr	r1, [pc, #144]	@ (8002df8 <vTaskStartScheduler+0xc0>)
 8002d68:	4824      	ldr	r0, [pc, #144]	@ (8002dfc <vTaskStartScheduler+0xc4>)
 8002d6a:	f7ff fdf1 	bl	8002950 <xTaskCreateStatic>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4a23      	ldr	r2, [pc, #140]	@ (8002e00 <vTaskStartScheduler+0xc8>)
 8002d72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d74:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <vTaskStartScheduler+0xc8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e001      	b.n	8002d86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d8c:	f000 fd16 	bl	80037bc <xTimerCreateTimerTask>
 8002d90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d11b      	bne.n	8002dd0 <vTaskStartScheduler+0x98>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	613b      	str	r3, [r7, #16]
}
 8002daa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002dac:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <vTaskStartScheduler+0xcc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3354      	adds	r3, #84	@ 0x54
 8002db2:	4a15      	ldr	r2, [pc, #84]	@ (8002e08 <vTaskStartScheduler+0xd0>)
 8002db4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <vTaskStartScheduler+0xd4>)
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dbe:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <vTaskStartScheduler+0xd8>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <vTaskStartScheduler+0xdc>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dca:	f001 f8cd 	bl	8003f68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dce:	e00f      	b.n	8002df0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d10b      	bne.n	8002df0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	60fb      	str	r3, [r7, #12]
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <vTaskStartScheduler+0xb4>
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	08004828 	.word	0x08004828
 8002dfc:	08003441 	.word	0x08003441
 8002e00:	20000da0 	.word	0x20000da0
 8002e04:	200008a8 	.word	0x200008a8
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	20000d9c 	.word	0x20000d9c
 8002e10:	20000d88 	.word	0x20000d88
 8002e14:	20000d80 	.word	0x20000d80

08002e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <vTaskSuspendAll+0x18>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a03      	ldr	r2, [pc, #12]	@ (8002e30 <vTaskSuspendAll+0x18>)
 8002e24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000da4 	.word	0x20000da4

08002e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e42:	4b42      	ldr	r3, [pc, #264]	@ (8002f4c <xTaskResumeAll+0x118>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <xTaskResumeAll+0x2e>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	603b      	str	r3, [r7, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	e7fd      	b.n	8002e5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e62:	f001 f8f3 	bl	800404c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e66:	4b39      	ldr	r3, [pc, #228]	@ (8002f4c <xTaskResumeAll+0x118>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	4a37      	ldr	r2, [pc, #220]	@ (8002f4c <xTaskResumeAll+0x118>)
 8002e6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <xTaskResumeAll+0x118>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d162      	bne.n	8002f3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e78:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <xTaskResumeAll+0x11c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d05e      	beq.n	8002f3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e80:	e02f      	b.n	8002ee2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e82:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <xTaskResumeAll+0x120>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f83c 	bl	8001f0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff f837 	bl	8001f0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f58 <xTaskResumeAll+0x124>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d903      	bls.n	8002eb2 <xTaskResumeAll+0x7e>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	4a2a      	ldr	r2, [pc, #168]	@ (8002f58 <xTaskResumeAll+0x124>)
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4a27      	ldr	r2, [pc, #156]	@ (8002f5c <xTaskResumeAll+0x128>)
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f7fe ffc4 	bl	8001e56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed2:	4b23      	ldr	r3, [pc, #140]	@ (8002f60 <xTaskResumeAll+0x12c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d302      	bcc.n	8002ee2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <xTaskResumeAll+0x130>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <xTaskResumeAll+0x120>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1cb      	bne.n	8002e82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ef0:	f000 fb62 	bl	80035b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <xTaskResumeAll+0x134>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f00:	f000 f844 	bl	8002f8c <xTaskIncrementTick>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002f0a:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <xTaskResumeAll+0x130>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f1      	bne.n	8002f00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <xTaskResumeAll+0x134>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <xTaskResumeAll+0x130>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <xTaskResumeAll+0x138>)
 8002f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f3e:	f001 f8b5 	bl	80040ac <vPortExitCritical>

	return xAlreadyYielded;
 8002f42:	68bb      	ldr	r3, [r7, #8]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000da4 	.word	0x20000da4
 8002f50:	20000d7c 	.word	0x20000d7c
 8002f54:	20000d3c 	.word	0x20000d3c
 8002f58:	20000d84 	.word	0x20000d84
 8002f5c:	200008ac 	.word	0x200008ac
 8002f60:	200008a8 	.word	0x200008a8
 8002f64:	20000d90 	.word	0x20000d90
 8002f68:	20000d8c 	.word	0x20000d8c
 8002f6c:	e000ed04 	.word	0xe000ed04

08002f70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f76:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <xTaskGetTickCount+0x18>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f7c:	687b      	ldr	r3, [r7, #4]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	20000d80 	.word	0x20000d80

08002f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f96:	4b4f      	ldr	r3, [pc, #316]	@ (80030d4 <xTaskIncrementTick+0x148>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8090 	bne.w	80030c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80030d8 <xTaskIncrementTick+0x14c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80030d8 <xTaskIncrementTick+0x14c>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d121      	bne.n	8002ff8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fb4:	4b49      	ldr	r3, [pc, #292]	@ (80030dc <xTaskIncrementTick+0x150>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	603b      	str	r3, [r7, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <xTaskIncrementTick+0x46>
 8002fd6:	4b41      	ldr	r3, [pc, #260]	@ (80030dc <xTaskIncrementTick+0x150>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	4b40      	ldr	r3, [pc, #256]	@ (80030e0 <xTaskIncrementTick+0x154>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80030dc <xTaskIncrementTick+0x150>)
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80030e0 <xTaskIncrementTick+0x154>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b3e      	ldr	r3, [pc, #248]	@ (80030e4 <xTaskIncrementTick+0x158>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80030e4 <xTaskIncrementTick+0x158>)
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	f000 fae0 	bl	80035b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <xTaskIncrementTick+0x15c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d349      	bcc.n	8003096 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003002:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <xTaskIncrementTick+0x150>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800300c:	4b36      	ldr	r3, [pc, #216]	@ (80030e8 <xTaskIncrementTick+0x15c>)
 800300e:	f04f 32ff 	mov.w	r2, #4294967295
 8003012:	601a      	str	r2, [r3, #0]
					break;
 8003014:	e03f      	b.n	8003096 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003016:	4b31      	ldr	r3, [pc, #196]	@ (80030dc <xTaskIncrementTick+0x150>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	429a      	cmp	r2, r3
 800302c:	d203      	bcs.n	8003036 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800302e:	4a2e      	ldr	r2, [pc, #184]	@ (80030e8 <xTaskIncrementTick+0x15c>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003034:	e02f      	b.n	8003096 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3304      	adds	r3, #4
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe ff66 	bl	8001f0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	3318      	adds	r3, #24
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe ff5d 	bl	8001f0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <xTaskIncrementTick+0x160>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d903      	bls.n	8003066 <xTaskIncrementTick+0xda>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <xTaskIncrementTick+0x160>)
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <xTaskIncrementTick+0x164>)
 8003074:	441a      	add	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3304      	adds	r3, #4
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f7fe feea 	bl	8001e56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003086:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <xTaskIncrementTick+0x168>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	429a      	cmp	r2, r3
 800308e:	d3b8      	bcc.n	8003002 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003090:	2301      	movs	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003094:	e7b5      	b.n	8003002 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003096:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <xTaskIncrementTick+0x168>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309c:	4914      	ldr	r1, [pc, #80]	@ (80030f0 <xTaskIncrementTick+0x164>)
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d901      	bls.n	80030b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80030ae:	2301      	movs	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80030b2:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <xTaskIncrementTick+0x16c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e004      	b.n	80030ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80030c0:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <xTaskIncrementTick+0x170>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	4a0d      	ldr	r2, [pc, #52]	@ (80030fc <xTaskIncrementTick+0x170>)
 80030c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80030ca:	697b      	ldr	r3, [r7, #20]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000da4 	.word	0x20000da4
 80030d8:	20000d80 	.word	0x20000d80
 80030dc:	20000d34 	.word	0x20000d34
 80030e0:	20000d38 	.word	0x20000d38
 80030e4:	20000d94 	.word	0x20000d94
 80030e8:	20000d9c 	.word	0x20000d9c
 80030ec:	20000d84 	.word	0x20000d84
 80030f0:	200008ac 	.word	0x200008ac
 80030f4:	200008a8 	.word	0x200008a8
 80030f8:	20000d90 	.word	0x20000d90
 80030fc:	20000d8c 	.word	0x20000d8c

08003100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003106:	4b2a      	ldr	r3, [pc, #168]	@ (80031b0 <vTaskSwitchContext+0xb0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800310e:	4b29      	ldr	r3, [pc, #164]	@ (80031b4 <vTaskSwitchContext+0xb4>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003114:	e047      	b.n	80031a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003116:	4b27      	ldr	r3, [pc, #156]	@ (80031b4 <vTaskSwitchContext+0xb4>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800311c:	4b26      	ldr	r3, [pc, #152]	@ (80031b8 <vTaskSwitchContext+0xb8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e011      	b.n	8003148 <vTaskSwitchContext+0x48>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <vTaskSwitchContext+0x42>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	607b      	str	r3, [r7, #4]
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <vTaskSwitchContext+0x3e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3b01      	subs	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	491c      	ldr	r1, [pc, #112]	@ (80031bc <vTaskSwitchContext+0xbc>)
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0e3      	beq.n	8003124 <vTaskSwitchContext+0x24>
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4a15      	ldr	r2, [pc, #84]	@ (80031bc <vTaskSwitchContext+0xbc>)
 8003168:	4413      	add	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3308      	adds	r3, #8
 800317e:	429a      	cmp	r2, r3
 8003180:	d104      	bne.n	800318c <vTaskSwitchContext+0x8c>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4a0b      	ldr	r2, [pc, #44]	@ (80031c0 <vTaskSwitchContext+0xc0>)
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <vTaskSwitchContext+0xb8>)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <vTaskSwitchContext+0xc0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3354      	adds	r3, #84	@ 0x54
 80031a2:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <vTaskSwitchContext+0xc4>)
 80031a4:	6013      	str	r3, [r2, #0]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000da4 	.word	0x20000da4
 80031b4:	20000d90 	.word	0x20000d90
 80031b8:	20000d84 	.word	0x20000d84
 80031bc:	200008ac 	.word	0x200008ac
 80031c0:	200008a8 	.word	0x200008a8
 80031c4:	20000010 	.word	0x20000010

080031c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10b      	bne.n	80031f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	60fb      	str	r3, [r7, #12]
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <vTaskPlaceOnEventList+0x48>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3318      	adds	r3, #24
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fe fe4f 	bl	8001e9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031fe:	2101      	movs	r1, #1
 8003200:	6838      	ldr	r0, [r7, #0]
 8003202:	f000 fa87 	bl	8003714 <prvAddCurrentTaskToDelayedList>
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200008a8 	.word	0x200008a8

08003214 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	617b      	str	r3, [r7, #20]
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <vTaskPlaceOnEventListRestricted+0x54>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3318      	adds	r3, #24
 8003244:	4619      	mov	r1, r3
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7fe fe05 	bl	8001e56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	68b8      	ldr	r0, [r7, #8]
 800325c:	f000 fa5a 	bl	8003714 <prvAddCurrentTaskToDelayedList>
	}
 8003260:	bf00      	nop
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200008a8 	.word	0x200008a8

0800326c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10b      	bne.n	800329a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	60fb      	str	r3, [r7, #12]
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	e7fd      	b.n	8003296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	3318      	adds	r3, #24
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fe34 	bl	8001f0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032a4:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <xTaskRemoveFromEventList+0xb0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11d      	bne.n	80032e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fe2b 	bl	8001f0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ba:	4b19      	ldr	r3, [pc, #100]	@ (8003320 <xTaskRemoveFromEventList+0xb4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d903      	bls.n	80032ca <xTaskRemoveFromEventList+0x5e>
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <xTaskRemoveFromEventList+0xb4>)
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <xTaskRemoveFromEventList+0xb8>)
 80032d8:	441a      	add	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f7fe fdb8 	bl	8001e56 <vListInsertEnd>
 80032e6:	e005      	b.n	80032f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	3318      	adds	r3, #24
 80032ec:	4619      	mov	r1, r3
 80032ee:	480e      	ldr	r0, [pc, #56]	@ (8003328 <xTaskRemoveFromEventList+0xbc>)
 80032f0:	f7fe fdb1 	bl	8001e56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <xTaskRemoveFromEventList+0xc0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	429a      	cmp	r2, r3
 8003300:	d905      	bls.n	800330e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003302:	2301      	movs	r3, #1
 8003304:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003306:	4b0a      	ldr	r3, [pc, #40]	@ (8003330 <xTaskRemoveFromEventList+0xc4>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e001      	b.n	8003312 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003312:	697b      	ldr	r3, [r7, #20]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000da4 	.word	0x20000da4
 8003320:	20000d84 	.word	0x20000d84
 8003324:	200008ac 	.word	0x200008ac
 8003328:	20000d3c 	.word	0x20000d3c
 800332c:	200008a8 	.word	0x200008a8
 8003330:	20000d90 	.word	0x20000d90

08003334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800333c:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <vTaskInternalSetTimeOutState+0x24>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <vTaskInternalSetTimeOutState+0x28>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	605a      	str	r2, [r3, #4]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000d94 	.word	0x20000d94
 800335c:	20000d80 	.word	0x20000d80

08003360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	613b      	str	r3, [r7, #16]
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	60fb      	str	r3, [r7, #12]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80033a6:	f000 fe51 	bl	800404c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <xTaskCheckForTimeOut+0xc0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c2:	d102      	bne.n	80033ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	e023      	b.n	8003412 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <xTaskCheckForTimeOut+0xc4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d007      	beq.n	80033e6 <xTaskCheckForTimeOut+0x86>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d302      	bcc.n	80033e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	e015      	b.n	8003412 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d20b      	bcs.n	8003408 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad2      	subs	r2, r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff99 	bl	8003334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e004      	b.n	8003412 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003412:	f000 fe4b 	bl	80040ac <vPortExitCritical>

	return xReturn;
 8003416:	69fb      	ldr	r3, [r7, #28]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000d80 	.word	0x20000d80
 8003424:	20000d94 	.word	0x20000d94

08003428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <vTaskMissedYield+0x14>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000d90 	.word	0x20000d90

08003440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003448:	f000 f852 	bl	80034f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <prvIdleTask+0x28>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d9f9      	bls.n	8003448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003454:	4b05      	ldr	r3, [pc, #20]	@ (800346c <prvIdleTask+0x2c>)
 8003456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003464:	e7f0      	b.n	8003448 <prvIdleTask+0x8>
 8003466:	bf00      	nop
 8003468:	200008ac 	.word	0x200008ac
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	e00c      	b.n	8003496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <prvInitialiseTaskLists+0x60>)
 8003488:	4413      	add	r3, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fcb8 	bl	8001e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3301      	adds	r3, #1
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b37      	cmp	r3, #55	@ 0x37
 800349a:	d9ef      	bls.n	800347c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800349c:	480d      	ldr	r0, [pc, #52]	@ (80034d4 <prvInitialiseTaskLists+0x64>)
 800349e:	f7fe fcaf 	bl	8001e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034a2:	480d      	ldr	r0, [pc, #52]	@ (80034d8 <prvInitialiseTaskLists+0x68>)
 80034a4:	f7fe fcac 	bl	8001e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034a8:	480c      	ldr	r0, [pc, #48]	@ (80034dc <prvInitialiseTaskLists+0x6c>)
 80034aa:	f7fe fca9 	bl	8001e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034ae:	480c      	ldr	r0, [pc, #48]	@ (80034e0 <prvInitialiseTaskLists+0x70>)
 80034b0:	f7fe fca6 	bl	8001e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034b4:	480b      	ldr	r0, [pc, #44]	@ (80034e4 <prvInitialiseTaskLists+0x74>)
 80034b6:	f7fe fca3 	bl	8001e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034ba:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <prvInitialiseTaskLists+0x78>)
 80034bc:	4a05      	ldr	r2, [pc, #20]	@ (80034d4 <prvInitialiseTaskLists+0x64>)
 80034be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <prvInitialiseTaskLists+0x7c>)
 80034c2:	4a05      	ldr	r2, [pc, #20]	@ (80034d8 <prvInitialiseTaskLists+0x68>)
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200008ac 	.word	0x200008ac
 80034d4:	20000d0c 	.word	0x20000d0c
 80034d8:	20000d20 	.word	0x20000d20
 80034dc:	20000d3c 	.word	0x20000d3c
 80034e0:	20000d50 	.word	0x20000d50
 80034e4:	20000d68 	.word	0x20000d68
 80034e8:	20000d34 	.word	0x20000d34
 80034ec:	20000d38 	.word	0x20000d38

080034f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034f6:	e019      	b.n	800352c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034f8:	f000 fda8 	bl	800404c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034fc:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <prvCheckTasksWaitingTermination+0x50>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fcff 	bl	8001f0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <prvCheckTasksWaitingTermination+0x54>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3b01      	subs	r3, #1
 8003514:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <prvCheckTasksWaitingTermination+0x54>)
 8003516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <prvCheckTasksWaitingTermination+0x58>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3b01      	subs	r3, #1
 800351e:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <prvCheckTasksWaitingTermination+0x58>)
 8003520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003522:	f000 fdc3 	bl	80040ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f810 	bl	800354c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <prvCheckTasksWaitingTermination+0x58>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e1      	bne.n	80034f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000d50 	.word	0x20000d50
 8003544:	20000d7c 	.word	0x20000d7c
 8003548:	20000d64 	.word	0x20000d64

0800354c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3354      	adds	r3, #84	@ 0x54
 8003558:	4618      	mov	r0, r3
 800355a:	f001 f86d 	bl	8004638 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003564:	2b00      	cmp	r3, #0
 8003566:	d108      	bne.n	800357a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	4618      	mov	r0, r3
 800356e:	f000 ff3d 	bl	80043ec <vPortFree>
				vPortFree( pxTCB );
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 ff3a 	bl	80043ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003578:	e019      	b.n	80035ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003580:	2b01      	cmp	r3, #1
 8003582:	d103      	bne.n	800358c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 ff31 	bl	80043ec <vPortFree>
	}
 800358a:	e010      	b.n	80035ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003592:	2b02      	cmp	r3, #2
 8003594:	d00b      	beq.n	80035ae <prvDeleteTCB+0x62>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60fb      	str	r3, [r7, #12]
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <prvDeleteTCB+0x5e>
	}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035be:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <prvResetNextTaskUnblockTime+0x38>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035c8:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <prvResetNextTaskUnblockTime+0x3c>)
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295
 80035ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035d0:	e008      	b.n	80035e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d2:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <prvResetNextTaskUnblockTime+0x38>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a04      	ldr	r2, [pc, #16]	@ (80035f4 <prvResetNextTaskUnblockTime+0x3c>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000d34 	.word	0x20000d34
 80035f4:	20000d9c 	.word	0x20000d9c

080035f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035fe:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <xTaskGetSchedulerState+0x34>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003606:	2301      	movs	r3, #1
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	e008      	b.n	800361e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <xTaskGetSchedulerState+0x38>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003614:	2302      	movs	r3, #2
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	e001      	b.n	800361e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800361e:	687b      	ldr	r3, [r7, #4]
	}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000d88 	.word	0x20000d88
 8003630:	20000da4 	.word	0x20000da4

08003634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d058      	beq.n	80036fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800364a:	4b2f      	ldr	r3, [pc, #188]	@ (8003708 <xTaskPriorityDisinherit+0xd4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	429a      	cmp	r2, r3
 8003652:	d00b      	beq.n	800366c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	60bb      	str	r3, [r7, #8]
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	429a      	cmp	r2, r3
 80036a0:	d02c      	beq.n	80036fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d128      	bne.n	80036fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fc2c 	bl	8001f0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036cc:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <xTaskPriorityDisinherit+0xd8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d903      	bls.n	80036dc <xTaskPriorityDisinherit+0xa8>
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	4a0c      	ldr	r2, [pc, #48]	@ (800370c <xTaskPriorityDisinherit+0xd8>)
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4a09      	ldr	r2, [pc, #36]	@ (8003710 <xTaskPriorityDisinherit+0xdc>)
 80036ea:	441a      	add	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f7fe fbaf 	bl	8001e56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036fc:	697b      	ldr	r3, [r7, #20]
	}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200008a8 	.word	0x200008a8
 800370c:	20000d84 	.word	0x20000d84
 8003710:	200008ac 	.word	0x200008ac

08003714 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800371e:	4b21      	ldr	r3, [pc, #132]	@ (80037a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003724:	4b20      	ldr	r3, [pc, #128]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3304      	adds	r3, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fbee 	bl	8001f0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d10a      	bne.n	800374e <prvAddCurrentTaskToDelayedList+0x3a>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800373e:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4819      	ldr	r0, [pc, #100]	@ (80037ac <prvAddCurrentTaskToDelayedList+0x98>)
 8003748:	f7fe fb85 	bl	8001e56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800374c:	e026      	b.n	800379c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003756:	4b14      	ldr	r3, [pc, #80]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	429a      	cmp	r2, r3
 8003764:	d209      	bcs.n	800377a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003766:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7fe fb92 	bl	8001e9c <vListInsert>
}
 8003778:	e010      	b.n	800379c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800377a:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7fe fb88 	bl	8001e9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d202      	bcs.n	800379c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003796:	4a08      	ldr	r2, [pc, #32]	@ (80037b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000d80 	.word	0x20000d80
 80037a8:	200008a8 	.word	0x200008a8
 80037ac:	20000d68 	.word	0x20000d68
 80037b0:	20000d38 	.word	0x20000d38
 80037b4:	20000d34 	.word	0x20000d34
 80037b8:	20000d9c 	.word	0x20000d9c

080037bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	@ 0x28
 80037c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80037c6:	f000 fb11 	bl	8003dec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80037ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <xTimerCreateTimerTask+0x84>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d021      	beq.n	8003816 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80037da:	1d3a      	adds	r2, r7, #4
 80037dc:	f107 0108 	add.w	r1, r7, #8
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe faf1 	bl	8001dcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	9202      	str	r2, [sp, #8]
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2302      	movs	r3, #2
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2300      	movs	r3, #0
 80037fa:	460a      	mov	r2, r1
 80037fc:	4911      	ldr	r1, [pc, #68]	@ (8003844 <xTimerCreateTimerTask+0x88>)
 80037fe:	4812      	ldr	r0, [pc, #72]	@ (8003848 <xTimerCreateTimerTask+0x8c>)
 8003800:	f7ff f8a6 	bl	8002950 <xTaskCreateStatic>
 8003804:	4603      	mov	r3, r0
 8003806:	4a11      	ldr	r2, [pc, #68]	@ (800384c <xTimerCreateTimerTask+0x90>)
 8003808:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800380a:	4b10      	ldr	r3, [pc, #64]	@ (800384c <xTimerCreateTimerTask+0x90>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003812:	2301      	movs	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	613b      	str	r3, [r7, #16]
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003834:	697b      	ldr	r3, [r7, #20]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000dd8 	.word	0x20000dd8
 8003844:	08004830 	.word	0x08004830
 8003848:	08003989 	.word	0x08003989
 800384c:	20000ddc 	.word	0x20000ddc

08003850 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <xTimerGenericCommand+0x30>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	623b      	str	r3, [r7, #32]
}
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003880:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <xTimerGenericCommand+0x98>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02a      	beq.n	80038de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	dc18      	bgt.n	80038cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800389a:	f7ff fead 	bl	80035f8 <xTaskGetSchedulerState>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d109      	bne.n	80038b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80038a4:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <xTimerGenericCommand+0x98>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	f107 0110 	add.w	r1, r7, #16
 80038ac:	2300      	movs	r3, #0
 80038ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b0:	f7fe fc60 	bl	8002174 <xQueueGenericSend>
 80038b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80038b6:	e012      	b.n	80038de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80038b8:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <xTimerGenericCommand+0x98>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	f107 0110 	add.w	r1, r7, #16
 80038c0:	2300      	movs	r3, #0
 80038c2:	2200      	movs	r2, #0
 80038c4:	f7fe fc56 	bl	8002174 <xQueueGenericSend>
 80038c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80038ca:	e008      	b.n	80038de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <xTimerGenericCommand+0x98>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	f107 0110 	add.w	r1, r7, #16
 80038d4:	2300      	movs	r3, #0
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	f7fe fd4e 	bl	8002378 <xQueueGenericSendFromISR>
 80038dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	@ 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000dd8 	.word	0x20000dd8

080038ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f6:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <prvProcessExpiredTimer+0x98>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3304      	adds	r3, #4
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fb01 	bl	8001f0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	18d1      	adds	r1, r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f000 f8d3 	bl	8003ad0 <prvInsertTimerInActiveList>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003930:	2300      	movs	r3, #0
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	2100      	movs	r1, #0
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff88 	bl	8003850 <xTimerGenericCommand>
 8003940:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d114      	bne.n	8003972 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	60fb      	str	r3, [r7, #12]
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	4798      	blx	r3
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000dd0 	.word	0x20000dd0

08003988 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003990:	f107 0308 	add.w	r3, r7, #8
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f859 	bl	8003a4c <prvGetNextExpireTime>
 800399a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4619      	mov	r1, r3
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f805 	bl	80039b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80039a6:	f000 f8d5 	bl	8003b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039aa:	bf00      	nop
 80039ac:	e7f0      	b.n	8003990 <prvTimerTask+0x8>
	...

080039b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80039ba:	f7ff fa2d 	bl	8002e18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f864 	bl	8003a90 <prvSampleTimeNow>
 80039c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d130      	bne.n	8003a32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <prvProcessTimerOrBlockTask+0x3c>
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d806      	bhi.n	80039ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80039de:	f7ff fa29 	bl	8002e34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff81 	bl	80038ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80039ea:	e024      	b.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039f2:	4b13      	ldr	r3, [pc, #76]	@ (8003a40 <prvProcessTimerOrBlockTask+0x90>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <prvProcessTimerOrBlockTask+0x50>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <prvProcessTimerOrBlockTask+0x52>
 8003a00:	2300      	movs	r3, #0
 8003a02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <prvProcessTimerOrBlockTask+0x94>)
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fe ff69 	bl	80028e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a16:	f7ff fa0d 	bl	8002e34 <xTaskResumeAll>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <prvProcessTimerOrBlockTask+0x98>)
 8003a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
}
 8003a30:	e001      	b.n	8003a36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003a32:	f7ff f9ff 	bl	8002e34 <xTaskResumeAll>
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000dd4 	.word	0x20000dd4
 8003a44:	20000dd8 	.word	0x20000dd8
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a54:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <prvGetNextExpireTime+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <prvGetNextExpireTime+0x16>
 8003a5e:	2201      	movs	r2, #1
 8003a60:	e000      	b.n	8003a64 <prvGetNextExpireTime+0x18>
 8003a62:	2200      	movs	r2, #0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <prvGetNextExpireTime+0x40>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e001      	b.n	8003a80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003a80:	68fb      	ldr	r3, [r7, #12]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	20000dd0 	.word	0x20000dd0

08003a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003a98:	f7ff fa6a 	bl	8002f70 <xTaskGetTickCount>
 8003a9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <prvSampleTimeNow+0x3c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d205      	bcs.n	8003ab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003aa8:	f000 f93a 	bl	8003d20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e002      	b.n	8003aba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003aba:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <prvSampleTimeNow+0x3c>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000de0 	.word	0x20000de0

08003ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d812      	bhi.n	8003b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e01b      	b.n	8003b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <prvInsertTimerInActiveList+0x7c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3304      	adds	r3, #4
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7fe f9c1 	bl	8001e9c <vListInsert>
 8003b1a:	e012      	b.n	8003b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d206      	bcs.n	8003b32 <prvInsertTimerInActiveList+0x62>
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e007      	b.n	8003b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b32:	4b07      	ldr	r3, [pc, #28]	@ (8003b50 <prvInsertTimerInActiveList+0x80>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f7fe f9ad 	bl	8001e9c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003b42:	697b      	ldr	r3, [r7, #20]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000dd4 	.word	0x20000dd4
 8003b50:	20000dd0 	.word	0x20000dd0

08003b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08e      	sub	sp, #56	@ 0x38
 8003b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b5a:	e0ce      	b.n	8003cfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da19      	bge.n	8003b96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	3304      	adds	r3, #4
 8003b66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	61fb      	str	r3, [r7, #28]
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	e7fd      	b.n	8003b82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b8c:	6850      	ldr	r0, [r2, #4]
 8003b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f2c0 80ae 	blt.w	8003cfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe f9ac 	bl	8001f0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff6a 	bl	8003a90 <prvSampleTimeNow>
 8003bbc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b09      	cmp	r3, #9
 8003bc2:	f200 8097 	bhi.w	8003cf4 <prvProcessReceivedCommands+0x1a0>
 8003bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <prvProcessReceivedCommands+0x78>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bf5 	.word	0x08003bf5
 8003bd8:	08003c6b 	.word	0x08003c6b
 8003bdc:	08003c7f 	.word	0x08003c7f
 8003be0:	08003ccb 	.word	0x08003ccb
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003bf5 	.word	0x08003bf5
 8003bec:	08003c6b 	.word	0x08003c6b
 8003bf0:	08003c7f 	.word	0x08003c7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	18d1      	adds	r1, r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c14:	f7ff ff5c 	bl	8003ad0 <prvInsertTimerInActiveList>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d06c      	beq.n	8003cf8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d061      	beq.n	8003cf8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	2100      	movs	r1, #0
 8003c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c46:	f7ff fe03 	bl	8003850 <xTimerGenericCommand>
 8003c4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d152      	bne.n	8003cf8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	61bb      	str	r3, [r7, #24]
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003c7c:	e03d      	b.n	8003cfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	617b      	str	r3, [r7, #20]
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	18d1      	adds	r1, r2, r3
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cc4:	f7ff ff04 	bl	8003ad0 <prvInsertTimerInActiveList>
					break;
 8003cc8:	e017      	b.n	8003cfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cda:	f000 fb87 	bl	80043ec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003cde:	e00c      	b.n	8003cfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003cf2:	e002      	b.n	8003cfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <prvProcessReceivedCommands+0x1a6>
					break;
 8003cf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <prvProcessReceivedCommands+0x1c8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1d39      	adds	r1, r7, #4
 8003d00:	2200      	movs	r2, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fbd6 	bl	80024b4 <xQueueReceive>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f af26 	bne.w	8003b5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3730      	adds	r7, #48	@ 0x30
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000dd8 	.word	0x20000dd8

08003d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d26:	e049      	b.n	8003dbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d28:	4b2e      	ldr	r3, [pc, #184]	@ (8003de4 <prvSwitchTimerLists+0xc4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d32:	4b2c      	ldr	r3, [pc, #176]	@ (8003de4 <prvSwitchTimerLists+0xc4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe f8e3 	bl	8001f0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02f      	beq.n	8003dbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d90e      	bls.n	8003d8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <prvSwitchTimerLists+0xc4>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7fe f889 	bl	8001e9c <vListInsert>
 8003d8a:	e017      	b.n	8003dbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	2100      	movs	r1, #0
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff fd5a 	bl	8003850 <xTimerGenericCommand>
 8003d9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	603b      	str	r3, [r7, #0]
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <prvSwitchTimerLists+0xc4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1b0      	bne.n	8003d28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003dc6:	4b07      	ldr	r3, [pc, #28]	@ (8003de4 <prvSwitchTimerLists+0xc4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <prvSwitchTimerLists+0xc8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a04      	ldr	r2, [pc, #16]	@ (8003de4 <prvSwitchTimerLists+0xc4>)
 8003dd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003dd4:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <prvSwitchTimerLists+0xc8>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6013      	str	r3, [r2, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000dd0 	.word	0x20000dd0
 8003de8:	20000dd4 	.word	0x20000dd4

08003dec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003df2:	f000 f92b 	bl	800404c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003df6:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <prvCheckForValidListAndQueue+0x60>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d120      	bne.n	8003e40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003dfe:	4814      	ldr	r0, [pc, #80]	@ (8003e50 <prvCheckForValidListAndQueue+0x64>)
 8003e00:	f7fd fffe 	bl	8001e00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003e04:	4813      	ldr	r0, [pc, #76]	@ (8003e54 <prvCheckForValidListAndQueue+0x68>)
 8003e06:	f7fd fffb 	bl	8001e00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003e0a:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <prvCheckForValidListAndQueue+0x6c>)
 8003e0c:	4a10      	ldr	r2, [pc, #64]	@ (8003e50 <prvCheckForValidListAndQueue+0x64>)
 8003e0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003e10:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <prvCheckForValidListAndQueue+0x70>)
 8003e12:	4a10      	ldr	r2, [pc, #64]	@ (8003e54 <prvCheckForValidListAndQueue+0x68>)
 8003e14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <prvCheckForValidListAndQueue+0x74>)
 8003e1c:	4a11      	ldr	r2, [pc, #68]	@ (8003e64 <prvCheckForValidListAndQueue+0x78>)
 8003e1e:	2110      	movs	r1, #16
 8003e20:	200a      	movs	r0, #10
 8003e22:	f7fe f907 	bl	8002034 <xQueueGenericCreateStatic>
 8003e26:	4603      	mov	r3, r0
 8003e28:	4a08      	ldr	r2, [pc, #32]	@ (8003e4c <prvCheckForValidListAndQueue+0x60>)
 8003e2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003e2c:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <prvCheckForValidListAndQueue+0x60>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <prvCheckForValidListAndQueue+0x60>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	490b      	ldr	r1, [pc, #44]	@ (8003e68 <prvCheckForValidListAndQueue+0x7c>)
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fd2c 	bl	8002898 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e40:	f000 f934 	bl	80040ac <vPortExitCritical>
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000dd8 	.word	0x20000dd8
 8003e50:	20000da8 	.word	0x20000da8
 8003e54:	20000dbc 	.word	0x20000dbc
 8003e58:	20000dd0 	.word	0x20000dd0
 8003e5c:	20000dd4 	.word	0x20000dd4
 8003e60:	20000e84 	.word	0x20000e84
 8003e64:	20000de4 	.word	0x20000de4
 8003e68:	08004838 	.word	0x08004838

08003e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3b04      	subs	r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b04      	subs	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0201 	bic.w	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e9c:	4a08      	ldr	r2, [pc, #32]	@ (8003ec0 <pxPortInitialiseStack+0x54>)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3b14      	subs	r3, #20
 8003ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3b20      	subs	r3, #32
 8003eb2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	08003ec5 	.word	0x08003ec5

08003ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ece:	4b12      	ldr	r3, [pc, #72]	@ (8003f18 <prvTaskExitError+0x54>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d00b      	beq.n	8003ef0 <prvTaskExitError+0x2c>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	60fb      	str	r3, [r7, #12]
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <prvTaskExitError+0x28>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	60bb      	str	r3, [r7, #8]
}
 8003f02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f04:	bf00      	nop
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0fc      	beq.n	8003f06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	2000000c 	.word	0x2000000c
 8003f1c:	00000000 	.word	0x00000000

08003f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f20:	4b07      	ldr	r3, [pc, #28]	@ (8003f40 <pxCurrentTCBConst2>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	6808      	ldr	r0, [r1, #0]
 8003f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f2a:	f380 8809 	msr	PSP, r0
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f380 8811 	msr	BASEPRI, r0
 8003f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f3e:	4770      	bx	lr

08003f40 <pxCurrentTCBConst2>:
 8003f40:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop

08003f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f48:	4806      	ldr	r0, [pc, #24]	@ (8003f64 <prvPortStartFirstTask+0x1c>)
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	6800      	ldr	r0, [r0, #0]
 8003f4e:	f380 8808 	msr	MSP, r0
 8003f52:	b662      	cpsie	i
 8003f54:	b661      	cpsie	f
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	df00      	svc	0
 8003f60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f62:	bf00      	nop
 8003f64:	e000ed08 	.word	0xe000ed08

08003f68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f6e:	4b32      	ldr	r3, [pc, #200]	@ (8004038 <xPortStartScheduler+0xd0>)
 8003f70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	22ff      	movs	r2, #255	@ 0xff
 8003f7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <xPortStartScheduler+0xd4>)
 8003f94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f96:	4b2a      	ldr	r3, [pc, #168]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003f98:	2207      	movs	r2, #7
 8003f9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f9c:	e009      	b.n	8003fb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f9e:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	4a26      	ldr	r2, [pc, #152]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b80      	cmp	r3, #128	@ 0x80
 8003fbc:	d0ef      	beq.n	8003f9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fbe:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1c3 0307 	rsb	r3, r3, #7
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d00b      	beq.n	8003fe2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	60bb      	str	r3, [r7, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	4a15      	ldr	r2, [pc, #84]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fec:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ff4:	4a12      	ldr	r2, [pc, #72]	@ (8004040 <xPortStartScheduler+0xd8>)
 8003ff6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004000:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <xPortStartScheduler+0xdc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0f      	ldr	r2, [pc, #60]	@ (8004044 <xPortStartScheduler+0xdc>)
 8004006:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800400a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800400c:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <xPortStartScheduler+0xdc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0c      	ldr	r2, [pc, #48]	@ (8004044 <xPortStartScheduler+0xdc>)
 8004012:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004016:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004018:	f000 f8b8 	bl	800418c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800401c:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <xPortStartScheduler+0xe0>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004022:	f7ff ff91 	bl	8003f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004026:	f7ff f86b 	bl	8003100 <vTaskSwitchContext>
	prvTaskExitError();
 800402a:	f7ff ff4b 	bl	8003ec4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	e000e400 	.word	0xe000e400
 800403c:	20000ed4 	.word	0x20000ed4
 8004040:	20000ed8 	.word	0x20000ed8
 8004044:	e000ed20 	.word	0xe000ed20
 8004048:	2000000c 	.word	0x2000000c

0800404c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	607b      	str	r3, [r7, #4]
}
 8004064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004066:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <vPortEnterCritical+0x58>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a0d      	ldr	r2, [pc, #52]	@ (80040a4 <vPortEnterCritical+0x58>)
 800406e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <vPortEnterCritical+0x58>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d110      	bne.n	800409a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004078:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <vPortEnterCritical+0x5c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <vPortEnterCritical+0x4e>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	603b      	str	r3, [r7, #0]
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <vPortEnterCritical+0x4a>
	}
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	2000000c 	.word	0x2000000c
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040b2:	4b12      	ldr	r3, [pc, #72]	@ (80040fc <vPortExitCritical+0x50>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <vPortExitCritical+0x26>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	607b      	str	r3, [r7, #4]
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	e7fd      	b.n	80040ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040d2:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <vPortExitCritical+0x50>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	4a08      	ldr	r2, [pc, #32]	@ (80040fc <vPortExitCritical+0x50>)
 80040da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040dc:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <vPortExitCritical+0x50>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <vPortExitCritical+0x44>
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f383 8811 	msr	BASEPRI, r3
}
 80040ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	2000000c 	.word	0x2000000c

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004110:	6010      	str	r0, [r2, #0]
 8004112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004116:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800411a:	f380 8811 	msr	BASEPRI, r0
 800411e:	f7fe ffef 	bl	8003100 <vTaskSwitchContext>
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	6808      	ldr	r0, [r1, #0]
 8004132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004136:	f380 8809 	msr	PSP, r0
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	4770      	bx	lr

08004140 <pxCurrentTCBConst>:
 8004140:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
}
 8004160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004162:	f7fe ff13 	bl	8002f8c <xTaskIncrementTick>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <xPortSysTickHandler+0x40>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f383 8811 	msr	BASEPRI, r3
}
 800417e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004190:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <vPortSetupTimerInterrupt+0x30>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004196:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <vPortSetupTimerInterrupt+0x34>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800419c:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <vPortSetupTimerInterrupt+0x38>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <vPortSetupTimerInterrupt+0x3c>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	4a08      	ldr	r2, [pc, #32]	@ (80041cc <vPortSetupTimerInterrupt+0x40>)
 80041aa:	3b01      	subs	r3, #1
 80041ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ae:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <vPortSetupTimerInterrupt+0x30>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	e000e010 	.word	0xe000e010
 80041c0:	e000e018 	.word	0xe000e018
 80041c4:	20000000 	.word	0x20000000
 80041c8:	10624dd3 	.word	0x10624dd3
 80041cc:	e000e014 	.word	0xe000e014

080041d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041d6:	f3ef 8305 	mrs	r3, IPSR
 80041da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b0f      	cmp	r3, #15
 80041e0:	d915      	bls.n	800420e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041e2:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <vPortValidateInterruptPriority+0x70>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041ec:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <vPortValidateInterruptPriority+0x74>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	7afa      	ldrb	r2, [r7, #11]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20b      	bcs.n	800420e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	607b      	str	r3, [r7, #4]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800420e:	4b0e      	ldr	r3, [pc, #56]	@ (8004248 <vPortValidateInterruptPriority+0x78>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004216:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <vPortValidateInterruptPriority+0x7c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d90b      	bls.n	8004236 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	603b      	str	r3, [r7, #0]
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	e7fd      	b.n	8004232 <vPortValidateInterruptPriority+0x62>
	}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	e000e3f0 	.word	0xe000e3f0
 8004244:	20000ed4 	.word	0x20000ed4
 8004248:	e000ed0c 	.word	0xe000ed0c
 800424c:	20000ed8 	.word	0x20000ed8

08004250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800425c:	f7fe fddc 	bl	8002e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004260:	4b5c      	ldr	r3, [pc, #368]	@ (80043d4 <pvPortMalloc+0x184>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004268:	f000 f924 	bl	80044b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800426c:	4b5a      	ldr	r3, [pc, #360]	@ (80043d8 <pvPortMalloc+0x188>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 8095 	bne.w	80043a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01e      	beq.n	80042be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004280:	2208      	movs	r2, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4413      	add	r3, r2
 8004286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	2b00      	cmp	r3, #0
 8004290:	d015      	beq.n	80042be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f023 0307 	bic.w	r3, r3, #7
 8004298:	3308      	adds	r3, #8
 800429a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <pvPortMalloc+0x6e>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	617b      	str	r3, [r7, #20]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d06f      	beq.n	80043a4 <pvPortMalloc+0x154>
 80042c4:	4b45      	ldr	r3, [pc, #276]	@ (80043dc <pvPortMalloc+0x18c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d86a      	bhi.n	80043a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042ce:	4b44      	ldr	r3, [pc, #272]	@ (80043e0 <pvPortMalloc+0x190>)
 80042d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042d2:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <pvPortMalloc+0x190>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042d8:	e004      	b.n	80042e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d903      	bls.n	80042f6 <pvPortMalloc+0xa6>
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f1      	bne.n	80042da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042f6:	4b37      	ldr	r3, [pc, #220]	@ (80043d4 <pvPortMalloc+0x184>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d051      	beq.n	80043a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2208      	movs	r2, #8
 8004306:	4413      	add	r3, r2
 8004308:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	2308      	movs	r3, #8
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	429a      	cmp	r2, r3
 8004320:	d920      	bls.n	8004364 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4413      	add	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <pvPortMalloc+0xfc>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800435e:	69b8      	ldr	r0, [r7, #24]
 8004360:	f000 f90a 	bl	8004578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004364:	4b1d      	ldr	r3, [pc, #116]	@ (80043dc <pvPortMalloc+0x18c>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	4a1b      	ldr	r2, [pc, #108]	@ (80043dc <pvPortMalloc+0x18c>)
 8004370:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004372:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <pvPortMalloc+0x18c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <pvPortMalloc+0x194>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d203      	bcs.n	8004386 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800437e:	4b17      	ldr	r3, [pc, #92]	@ (80043dc <pvPortMalloc+0x18c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a18      	ldr	r2, [pc, #96]	@ (80043e4 <pvPortMalloc+0x194>)
 8004384:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	4b13      	ldr	r3, [pc, #76]	@ (80043d8 <pvPortMalloc+0x188>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	431a      	orrs	r2, r3
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800439a:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <pvPortMalloc+0x198>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	4a11      	ldr	r2, [pc, #68]	@ (80043e8 <pvPortMalloc+0x198>)
 80043a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043a4:	f7fe fd46 	bl	8002e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <pvPortMalloc+0x17a>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60fb      	str	r3, [r7, #12]
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <pvPortMalloc+0x176>
	return pvReturn;
 80043ca:	69fb      	ldr	r3, [r7, #28]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3728      	adds	r7, #40	@ 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20001ae4 	.word	0x20001ae4
 80043d8:	20001af8 	.word	0x20001af8
 80043dc:	20001ae8 	.word	0x20001ae8
 80043e0:	20001adc 	.word	0x20001adc
 80043e4:	20001aec 	.word	0x20001aec
 80043e8:	20001af0 	.word	0x20001af0

080043ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d04f      	beq.n	800449e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043fe:	2308      	movs	r3, #8
 8004400:	425b      	negs	r3, r3
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4413      	add	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	4b25      	ldr	r3, [pc, #148]	@ (80044a8 <vPortFree+0xbc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <vPortFree+0x46>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60fb      	str	r3, [r7, #12]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <vPortFree+0x66>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60bb      	str	r3, [r7, #8]
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <vPortFree+0xbc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01e      	beq.n	800449e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11a      	bne.n	800449e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <vPortFree+0xbc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004478:	f7fe fcce 	bl	8002e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <vPortFree+0xc0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4413      	add	r3, r2
 8004486:	4a09      	ldr	r2, [pc, #36]	@ (80044ac <vPortFree+0xc0>)
 8004488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800448a:	6938      	ldr	r0, [r7, #16]
 800448c:	f000 f874 	bl	8004578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004490:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <vPortFree+0xc4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	4a06      	ldr	r2, [pc, #24]	@ (80044b0 <vPortFree+0xc4>)
 8004498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800449a:	f7fe fccb 	bl	8002e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800449e:	bf00      	nop
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20001af8 	.word	0x20001af8
 80044ac:	20001ae8 	.word	0x20001ae8
 80044b0:	20001af4 	.word	0x20001af4

080044b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80044be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044c0:	4b27      	ldr	r3, [pc, #156]	@ (8004560 <prvHeapInit+0xac>)
 80044c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3307      	adds	r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0307 	bic.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004560 <prvHeapInit+0xac>)
 80044e4:	4413      	add	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <prvHeapInit+0xb0>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004564 <prvHeapInit+0xb0>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004500:	2208      	movs	r2, #8
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a15      	ldr	r2, [pc, #84]	@ (8004568 <prvHeapInit+0xb4>)
 8004514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004516:	4b14      	ldr	r3, [pc, #80]	@ (8004568 <prvHeapInit+0xb4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <prvHeapInit+0xb4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <prvHeapInit+0xb4>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a0a      	ldr	r2, [pc, #40]	@ (800456c <prvHeapInit+0xb8>)
 8004542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a09      	ldr	r2, [pc, #36]	@ (8004570 <prvHeapInit+0xbc>)
 800454a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <prvHeapInit+0xc0>)
 800454e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000edc 	.word	0x20000edc
 8004564:	20001adc 	.word	0x20001adc
 8004568:	20001ae4 	.word	0x20001ae4
 800456c:	20001aec 	.word	0x20001aec
 8004570:	20001ae8 	.word	0x20001ae8
 8004574:	20001af8 	.word	0x20001af8

08004578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004580:	4b27      	ldr	r3, [pc, #156]	@ (8004620 <prvInsertBlockIntoFreeList+0xa8>)
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e002      	b.n	800458c <prvInsertBlockIntoFreeList+0x14>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d8f7      	bhi.n	8004586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d108      	bne.n	80045ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	441a      	add	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	441a      	add	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d118      	bne.n	8004600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b14      	ldr	r3, [pc, #80]	@ (8004624 <prvInsertBlockIntoFreeList+0xac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d00d      	beq.n	80045f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e008      	b.n	8004608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <prvInsertBlockIntoFreeList+0xac>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e003      	b.n	8004608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d002      	beq.n	8004616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	20001adc 	.word	0x20001adc
 8004624:	20001ae4 	.word	0x20001ae4

08004628 <memset>:
 8004628:	4603      	mov	r3, r0
 800462a:	4402      	add	r2, r0
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <memset+0xa>
 8004630:	4770      	bx	lr
 8004632:	f803 1b01 	strb.w	r1, [r3], #1
 8004636:	e7f9      	b.n	800462c <memset+0x4>

08004638 <_reclaim_reent>:
 8004638:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <_reclaim_reent+0xb8>)
 800463a:	b570      	push	{r4, r5, r6, lr}
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4604      	mov	r4, r0
 8004640:	4283      	cmp	r3, r0
 8004642:	d053      	beq.n	80046ec <_reclaim_reent+0xb4>
 8004644:	69c3      	ldr	r3, [r0, #28]
 8004646:	b31b      	cbz	r3, 8004690 <_reclaim_reent+0x58>
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	b163      	cbz	r3, 8004666 <_reclaim_reent+0x2e>
 800464c:	2500      	movs	r5, #0
 800464e:	69e3      	ldr	r3, [r4, #28]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	5959      	ldr	r1, [r3, r5]
 8004654:	b9b1      	cbnz	r1, 8004684 <_reclaim_reent+0x4c>
 8004656:	3504      	adds	r5, #4
 8004658:	2d80      	cmp	r5, #128	@ 0x80
 800465a:	d1f8      	bne.n	800464e <_reclaim_reent+0x16>
 800465c:	69e3      	ldr	r3, [r4, #28]
 800465e:	4620      	mov	r0, r4
 8004660:	68d9      	ldr	r1, [r3, #12]
 8004662:	f000 f87b 	bl	800475c <_free_r>
 8004666:	69e3      	ldr	r3, [r4, #28]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	b111      	cbz	r1, 8004672 <_reclaim_reent+0x3a>
 800466c:	4620      	mov	r0, r4
 800466e:	f000 f875 	bl	800475c <_free_r>
 8004672:	69e3      	ldr	r3, [r4, #28]
 8004674:	689d      	ldr	r5, [r3, #8]
 8004676:	b15d      	cbz	r5, 8004690 <_reclaim_reent+0x58>
 8004678:	4629      	mov	r1, r5
 800467a:	4620      	mov	r0, r4
 800467c:	682d      	ldr	r5, [r5, #0]
 800467e:	f000 f86d 	bl	800475c <_free_r>
 8004682:	e7f8      	b.n	8004676 <_reclaim_reent+0x3e>
 8004684:	680e      	ldr	r6, [r1, #0]
 8004686:	4620      	mov	r0, r4
 8004688:	f000 f868 	bl	800475c <_free_r>
 800468c:	4631      	mov	r1, r6
 800468e:	e7e1      	b.n	8004654 <_reclaim_reent+0x1c>
 8004690:	6961      	ldr	r1, [r4, #20]
 8004692:	b111      	cbz	r1, 800469a <_reclaim_reent+0x62>
 8004694:	4620      	mov	r0, r4
 8004696:	f000 f861 	bl	800475c <_free_r>
 800469a:	69e1      	ldr	r1, [r4, #28]
 800469c:	b111      	cbz	r1, 80046a4 <_reclaim_reent+0x6c>
 800469e:	4620      	mov	r0, r4
 80046a0:	f000 f85c 	bl	800475c <_free_r>
 80046a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046a6:	b111      	cbz	r1, 80046ae <_reclaim_reent+0x76>
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 f857 	bl	800475c <_free_r>
 80046ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046b0:	b111      	cbz	r1, 80046b8 <_reclaim_reent+0x80>
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 f852 	bl	800475c <_free_r>
 80046b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046ba:	b111      	cbz	r1, 80046c2 <_reclaim_reent+0x8a>
 80046bc:	4620      	mov	r0, r4
 80046be:	f000 f84d 	bl	800475c <_free_r>
 80046c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80046c4:	b111      	cbz	r1, 80046cc <_reclaim_reent+0x94>
 80046c6:	4620      	mov	r0, r4
 80046c8:	f000 f848 	bl	800475c <_free_r>
 80046cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80046ce:	b111      	cbz	r1, 80046d6 <_reclaim_reent+0x9e>
 80046d0:	4620      	mov	r0, r4
 80046d2:	f000 f843 	bl	800475c <_free_r>
 80046d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80046d8:	b111      	cbz	r1, 80046e0 <_reclaim_reent+0xa8>
 80046da:	4620      	mov	r0, r4
 80046dc:	f000 f83e 	bl	800475c <_free_r>
 80046e0:	6a23      	ldr	r3, [r4, #32]
 80046e2:	b11b      	cbz	r3, 80046ec <_reclaim_reent+0xb4>
 80046e4:	4620      	mov	r0, r4
 80046e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ea:	4718      	bx	r3
 80046ec:	bd70      	pop	{r4, r5, r6, pc}
 80046ee:	bf00      	nop
 80046f0:	20000010 	.word	0x20000010

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	2600      	movs	r6, #0
 80046f8:	4d0c      	ldr	r5, [pc, #48]	@ (800472c <__libc_init_array+0x38>)
 80046fa:	4c0d      	ldr	r4, [pc, #52]	@ (8004730 <__libc_init_array+0x3c>)
 80046fc:	1b64      	subs	r4, r4, r5
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	f000 f87e 	bl	8004804 <_init>
 8004708:	2600      	movs	r6, #0
 800470a:	4d0a      	ldr	r5, [pc, #40]	@ (8004734 <__libc_init_array+0x40>)
 800470c:	4c0a      	ldr	r4, [pc, #40]	@ (8004738 <__libc_init_array+0x44>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	f855 3b04 	ldr.w	r3, [r5], #4
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	f855 3b04 	ldr.w	r3, [r5], #4
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	08004890 	.word	0x08004890
 8004730:	08004890 	.word	0x08004890
 8004734:	08004890 	.word	0x08004890
 8004738:	08004894 	.word	0x08004894

0800473c <__retarget_lock_acquire_recursive>:
 800473c:	4770      	bx	lr

0800473e <__retarget_lock_release_recursive>:
 800473e:	4770      	bx	lr

08004740 <memcpy>:
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	f100 33ff 	add.w	r3, r0, #4294967295
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	4770      	bx	lr
 800474c:	b510      	push	{r4, lr}
 800474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004752:	4291      	cmp	r1, r2
 8004754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004758:	d1f9      	bne.n	800474e <memcpy+0xe>
 800475a:	bd10      	pop	{r4, pc}

0800475c <_free_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4605      	mov	r5, r0
 8004760:	2900      	cmp	r1, #0
 8004762:	d040      	beq.n	80047e6 <_free_r+0x8a>
 8004764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004768:	1f0c      	subs	r4, r1, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	bfb8      	it	lt
 800476e:	18e4      	addlt	r4, r4, r3
 8004770:	f000 f83c 	bl	80047ec <__malloc_lock>
 8004774:	4a1c      	ldr	r2, [pc, #112]	@ (80047e8 <_free_r+0x8c>)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	b933      	cbnz	r3, 8004788 <_free_r+0x2c>
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	6014      	str	r4, [r2, #0]
 800477e:	4628      	mov	r0, r5
 8004780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004784:	f000 b838 	b.w	80047f8 <__malloc_unlock>
 8004788:	42a3      	cmp	r3, r4
 800478a:	d908      	bls.n	800479e <_free_r+0x42>
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	1821      	adds	r1, r4, r0
 8004790:	428b      	cmp	r3, r1
 8004792:	bf01      	itttt	eq
 8004794:	6819      	ldreq	r1, [r3, #0]
 8004796:	685b      	ldreq	r3, [r3, #4]
 8004798:	1809      	addeq	r1, r1, r0
 800479a:	6021      	streq	r1, [r4, #0]
 800479c:	e7ed      	b.n	800477a <_free_r+0x1e>
 800479e:	461a      	mov	r2, r3
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	b10b      	cbz	r3, 80047a8 <_free_r+0x4c>
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	d9fa      	bls.n	800479e <_free_r+0x42>
 80047a8:	6811      	ldr	r1, [r2, #0]
 80047aa:	1850      	adds	r0, r2, r1
 80047ac:	42a0      	cmp	r0, r4
 80047ae:	d10b      	bne.n	80047c8 <_free_r+0x6c>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	4401      	add	r1, r0
 80047b4:	1850      	adds	r0, r2, r1
 80047b6:	4283      	cmp	r3, r0
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	d1e0      	bne.n	800477e <_free_r+0x22>
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4408      	add	r0, r1
 80047c2:	6010      	str	r0, [r2, #0]
 80047c4:	6053      	str	r3, [r2, #4]
 80047c6:	e7da      	b.n	800477e <_free_r+0x22>
 80047c8:	d902      	bls.n	80047d0 <_free_r+0x74>
 80047ca:	230c      	movs	r3, #12
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	e7d6      	b.n	800477e <_free_r+0x22>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	1821      	adds	r1, r4, r0
 80047d4:	428b      	cmp	r3, r1
 80047d6:	bf01      	itttt	eq
 80047d8:	6819      	ldreq	r1, [r3, #0]
 80047da:	685b      	ldreq	r3, [r3, #4]
 80047dc:	1809      	addeq	r1, r1, r0
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	6054      	str	r4, [r2, #4]
 80047e4:	e7cb      	b.n	800477e <_free_r+0x22>
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	20001c38 	.word	0x20001c38

080047ec <__malloc_lock>:
 80047ec:	4801      	ldr	r0, [pc, #4]	@ (80047f4 <__malloc_lock+0x8>)
 80047ee:	f7ff bfa5 	b.w	800473c <__retarget_lock_acquire_recursive>
 80047f2:	bf00      	nop
 80047f4:	20001c34 	.word	0x20001c34

080047f8 <__malloc_unlock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	@ (8004800 <__malloc_unlock+0x8>)
 80047fa:	f7ff bfa0 	b.w	800473e <__retarget_lock_release_recursive>
 80047fe:	bf00      	nop
 8004800:	20001c34 	.word	0x20001c34

08004804 <_init>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	bf00      	nop
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

08004810 <_fini>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr
