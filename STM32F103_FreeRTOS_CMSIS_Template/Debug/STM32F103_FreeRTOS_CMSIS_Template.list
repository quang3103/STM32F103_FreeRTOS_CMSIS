
STM32F103_FreeRTOS_CMSIS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080058dc  080058dc  000068dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f0  080059f0  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059f0  080059f0  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f8  080059f8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f8  080059f8  000069f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005a00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000060  08005a60  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c50  08005a60  00007c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bc5  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003235  00000000  00000000  0001dc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00020e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f49  00000000  00000000  00022230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003284  00000000  00000000  00023179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f8b  00000000  00000000  000263fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094faf  00000000  00000000  0003b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b8  00000000  00000000  000d037c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d5b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080058c4 	.word	0x080058c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080058c4 	.word	0x080058c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fafc 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f832 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f89c 	bl	80002a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f870 	bl	8000254 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f001 feaa 	bl	8001ecc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue */
  myQueueHandle = osMessageQueueNew (1, sizeof(uint8_t), &myQueue_attributes);
 8000178:	4a0d      	ldr	r2, [pc, #52]	@ (80001b0 <main+0x50>)
 800017a:	2101      	movs	r1, #1
 800017c:	2001      	movs	r0, #1
 800017e:	f001 fff6 	bl	800216e <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a0b      	ldr	r2, [pc, #44]	@ (80001b4 <main+0x54>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTaskSender */
  myTaskSenderHandle = osThreadNew(StartTaskSender, NULL, &myTaskSender_attributes);
 8000188:	4a0b      	ldr	r2, [pc, #44]	@ (80001b8 <main+0x58>)
 800018a:	2100      	movs	r1, #0
 800018c:	480b      	ldr	r0, [pc, #44]	@ (80001bc <main+0x5c>)
 800018e:	f001 fee5 	bl	8001f5c <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0a      	ldr	r2, [pc, #40]	@ (80001c0 <main+0x60>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of myTaskReceiver */
  myTaskReceiverHandle = osThreadNew(StartTaskReceiver, NULL, &myTaskReceiver_attributes);
 8000198:	4a0a      	ldr	r2, [pc, #40]	@ (80001c4 <main+0x64>)
 800019a:	2100      	movs	r1, #0
 800019c:	480a      	ldr	r0, [pc, #40]	@ (80001c8 <main+0x68>)
 800019e:	f001 fedd 	bl	8001f5c <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a09      	ldr	r2, [pc, #36]	@ (80001cc <main+0x6c>)
 80001a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a8:	f001 feb2 	bl	8001f10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ac:	bf00      	nop
 80001ae:	e7fd      	b.n	80001ac <main+0x4c>
 80001b0:	08005978 	.word	0x08005978
 80001b4:	200000cc 	.word	0x200000cc
 80001b8:	08005930 	.word	0x08005930
 80001bc:	08000385 	.word	0x08000385
 80001c0:	200000c4 	.word	0x200000c4
 80001c4:	08005954 	.word	0x08005954
 80001c8:	080003c5 	.word	0x080003c5
 80001cc:	200000c8 	.word	0x200000c8

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	@ 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	@ 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f004 fe84 	bl	8004eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fa:	2310      	movs	r3, #16
 80001fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000202:	2300      	movs	r3, #0
 8000204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000206:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800020a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fd75 	bl	8000d00 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800021c:	f000 f918 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f000 ffe2 	bl	8001204 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000246:	f000 f903 	bl	8000450 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	@ 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000258:	4b11      	ldr	r3, [pc, #68]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 800025a:	4a12      	ldr	r2, [pc, #72]	@ (80002a4 <MX_USART2_UART_Init+0x50>)
 800025c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800025e:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000266:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 800026e:	2200      	movs	r2, #0
 8000270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000272:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000278:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 800027a:	220c      	movs	r2, #12
 800027c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027e:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 8000286:	2200      	movs	r2, #0
 8000288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800028a:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <MX_USART2_UART_Init+0x4c>)
 800028c:	f001 fbb6 	bl	80019fc <HAL_UART_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000296:	f000 f8db 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	2000007c 	.word	0x2000007c
 80002a4:	40004400 	.word	0x40004400

080002a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0310 	and.w	r3, r3, #16
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d4:	4b27      	ldr	r3, [pc, #156]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a26      	ldr	r2, [pc, #152]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b24      	ldr	r3, [pc, #144]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0320 	and.w	r3, r3, #32
 80002e8:	60bb      	str	r3, [r7, #8]
 80002ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a20      	ldr	r2, [pc, #128]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000374 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1a      	ldr	r2, [pc, #104]	@ (8000374 <MX_GPIO_Init+0xcc>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_GPIO_Init+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0308 	and.w	r3, r3, #8
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2120      	movs	r1, #32
 8000320:	4815      	ldr	r0, [pc, #84]	@ (8000378 <MX_GPIO_Init+0xd0>)
 8000322:	f000 fcb3 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800032c:	4b13      	ldr	r3, [pc, #76]	@ (800037c <MX_GPIO_Init+0xd4>)
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4811      	ldr	r0, [pc, #68]	@ (8000380 <MX_GPIO_Init+0xd8>)
 800033c:	f000 fb22 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000340:	2320      	movs	r3, #32
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4808      	ldr	r0, [pc, #32]	@ (8000378 <MX_GPIO_Init+0xd0>)
 8000358:	f000 fb14 	bl	8000984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2105      	movs	r1, #5
 8000360:	2028      	movs	r0, #40	@ 0x28
 8000362:	f000 fae4 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000366:	2028      	movs	r0, #40	@ 0x28
 8000368:	f000 fafd 	bl	8000966 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000
 8000378:	40010800 	.word	0x40010800
 800037c:	10110000 	.word	0x10110000
 8000380:	40011000 	.word	0x40011000

08000384 <StartTaskSender>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskSender */
void StartTaskSender(void *argument)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t data = 1;
 800038c:	2301      	movs	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //osMessageQueuePut(myQueueHandle, &data, 0, 0);
	  //osDelay(1000);
	  if (osMessageQueueGet(myQueueHandle, &data, NULL, 2000) != osOK)
 8000390:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <StartTaskSender+0x3c>)
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	f107 010f 	add.w	r1, r7, #15
 8000398:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800039c:	2200      	movs	r2, #0
 800039e:	f001 ffb9 	bl	8002314 <osMessageQueueGet>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <StartTaskSender+0x36>
		  osMessageQueuePut(myQueueHandle, &data, 0, 0);
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <StartTaskSender+0x3c>)
 80003aa:	6818      	ldr	r0, [r3, #0]
 80003ac:	f107 010f 	add.w	r1, r7, #15
 80003b0:	2300      	movs	r3, #0
 80003b2:	2200      	movs	r2, #0
 80003b4:	f001 ff4e 	bl	8002254 <osMessageQueuePut>
 80003b8:	e7ea      	b.n	8000390 <StartTaskSender+0xc>
	  else
		  osThreadYield();
 80003ba:	f001 fe9d 	bl	80020f8 <osThreadYield>
	  if (osMessageQueueGet(myQueueHandle, &data, NULL, 2000) != osOK)
 80003be:	e7e7      	b.n	8000390 <StartTaskSender+0xc>
 80003c0:	200000cc 	.word	0x200000cc

080003c4 <StartTaskReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReceiver */
void StartTaskReceiver(void *argument)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08c      	sub	sp, #48	@ 0x30
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	char msg[30];

  /* Infinite loop */
  for(;;)
  {
	  threadState = osThreadGetState(myTaskSenderHandle);
 80003cc:	4b13      	ldr	r3, [pc, #76]	@ (800041c <StartTaskReceiver+0x58>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fe55 	bl	8002080 <osThreadGetState>
 80003d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  if (threadState == osThreadBlocked)
 80003d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003da:	2b03      	cmp	r3, #3
 80003dc:	d106      	bne.n	80003ec <StartTaskReceiver+0x28>
		  sprintf(msg, "Empty\n");
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	490f      	ldr	r1, [pc, #60]	@ (8000420 <StartTaskReceiver+0x5c>)
 80003e4:	4618      	mov	r0, r3
 80003e6:	f004 fd5f 	bl	8004ea8 <siprintf>
 80003ea:	e005      	b.n	80003f8 <StartTaskReceiver+0x34>
	  else
		  sprintf(msg, "Available\n");
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	490c      	ldr	r1, [pc, #48]	@ (8000424 <StartTaskReceiver+0x60>)
 80003f2:	4618      	mov	r0, r3
 80003f4:	f004 fd58 	bl	8004ea8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)strlen(msg), 10);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff fea7 	bl	8000150 <strlen>
 8000402:	4603      	mov	r3, r0
 8000404:	b29a      	uxth	r2, r3
 8000406:	f107 010c 	add.w	r1, r7, #12
 800040a:	230a      	movs	r3, #10
 800040c:	4806      	ldr	r0, [pc, #24]	@ (8000428 <StartTaskReceiver+0x64>)
 800040e:	f001 fb45 	bl	8001a9c <HAL_UART_Transmit>
	  osDelay(500);
 8000412:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000416:	f001 fe8f 	bl	8002138 <osDelay>
	  threadState = osThreadGetState(myTaskSenderHandle);
 800041a:	e7d7      	b.n	80003cc <StartTaskReceiver+0x8>
 800041c:	200000c4 	.word	0x200000c4
 8000420:	08005904 	.word	0x08005904
 8000424:	0800590c 	.word	0x0800590c
 8000428:	2000007c 	.word	0x2000007c

0800042c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	@ (800044c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d101      	bne.n	8000442 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800043e:	f000 f9a5 	bl	800078c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40012c00 	.word	0x40012c00

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <Error_Handler+0x8>

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <HAL_MspInit+0x68>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a17      	ldr	r2, [pc, #92]	@ (80004c4 <HAL_MspInit+0x68>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_MspInit+0x68>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <HAL_MspInit+0x68>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a11      	ldr	r2, [pc, #68]	@ (80004c4 <HAL_MspInit+0x68>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <HAL_MspInit+0x68>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	210f      	movs	r1, #15
 8000496:	f06f 0001 	mvn.w	r0, #1
 800049a:	f000 fa48 	bl	800092e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049e:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <HAL_MspInit+0x6c>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	4a04      	ldr	r2, [pc, #16]	@ (80004c8 <HAL_MspInit+0x6c>)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010000 	.word	0x40010000

080004cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000554 <HAL_UART_MspInit+0x88>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d12f      	bne.n	800054c <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <HAL_UART_MspInit+0x8c>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a19      	ldr	r2, [pc, #100]	@ (8000558 <HAL_UART_MspInit+0x8c>)
 80004f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f6:	61d3      	str	r3, [r2, #28]
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <HAL_UART_MspInit+0x8c>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <HAL_UART_MspInit+0x8c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <HAL_UART_MspInit+0x8c>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <HAL_UART_MspInit+0x8c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800051c:	2304      	movs	r3, #4
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	480b      	ldr	r0, [pc, #44]	@ (800055c <HAL_UART_MspInit+0x90>)
 8000530:	f000 fa28 	bl	8000984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000534:	2308      	movs	r3, #8
 8000536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4619      	mov	r1, r3
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <HAL_UART_MspInit+0x90>)
 8000548:	f000 fa1c 	bl	8000984 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40004400 	.word	0x40004400
 8000558:	40021000 	.word	0x40021000
 800055c:	40010800 	.word	0x40010800

08000560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000570:	2300      	movs	r3, #0
 8000572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000576:	4b2e      	ldr	r3, [pc, #184]	@ (8000630 <HAL_InitTick+0xd0>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a2d      	ldr	r2, [pc, #180]	@ (8000630 <HAL_InitTick+0xd0>)
 800057c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b2b      	ldr	r3, [pc, #172]	@ (8000630 <HAL_InitTick+0xd0>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800058e:	f107 020c 	add.w	r2, r7, #12
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	4611      	mov	r1, r2
 8000598:	4618      	mov	r0, r3
 800059a:	f000 ffa3 	bl	80014e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800059e:	f000 ff8d 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 80005a2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a6:	4a23      	ldr	r2, [pc, #140]	@ (8000634 <HAL_InitTick+0xd4>)
 80005a8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ac:	0c9b      	lsrs	r3, r3, #18
 80005ae:	3b01      	subs	r3, #1
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <HAL_InitTick+0xd8>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <HAL_InitTick+0xdc>)
 80005b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <HAL_InitTick+0xd8>)
 80005ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005be:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000638 <HAL_InitTick+0xd8>)
 80005c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <HAL_InitTick+0xd8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <HAL_InitTick+0xd8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <HAL_InitTick+0xd8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80005d8:	4817      	ldr	r0, [pc, #92]	@ (8000638 <HAL_InitTick+0xd8>)
 80005da:	f000 ffd1 	bl	8001580 <HAL_TIM_Base_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80005e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d11b      	bne.n	8000624 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80005ec:	4812      	ldr	r0, [pc, #72]	@ (8000638 <HAL_InitTick+0xd8>)
 80005ee:	f001 f81f 	bl	8001630 <HAL_TIM_Base_Start_IT>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80005f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d111      	bne.n	8000624 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000600:	2019      	movs	r0, #25
 8000602:	f000 f9b0 	bl	8000966 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d808      	bhi.n	800061e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	2019      	movs	r0, #25
 8000612:	f000 f98c 	bl	800092e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000616:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <HAL_InitTick+0xe0>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	e002      	b.n	8000624 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000628:	4618      	mov	r0, r3
 800062a:	3730      	adds	r7, #48	@ 0x30
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	431bde83 	.word	0x431bde83
 8000638:	200000d0 	.word	0x200000d0
 800063c:	40012c00 	.word	0x40012c00
 8000640:	20000004 	.word	0x20000004

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <NMI_Handler+0x4>

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <MemManage_Handler+0x4>

0800065c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <UsageFault_Handler+0x4>

0800066c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <TIM1_UP_IRQHandler+0x10>)
 800067e:	f001 f829 	bl	80016d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000d0 	.word	0x200000d0

0800068c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000690:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000694:	f000 fb12 	bl	8000cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f004 fc74 	bl	8004fb8 <__errno>
 80006d0:	4603      	mov	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <_sbrk+0x64>)
 80006ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20005000 	.word	0x20005000
 80006fc:	00000400 	.word	0x00000400
 8000700:	20000118 	.word	0x20000118
 8000704:	20001c50 	.word	0x20001c50

08000708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff fff8 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071a:	490c      	ldr	r1, [pc, #48]	@ (800074c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <LoopFillZerobss+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000730:	4c09      	ldr	r4, [pc, #36]	@ (8000758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f004 fc41 	bl	8004fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fd0d 	bl	8000160 <main>
  bx lr
 8000746:	4770      	bx	lr
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000750:	08005a00 	.word	0x08005a00
  ldr r2, =_sbss
 8000754:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000758:	20001c50 	.word	0x20001c50

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>
	...

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HAL_Init+0x28>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	@ (8000788 <HAL_Init+0x28>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f8d1 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	200f      	movs	r0, #15
 8000778:	f7ff fef2 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff fe6e 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a03      	ldr	r2, [pc, #12]	@ (80007ac <HAL_IncTick+0x20>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000008 	.word	0x20000008
 80007ac:	2000011c 	.word	0x2000011c

080007b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <HAL_GetTick+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	2000011c 	.word	0x2000011c

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4906      	ldr	r1, [pc, #24]	@ (800085c <__NVIC_EnableIRQ+0x34>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	@ (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	@ 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	@ 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff4f 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff64 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ffb2 	bl	80008b4 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff81 	bl	8000860 <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff57 	bl	8000828 <__NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b480      	push	{r7}
 8000986:	b08b      	sub	sp, #44	@ 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000996:	e169      	b.n	8000c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000998:	2201      	movs	r2, #1
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	f040 8158 	bne.w	8000c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000c24 <HAL_GPIO_Init+0x2a0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d05e      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009c0:	4a98      	ldr	r2, [pc, #608]	@ (8000c24 <HAL_GPIO_Init+0x2a0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d875      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009c6:	4a98      	ldr	r2, [pc, #608]	@ (8000c28 <HAL_GPIO_Init+0x2a4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d058      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009cc:	4a96      	ldr	r2, [pc, #600]	@ (8000c28 <HAL_GPIO_Init+0x2a4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d86f      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009d2:	4a96      	ldr	r2, [pc, #600]	@ (8000c2c <HAL_GPIO_Init+0x2a8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d052      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009d8:	4a94      	ldr	r2, [pc, #592]	@ (8000c2c <HAL_GPIO_Init+0x2a8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d869      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009de:	4a94      	ldr	r2, [pc, #592]	@ (8000c30 <HAL_GPIO_Init+0x2ac>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d04c      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009e4:	4a92      	ldr	r2, [pc, #584]	@ (8000c30 <HAL_GPIO_Init+0x2ac>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d863      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009ea:	4a92      	ldr	r2, [pc, #584]	@ (8000c34 <HAL_GPIO_Init+0x2b0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d046      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009f0:	4a90      	ldr	r2, [pc, #576]	@ (8000c34 <HAL_GPIO_Init+0x2b0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d85d      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d82a      	bhi.n	8000a50 <HAL_GPIO_Init+0xcc>
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d859      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000a04 <HAL_GPIO_Init+0x80>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a7f 	.word	0x08000a7f
 8000a08:	08000a59 	.word	0x08000a59
 8000a0c:	08000a6b 	.word	0x08000a6b
 8000a10:	08000aad 	.word	0x08000aad
 8000a14:	08000ab3 	.word	0x08000ab3
 8000a18:	08000ab3 	.word	0x08000ab3
 8000a1c:	08000ab3 	.word	0x08000ab3
 8000a20:	08000ab3 	.word	0x08000ab3
 8000a24:	08000ab3 	.word	0x08000ab3
 8000a28:	08000ab3 	.word	0x08000ab3
 8000a2c:	08000ab3 	.word	0x08000ab3
 8000a30:	08000ab3 	.word	0x08000ab3
 8000a34:	08000ab3 	.word	0x08000ab3
 8000a38:	08000ab3 	.word	0x08000ab3
 8000a3c:	08000ab3 	.word	0x08000ab3
 8000a40:	08000ab3 	.word	0x08000ab3
 8000a44:	08000ab3 	.word	0x08000ab3
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000a75 	.word	0x08000a75
 8000a50:	4a79      	ldr	r2, [pc, #484]	@ (8000c38 <HAL_GPIO_Init+0x2b4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a56:	e02c      	b.n	8000ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e029      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	3304      	adds	r3, #4
 8000a66:	623b      	str	r3, [r7, #32]
          break;
 8000a68:	e024      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	3308      	adds	r3, #8
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e01f      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	330c      	adds	r3, #12
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e01a      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a86:	2304      	movs	r3, #4
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e013      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d105      	bne.n	8000aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a94:	2308      	movs	r3, #8
 8000a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	611a      	str	r2, [r3, #16]
          break;
 8000a9e:	e009      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	615a      	str	r2, [r3, #20]
          break;
 8000aaa:	e003      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e000      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          break;
 8000ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2bff      	cmp	r3, #255	@ 0xff
 8000ab8:	d801      	bhi.n	8000abe <HAL_GPIO_Init+0x13a>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	e001      	b.n	8000ac2 <HAL_GPIO_Init+0x13e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	2bff      	cmp	r3, #255	@ 0xff
 8000ac8:	d802      	bhi.n	8000ad0 <HAL_GPIO_Init+0x14c>
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	e002      	b.n	8000ad6 <HAL_GPIO_Init+0x152>
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	3b08      	subs	r3, #8
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	210f      	movs	r1, #15
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	6a39      	ldr	r1, [r7, #32]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	431a      	orrs	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b04:	4b4d      	ldr	r3, [pc, #308]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a4c      	ldr	r2, [pc, #304]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b4a      	ldr	r3, [pc, #296]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b1c:	4a48      	ldr	r2, [pc, #288]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a40      	ldr	r2, [pc, #256]	@ (8000c44 <HAL_GPIO_Init+0x2c0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d013      	beq.n	8000b70 <HAL_GPIO_Init+0x1ec>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c48 <HAL_GPIO_Init+0x2c4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d00d      	beq.n	8000b6c <HAL_GPIO_Init+0x1e8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a3e      	ldr	r2, [pc, #248]	@ (8000c4c <HAL_GPIO_Init+0x2c8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d007      	beq.n	8000b68 <HAL_GPIO_Init+0x1e4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d101      	bne.n	8000b64 <HAL_GPIO_Init+0x1e0>
 8000b60:	2303      	movs	r3, #3
 8000b62:	e006      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b64:	2304      	movs	r3, #4
 8000b66:	e004      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b70:	2300      	movs	r3, #0
 8000b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b74:	f002 0203 	and.w	r2, r2, #3
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b82:	492f      	ldr	r1, [pc, #188]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	492c      	ldr	r1, [pc, #176]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	608b      	str	r3, [r1, #8]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000baa:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4928      	ldr	r1, [pc, #160]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	4922      	ldr	r1, [pc, #136]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60cb      	str	r3, [r1, #12]
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	491e      	ldr	r1, [pc, #120]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	4918      	ldr	r1, [pc, #96]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4914      	ldr	r1, [pc, #80]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d021      	beq.n	8000c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	490e      	ldr	r1, [pc, #56]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	600b      	str	r3, [r1, #0]
 8000c20:	e021      	b.n	8000c66 <HAL_GPIO_Init+0x2e2>
 8000c22:	bf00      	nop
 8000c24:	10320000 	.word	0x10320000
 8000c28:	10310000 	.word	0x10310000
 8000c2c:	10220000 	.word	0x10220000
 8000c30:	10210000 	.word	0x10210000
 8000c34:	10120000 	.word	0x10120000
 8000c38:	10110000 	.word	0x10110000
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40011400 	.word	0x40011400
 8000c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_GPIO_Init+0x304>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4909      	ldr	r1, [pc, #36]	@ (8000c88 <HAL_GPIO_Init+0x304>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	3301      	adds	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c72:	fa22 f303 	lsr.w	r3, r2, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f47f ae8e 	bne.w	8000998 <HAL_GPIO_Init+0x14>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	372c      	adds	r7, #44	@ 0x2c
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c9c:	787b      	ldrb	r3, [r7, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ca8:	e003      	b.n	8000cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	041a      	lsls	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	611a      	str	r2, [r3, #16]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f806 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e272      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 8087 	beq.w	8000e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d20:	4b92      	ldr	r3, [pc, #584]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d00c      	beq.n	8000d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d2c:	4b8f      	ldr	r3, [pc, #572]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d112      	bne.n	8000d5e <HAL_RCC_OscConfig+0x5e>
 8000d38:	4b8c      	ldr	r3, [pc, #560]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d44:	d10b      	bne.n	8000d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d46:	4b89      	ldr	r3, [pc, #548]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d06c      	beq.n	8000e2c <HAL_RCC_OscConfig+0x12c>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d168      	bne.n	8000e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e24c      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d66:	d106      	bne.n	8000d76 <HAL_RCC_OscConfig+0x76>
 8000d68:	4b80      	ldr	r3, [pc, #512]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e02e      	b.n	8000dd4 <HAL_RCC_OscConfig+0xd4>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x98>
 8000d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a7a      	ldr	r2, [pc, #488]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	4b78      	ldr	r3, [pc, #480]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a77      	ldr	r2, [pc, #476]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e01d      	b.n	8000dd4 <HAL_RCC_OscConfig+0xd4>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000da0:	d10c      	bne.n	8000dbc <HAL_RCC_OscConfig+0xbc>
 8000da2:	4b72      	ldr	r3, [pc, #456]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a71      	ldr	r2, [pc, #452]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	4b6f      	ldr	r3, [pc, #444]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a6e      	ldr	r2, [pc, #440]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e00b      	b.n	8000dd4 <HAL_RCC_OscConfig+0xd4>
 8000dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b68      	ldr	r3, [pc, #416]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a67      	ldr	r2, [pc, #412]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d013      	beq.n	8000e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fce8 	bl	80007b0 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fce4 	bl	80007b0 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	@ 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e200      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0xe4>
 8000e02:	e014      	b.n	8000e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fcd4 	bl	80007b0 <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fcd0 	bl	80007b0 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b64      	cmp	r3, #100	@ 0x64
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e1ec      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1e:	4b53      	ldr	r3, [pc, #332]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f0      	bne.n	8000e0c <HAL_RCC_OscConfig+0x10c>
 8000e2a:	e000      	b.n	8000e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d063      	beq.n	8000f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00b      	beq.n	8000e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e46:	4b49      	ldr	r3, [pc, #292]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d11c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x18c>
 8000e52:	4b46      	ldr	r3, [pc, #280]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d116      	bne.n	8000e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	4b43      	ldr	r3, [pc, #268]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d005      	beq.n	8000e76 <HAL_RCC_OscConfig+0x176>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d001      	beq.n	8000e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e1c0      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4939      	ldr	r1, [pc, #228]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8a:	e03a      	b.n	8000f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d020      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e94:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <HAL_RCC_OscConfig+0x270>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fc89 	bl	80007b0 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea2:	f7ff fc85 	bl	80007b0 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e1a1      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4927      	ldr	r1, [pc, #156]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]
 8000ed4:	e015      	b.n	8000f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc68 	bl	80007b0 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fc64 	bl	80007b0 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e180      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d03a      	beq.n	8000f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d019      	beq.n	8000f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <HAL_RCC_OscConfig+0x274>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fc48 	bl	80007b0 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff fc44 	bl	80007b0 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e160      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <HAL_RCC_OscConfig+0x26c>)
 8000f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0f0      	beq.n	8000f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f000 fafe 	bl	8001544 <RCC_Delay>
 8000f48:	e01c      	b.n	8000f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_RCC_OscConfig+0x274>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f50:	f7ff fc2e 	bl	80007b0 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f56:	e00f      	b.n	8000f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f58:	f7ff fc2a 	bl	80007b0 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d908      	bls.n	8000f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e146      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	42420000 	.word	0x42420000
 8000f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f78:	4b92      	ldr	r3, [pc, #584]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1e9      	bne.n	8000f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80a6 	beq.w	80010de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f96:	4b8b      	ldr	r3, [pc, #556]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10d      	bne.n	8000fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b88      	ldr	r3, [pc, #544]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a87      	ldr	r2, [pc, #540]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b85      	ldr	r3, [pc, #532]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbe:	4b82      	ldr	r3, [pc, #520]	@ (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d118      	bne.n	8000ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fca:	4b7f      	ldr	r3, [pc, #508]	@ (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a7e      	ldr	r2, [pc, #504]	@ (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fbeb 	bl	80007b0 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fde:	f7ff fbe7 	bl	80007b0 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b64      	cmp	r3, #100	@ 0x64
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e103      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	4b75      	ldr	r3, [pc, #468]	@ (80011c8 <HAL_RCC_OscConfig+0x4c8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d106      	bne.n	8001012 <HAL_RCC_OscConfig+0x312>
 8001004:	4b6f      	ldr	r3, [pc, #444]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a6e      	ldr	r2, [pc, #440]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6213      	str	r3, [r2, #32]
 8001010:	e02d      	b.n	800106e <HAL_RCC_OscConfig+0x36e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x334>
 800101a:	4b6a      	ldr	r3, [pc, #424]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a69      	ldr	r2, [pc, #420]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b67      	ldr	r3, [pc, #412]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a66      	ldr	r2, [pc, #408]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	e01c      	b.n	800106e <HAL_RCC_OscConfig+0x36e>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d10c      	bne.n	8001056 <HAL_RCC_OscConfig+0x356>
 800103c:	4b61      	ldr	r3, [pc, #388]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a60      	ldr	r2, [pc, #384]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6213      	str	r3, [r2, #32]
 8001048:	4b5e      	ldr	r3, [pc, #376]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a5d      	ldr	r2, [pc, #372]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	e00b      	b.n	800106e <HAL_RCC_OscConfig+0x36e>
 8001056:	4b5b      	ldr	r3, [pc, #364]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a5a      	ldr	r2, [pc, #360]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	6213      	str	r3, [r2, #32]
 8001062:	4b58      	ldr	r3, [pc, #352]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a57      	ldr	r2, [pc, #348]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d015      	beq.n	80010a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb9b 	bl	80007b0 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb97 	bl	80007b0 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e0b1      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	4b4b      	ldr	r3, [pc, #300]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0ee      	beq.n	800107e <HAL_RCC_OscConfig+0x37e>
 80010a0:	e014      	b.n	80010cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a2:	f7ff fb85 	bl	80007b0 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	e00a      	b.n	80010c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010aa:	f7ff fb81 	bl	80007b0 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e09b      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	4b40      	ldr	r3, [pc, #256]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ee      	bne.n	80010aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d105      	bne.n	80010de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d2:	4b3c      	ldr	r3, [pc, #240]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a3b      	ldr	r2, [pc, #236]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8087 	beq.w	80011f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e8:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d061      	beq.n	80011b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d146      	bne.n	800118a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fc:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <HAL_RCC_OscConfig+0x4cc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fb55 	bl	80007b0 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110a:	f7ff fb51 	bl	80007b0 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e06d      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111c:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001130:	d108      	bne.n	8001144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001132:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	4921      	ldr	r1, [pc, #132]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a19      	ldr	r1, [r3, #32]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001154:	430b      	orrs	r3, r1
 8001156:	491b      	ldr	r1, [pc, #108]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_RCC_OscConfig+0x4cc>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fb25 	bl	80007b0 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff fb21 	bl	80007b0 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e03d      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x46a>
 8001188:	e035      	b.n	80011f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_RCC_OscConfig+0x4cc>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fb0e 	bl	80007b0 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff fb0a 	bl	80007b0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e026      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x498>
 80011b6:	e01e      	b.n	80011f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d107      	bne.n	80011d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e019      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40007000 	.word	0x40007000
 80011cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_RCC_OscConfig+0x500>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0d0      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b6a      	ldr	r3, [pc, #424]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d910      	bls.n	8001248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b67      	ldr	r3, [pc, #412]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 0207 	bic.w	r2, r3, #7
 800122e:	4965      	ldr	r1, [pc, #404]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b63      	ldr	r3, [pc, #396]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0b8      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001260:	4b59      	ldr	r3, [pc, #356]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a58      	ldr	r2, [pc, #352]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800126a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001278:	4b53      	ldr	r3, [pc, #332]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a52      	ldr	r2, [pc, #328]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001284:	4b50      	ldr	r3, [pc, #320]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	494d      	ldr	r1, [pc, #308]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d040      	beq.n	8001324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b47      	ldr	r3, [pc, #284]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d115      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e07f      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	4b41      	ldr	r3, [pc, #260]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e073      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	4b3d      	ldr	r3, [pc, #244]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e06b      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f023 0203 	bic.w	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4936      	ldr	r1, [pc, #216]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff fa5c 	bl	80007b0 <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff fa58 	bl	80007b0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e053      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 020c 	and.w	r2, r3, #12
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	429a      	cmp	r2, r3
 8001322:	d1eb      	bne.n	80012fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d210      	bcs.n	8001354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0207 	bic.w	r2, r3, #7
 800133a:	4922      	ldr	r1, [pc, #136]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e032      	b.n	80013ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4916      	ldr	r1, [pc, #88]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	490e      	ldr	r1, [pc, #56]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001392:	f000 f821 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 8001396:	4602      	mov	r2, r0
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	490a      	ldr	r1, [pc, #40]	@ (80013cc <HAL_RCC_ClockConfig+0x1c8>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	fa22 f303 	lsr.w	r3, r2, r3
 80013aa:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <HAL_RCC_ClockConfig+0x1cc>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_RCC_ClockConfig+0x1d0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8d4 	bl	8000560 <HAL_InitTick>

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	08005990 	.word	0x08005990
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <HAL_RCC_GetSysClockFreq+0x94>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d002      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x30>
 8001402:	2b08      	cmp	r3, #8
 8001404:	d003      	beq.n	800140e <HAL_RCC_GetSysClockFreq+0x36>
 8001406:	e027      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001408:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_RCC_GetSysClockFreq+0x98>)
 800140a:	613b      	str	r3, [r7, #16]
      break;
 800140c:	e027      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d010      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_RCC_GetSysClockFreq+0x94>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	0c5b      	lsrs	r3, r3, #17
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <HAL_RCC_GetSysClockFreq+0x98>)
 800143a:	fb03 f202 	mul.w	r2, r3, r2
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	e004      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <HAL_RCC_GetSysClockFreq+0xa4>)
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	613b      	str	r3, [r7, #16]
      break;
 8001456:	e002      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_RCC_GetSysClockFreq+0x98>)
 800145a:	613b      	str	r3, [r7, #16]
      break;
 800145c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800145e:	693b      	ldr	r3, [r7, #16]
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	007a1200 	.word	0x007a1200
 8001474:	080059a8 	.word	0x080059a8
 8001478:	080059b8 	.word	0x080059b8
 800147c:	003d0900 	.word	0x003d0900

08001480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001484:	4b02      	ldr	r3, [pc, #8]	@ (8001490 <HAL_RCC_GetHCLKFreq+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001498:	f7ff fff2 	bl	8001480 <HAL_RCC_GetHCLKFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4903      	ldr	r1, [pc, #12]	@ (80014b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014aa:	5ccb      	ldrb	r3, [r1, r3]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	080059a0 	.word	0x080059a0

080014bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014c0:	f7ff ffde 	bl	8001480 <HAL_RCC_GetHCLKFreq>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0adb      	lsrs	r3, r3, #11
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4903      	ldr	r1, [pc, #12]	@ (80014e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	080059a0 	.word	0x080059a0

080014e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	220f      	movs	r2, #15
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_RCC_GetClockConfig+0x58>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_RCC_GetClockConfig+0x58>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_RCC_GetClockConfig+0x58>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_RCC_GetClockConfig+0x58>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0207 	and.w	r2, r3, #7
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	40022000 	.word	0x40022000

08001544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <RCC_Delay+0x34>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <RCC_Delay+0x38>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0a5b      	lsrs	r3, r3, #9
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001560:	bf00      	nop
  }
  while (Delay --);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	60fa      	str	r2, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f9      	bne.n	8001560 <RCC_Delay+0x1c>
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000000 	.word	0x20000000
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e041      	b.n	8001616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f839 	bl	800161e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3304      	adds	r3, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f000 f99c 	bl	80018fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d001      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e03a      	b.n	80016be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a18      	ldr	r2, [pc, #96]	@ (80016c8 <HAL_TIM_Base_Start_IT+0x98>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00e      	beq.n	8001688 <HAL_TIM_Base_Start_IT+0x58>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001672:	d009      	beq.n	8001688 <HAL_TIM_Base_Start_IT+0x58>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <HAL_TIM_Base_Start_IT+0x9c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d004      	beq.n	8001688 <HAL_TIM_Base_Start_IT+0x58>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d010      	beq.n	80016bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0201 	orr.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016aa:	e007      	b.n	80016bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	40000400 	.word	0x40000400
 80016d0:	40000800 	.word	0x40000800

080016d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d020      	beq.n	8001738 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0202 	mvn.w	r2, #2
 8001708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8d1 	bl	80018c6 <HAL_TIM_IC_CaptureCallback>
 8001724:	e005      	b.n	8001732 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f8c4 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8d3 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d020      	beq.n	8001784 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01b      	beq.n	8001784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0204 	mvn.w	r2, #4
 8001754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f8ab 	bl	80018c6 <HAL_TIM_IC_CaptureCallback>
 8001770:	e005      	b.n	800177e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f89e 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f8ad 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d020      	beq.n	80017d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01b      	beq.n	80017d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0208 	mvn.w	r2, #8
 80017a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2204      	movs	r2, #4
 80017a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f885 	bl	80018c6 <HAL_TIM_IC_CaptureCallback>
 80017bc:	e005      	b.n	80017ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f878 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f887 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d020      	beq.n	800181c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01b      	beq.n	800181c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0210 	mvn.w	r2, #16
 80017ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2208      	movs	r2, #8
 80017f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f85f 	bl	80018c6 <HAL_TIM_IC_CaptureCallback>
 8001808:	e005      	b.n	8001816 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f852 	bl	80018b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f861 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00c      	beq.n	8001840 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f06f 0201 	mvn.w	r2, #1
 8001838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7fe fdf6 	bl	800042c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800185c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f8c3 	bl	80019ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f831 	bl	80018ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0220 	mvn.w	r2, #32
 80018a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f896 	bl	80019d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a2f      	ldr	r2, [pc, #188]	@ (80019cc <TIM_Base_SetConfig+0xd0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00b      	beq.n	800192c <TIM_Base_SetConfig+0x30>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191a:	d007      	beq.n	800192c <TIM_Base_SetConfig+0x30>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a2c      	ldr	r2, [pc, #176]	@ (80019d0 <TIM_Base_SetConfig+0xd4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d003      	beq.n	800192c <TIM_Base_SetConfig+0x30>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a2b      	ldr	r2, [pc, #172]	@ (80019d4 <TIM_Base_SetConfig+0xd8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d108      	bne.n	800193e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a22      	ldr	r2, [pc, #136]	@ (80019cc <TIM_Base_SetConfig+0xd0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00b      	beq.n	800195e <TIM_Base_SetConfig+0x62>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800194c:	d007      	beq.n	800195e <TIM_Base_SetConfig+0x62>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a1f      	ldr	r2, [pc, #124]	@ (80019d0 <TIM_Base_SetConfig+0xd4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d003      	beq.n	800195e <TIM_Base_SetConfig+0x62>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <TIM_Base_SetConfig+0xd8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d108      	bne.n	8001970 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <TIM_Base_SetConfig+0xd0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d103      	bne.n	80019a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f023 0201 	bic.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]
  }
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40000800 	.word	0x40000800

080019d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e042      	b.n	8001a94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7fe fd52 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	@ 0x24
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f971 	bl	8001d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d175      	bne.n	8001ba8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_UART_Transmit+0x2c>
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e06e      	b.n	8001baa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2221      	movs	r2, #33	@ 0x21
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ada:	f7fe fe69 	bl	80007b0 <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af4:	d108      	bne.n	8001b08 <HAL_UART_Transmit+0x6c>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d104      	bne.n	8001b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	e003      	b.n	8001b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b10:	e02e      	b.n	8001b70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2180      	movs	r1, #128	@ 0x80
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f848 	bl	8001bb2 <UART_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e03a      	b.n	8001baa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10b      	bne.n	8001b52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	e007      	b.n	8001b62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1cb      	bne.n	8001b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2200      	movs	r2, #0
 8001b82:	2140      	movs	r1, #64	@ 0x40
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 f814 	bl	8001bb2 <UART_WaitOnFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bc2:	e03b      	b.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bca:	d037      	beq.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bcc:	f7fe fdf0 	bl	80007b0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	6a3a      	ldr	r2, [r7, #32]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d302      	bcc.n	8001be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e03a      	b.n	8001c5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b80      	cmp	r3, #128	@ 0x80
 8001bf8:	d020      	beq.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b40      	cmp	r3, #64	@ 0x40
 8001bfe:	d01d      	beq.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d116      	bne.n	8001c3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f81d 	bl	8001c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e00f      	b.n	8001c5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4013      	ands	r3, r2
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d0b4      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b095      	sub	sp, #84	@ 0x54
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	330c      	adds	r3, #12
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c76:	e853 3f00 	ldrex	r3, [r3]
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c94:	e841 2300 	strex	r3, r2, [r1]
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e5      	bne.n	8001c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3314      	adds	r3, #20
 8001ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	e853 3f00 	ldrex	r3, [r3]
 8001cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3314      	adds	r3, #20
 8001cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc8:	e841 2300 	strex	r3, r2, [r1]
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e5      	bne.n	8001ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d119      	bne.n	8001d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	e853 3f00 	ldrex	r3, [r3]
 8001cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f023 0310 	bic.w	r3, r3, #16
 8001cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	330c      	adds	r3, #12
 8001cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cfc:	61ba      	str	r2, [r7, #24]
 8001cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d00:	6979      	ldr	r1, [r7, #20]
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	e841 2300 	strex	r3, r2, [r1]
 8001d08:	613b      	str	r3, [r7, #16]
   return(result);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e5      	bne.n	8001cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d1e:	bf00      	nop
 8001d20:	3754      	adds	r7, #84	@ 0x54
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001d62:	f023 030c 	bic.w	r3, r3, #12
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e3c <UART_SetConfig+0x114>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d103      	bne.n	8001d98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d90:	f7ff fb94 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	e002      	b.n	8001d9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d98:	f7ff fb7c 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8001d9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009a      	lsls	r2, r3, #2
 8001da8:	441a      	add	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <UART_SetConfig+0x118>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	0119      	lsls	r1, r3, #4
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009a      	lsls	r2, r3, #2
 8001dc8:	441a      	add	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <UART_SetConfig+0x118>)
 8001dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2064      	movs	r0, #100	@ 0x64
 8001dde:	fb00 f303 	mul.w	r3, r0, r3
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	3332      	adds	r3, #50	@ 0x32
 8001de8:	4a15      	ldr	r2, [pc, #84]	@ (8001e40 <UART_SetConfig+0x118>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001df4:	4419      	add	r1, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009a      	lsls	r2, r3, #2
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <UART_SetConfig+0x118>)
 8001e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2064      	movs	r0, #100	@ 0x64
 8001e16:	fb00 f303 	mul.w	r3, r0, r3
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	3332      	adds	r3, #50	@ 0x32
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <UART_SetConfig+0x118>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	440a      	add	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	51eb851f 	.word	0x51eb851f

08001e44 <__NVIC_SetPriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	@ (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	@ (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <SysTick_Handler+0x1c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ea0:	f001 ffea 	bl	8003e78 <xTaskGetSchedulerState>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001eaa:	f002 fd8d 	bl	80049c8 <xPortSysTickHandler>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f06f 0004 	mvn.w	r0, #4
 8001ec2:	f7ff ffbf 	bl	8001e44 <__NVIC_SetPriority>
#endif
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed2:	f3ef 8305 	mrs	r3, IPSR
 8001ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ede:	f06f 0305 	mvn.w	r3, #5
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	e00c      	b.n	8001f00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <osKernelInitialize+0x40>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <osKernelInitialize+0x40>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	e002      	b.n	8001f00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000120 	.word	0x20000120

08001f10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f16:	f3ef 8305 	mrs	r3, IPSR
 8001f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f22:	f06f 0305 	mvn.w	r3, #5
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	e010      	b.n	8001f4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <osKernelStart+0x48>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d109      	bne.n	8001f46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f32:	f7ff ffc1 	bl	8001eb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <osKernelStart+0x48>)
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f3c:	f001 fb3c 	bl	80035b8 <vTaskStartScheduler>
      stat = osOK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	e002      	b.n	8001f4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000120 	.word	0x20000120

08001f5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08e      	sub	sp, #56	@ 0x38
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f6c:	f3ef 8305 	mrs	r3, IPSR
 8001f70:	617b      	str	r3, [r7, #20]
  return(result);
 8001f72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d17e      	bne.n	8002076 <osThreadNew+0x11a>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d07b      	beq.n	8002076 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f82:	2318      	movs	r3, #24
 8001f84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d045      	beq.n	8002022 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <osThreadNew+0x48>
        name = attr->name;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <osThreadNew+0x6e>
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b38      	cmp	r3, #56	@ 0x38
 8001fbc:	d805      	bhi.n	8001fca <osThreadNew+0x6e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <osThreadNew+0x72>
        return (NULL);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e054      	b.n	8002078 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <osThreadNew+0xa8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2ba7      	cmp	r3, #167	@ 0xa7
 8001fec:	d90a      	bls.n	8002004 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <osThreadNew+0xa8>
        mem = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e010      	b.n	8002026 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10c      	bne.n	8002026 <osThreadNew+0xca>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d108      	bne.n	8002026 <osThreadNew+0xca>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <osThreadNew+0xca>
          mem = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e001      	b.n	8002026 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d110      	bne.n	800204e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002034:	9202      	str	r2, [sp, #8]
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	6a3a      	ldr	r2, [r7, #32]
 8002040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f001 f85c 	bl	8003100 <xTaskCreateStatic>
 8002048:	4603      	mov	r3, r0
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e013      	b.n	8002076 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d110      	bne.n	8002076 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	b29a      	uxth	r2, r3
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f001 f8aa 	bl	80031c0 <xTaskCreate>
 800206c:	4603      	mov	r3, r0
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <osThreadNew+0x11a>
            hTask = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002076:	693b      	ldr	r3, [r7, #16]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3728      	adds	r7, #40	@ 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <osThreadGetState>:
  id = (osThreadId_t)xTaskGetCurrentTaskHandle();

  return (id);
}

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800208c:	f3ef 8305 	mrs	r3, IPSR
 8002090:	60fb      	str	r3, [r7, #12]
  return(result);
 8002092:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <osThreadGetState+0x1e>
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <osThreadGetState+0x26>
    state = osThreadError;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e022      	b.n	80020ec <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 80020a6:	6938      	ldr	r0, [r7, #16]
 80020a8:	f001 fa1e 	bl	80034e8 <eTaskGetState>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d818      	bhi.n	80020e4 <osThreadGetState+0x64>
 80020b2:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <osThreadGetState+0x38>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020cd 	.word	0x080020cd
 80020bc:	080020d3 	.word	0x080020d3
 80020c0:	080020d9 	.word	0x080020d9
 80020c4:	080020d9 	.word	0x080020d9
 80020c8:	080020df 	.word	0x080020df
      case eRunning:   state = osThreadRunning;    break;
 80020cc:	2302      	movs	r3, #2
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00c      	b.n	80020ec <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 80020d2:	2301      	movs	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e009      	b.n	80020ec <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 80020d8:	2303      	movs	r3, #3
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e006      	b.n	80020ec <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 80020de:	2304      	movs	r3, #4
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e003      	b.n	80020ec <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	bf00      	nop
    }
  }

  return (state);
 80020ec:	697b      	ldr	r3, [r7, #20]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop

080020f8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020fe:	f3ef 8305 	mrs	r3, IPSR
 8002102:	603b      	str	r3, [r7, #0]
  return(result);
 8002104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <osThreadYield+0x1a>
    stat = osErrorISR;
 800210a:	f06f 0305 	mvn.w	r3, #5
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	e009      	b.n	8002126 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <osThreadYield+0x3c>)
 8002118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed04 	.word	0xe000ed04

08002138 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002140:	f3ef 8305 	mrs	r3, IPSR
 8002144:	60bb      	str	r3, [r7, #8]
  return(result);
 8002146:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <osDelay+0x1c>
    stat = osErrorISR;
 800214c:	f06f 0305 	mvn.w	r3, #5
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e007      	b.n	8002164 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <osDelay+0x2c>
      vTaskDelay(ticks);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f001 f98c 	bl	800347c <vTaskDelay>
    }
  }

  return (stat);
 8002164:	68fb      	ldr	r3, [r7, #12]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	@ 0x28
 8002172:	af02      	add	r7, sp, #8
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800217e:	f3ef 8305 	mrs	r3, IPSR
 8002182:	613b      	str	r3, [r7, #16]
  return(result);
 8002184:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002186:	2b00      	cmp	r3, #0
 8002188:	d15f      	bne.n	800224a <osMessageQueueNew+0xdc>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05c      	beq.n	800224a <osMessageQueueNew+0xdc>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d059      	beq.n	800224a <osMessageQueueNew+0xdc>
    mem = -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d029      	beq.n	80021f6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d012      	beq.n	80021d0 <osMessageQueueNew+0x62>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b4f      	cmp	r3, #79	@ 0x4f
 80021b0:	d90e      	bls.n	80021d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <osMessageQueueNew+0x62>
        mem = 1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e014      	b.n	80021fa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d110      	bne.n	80021fa <osMessageQueueNew+0x8c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10c      	bne.n	80021fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <osMessageQueueNew+0x8c>
          mem = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	e001      	b.n	80021fa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10b      	bne.n	8002218 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2100      	movs	r1, #0
 800220a:	9100      	str	r1, [sp, #0]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fa2a 	bl	8002668 <xQueueGenericCreateStatic>
 8002214:	61f8      	str	r0, [r7, #28]
 8002216:	e008      	b.n	800222a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800221e:	2200      	movs	r2, #0
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fa9d 	bl	8002762 <xQueueGenericCreate>
 8002228:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00c      	beq.n	800224a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <osMessageQueueNew+0xd0>
        name = attr->name;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e001      	b.n	8002242 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002242:	6979      	ldr	r1, [r7, #20]
 8002244:	69f8      	ldr	r0, [r7, #28]
 8002246:	f000 feff 	bl	8003048 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800224a:	69fb      	ldr	r3, [r7, #28]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226c:	f3ef 8305 	mrs	r3, IPSR
 8002270:	617b      	str	r3, [r7, #20]
  return(result);
 8002272:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002274:	2b00      	cmp	r3, #0
 8002276:	d028      	beq.n	80022ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <osMessageQueuePut+0x36>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <osMessageQueuePut+0x36>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800228a:	f06f 0303 	mvn.w	r3, #3
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	e038      	b.n	8002304 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002296:	f107 0210 	add.w	r2, r7, #16
 800229a:	2300      	movs	r3, #0
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	69b8      	ldr	r0, [r7, #24]
 80022a0:	f000 fbc0 	bl	8002a24 <xQueueGenericSendFromISR>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d003      	beq.n	80022b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80022aa:	f06f 0302 	mvn.w	r3, #2
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	e028      	b.n	8002304 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d025      	beq.n	8002304 <osMessageQueuePut+0xb0>
 80022b8:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <osMessageQueuePut+0xbc>)
 80022ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	e01c      	b.n	8002304 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <osMessageQueuePut+0x82>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80022d6:	f06f 0303 	mvn.w	r3, #3
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	e012      	b.n	8002304 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80022de:	2300      	movs	r3, #0
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	69b8      	ldr	r0, [r7, #24]
 80022e6:	f000 fa9b 	bl	8002820 <xQueueGenericSend>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d009      	beq.n	8002304 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80022f6:	f06f 0301 	mvn.w	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	e002      	b.n	8002304 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80022fe:	f06f 0302 	mvn.w	r3, #2
 8002302:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002304:	69fb      	ldr	r3, [r7, #28]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000ed04 	.word	0xe000ed04

08002314 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800232a:	f3ef 8305 	mrs	r3, IPSR
 800232e:	617b      	str	r3, [r7, #20]
  return(result);
 8002330:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002332:	2b00      	cmp	r3, #0
 8002334:	d028      	beq.n	8002388 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <osMessageQueueGet+0x34>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <osMessageQueueGet+0x34>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002348:	f06f 0303 	mvn.w	r3, #3
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e037      	b.n	80023c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	461a      	mov	r2, r3
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	69b8      	ldr	r0, [r7, #24]
 800235e:	f000 fce1 	bl	8002d24 <xQueueReceiveFromISR>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d003      	beq.n	8002370 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002368:	f06f 0302 	mvn.w	r3, #2
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e027      	b.n	80023c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d024      	beq.n	80023c0 <osMessageQueueGet+0xac>
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <osMessageQueueGet+0xb8>)
 8002378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	e01b      	b.n	80023c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <osMessageQueueGet+0x80>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002394:	f06f 0303 	mvn.w	r3, #3
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	e011      	b.n	80023c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	69b8      	ldr	r0, [r7, #24]
 80023a2:	f000 fbdd 	bl	8002b60 <xQueueReceive>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d009      	beq.n	80023c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80023b2:	f06f 0301 	mvn.w	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	e002      	b.n	80023c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80023ba:	f06f 0302 	mvn.w	r3, #2
 80023be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80023c0:	69fb      	ldr	r3, [r7, #28]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000ed04 	.word	0xe000ed04

080023d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a06      	ldr	r2, [pc, #24]	@ (80023f8 <vApplicationGetIdleTaskMemory+0x28>)
 80023e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4a05      	ldr	r2, [pc, #20]	@ (80023fc <vApplicationGetIdleTaskMemory+0x2c>)
 80023e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000124 	.word	0x20000124
 80023fc:	200001cc 	.word	0x200001cc

08002400 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a07      	ldr	r2, [pc, #28]	@ (800242c <vApplicationGetTimerTaskMemory+0x2c>)
 8002410:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <vApplicationGetTimerTaskMemory+0x30>)
 8002416:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800241e:	601a      	str	r2, [r3, #0]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	200003cc 	.word	0x200003cc
 8002430:	20000474 	.word	0x20000474

08002434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f103 0208 	add.w	r2, r3, #8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f103 0208 	add.w	r2, r3, #8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0208 	add.w	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d103      	bne.n	80024f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	e00c      	b.n	800250a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3308      	adds	r3, #8
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e002      	b.n	80024fe <vListInsert+0x2e>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	d2f6      	bcs.n	80024f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	601a      	str	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6852      	ldr	r2, [r2, #4]
 8002560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	d103      	bne.n	8002574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
	...

08002594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025c0:	f002 f984 	bl	80048cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	441a      	add	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f0:	3b01      	subs	r3, #1
 80025f2:	68f9      	ldr	r1, [r7, #12]
 80025f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	441a      	add	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	22ff      	movs	r2, #255	@ 0xff
 8002604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	22ff      	movs	r2, #255	@ 0xff
 800260c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d114      	bne.n	8002640 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01a      	beq.n	8002654 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3310      	adds	r3, #16
 8002622:	4618      	mov	r0, r3
 8002624:	f001 fa62 	bl	8003aec <xTaskRemoveFromEventList>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <xQueueGenericReset+0xd0>)
 8002630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	e009      	b.n	8002654 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3310      	adds	r3, #16
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fef5 	bl	8002434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3324      	adds	r3, #36	@ 0x24
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fef0 	bl	8002434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002654:	f002 f96a 	bl	800492c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000ed04 	.word	0xe000ed04

08002668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08e      	sub	sp, #56	@ 0x38
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800269a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	e7fd      	b.n	80026ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <xQueueGenericCreateStatic+0x56>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <xQueueGenericCreateStatic+0x5a>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <xQueueGenericCreateStatic+0x5c>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	623b      	str	r3, [r7, #32]
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <xQueueGenericCreateStatic+0x84>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <xQueueGenericCreateStatic+0x88>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <xQueueGenericCreateStatic+0x8a>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10b      	bne.n	800270e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80026f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	61fb      	str	r3, [r7, #28]
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	e7fd      	b.n	800270a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800270e:	2350      	movs	r3, #80	@ 0x50
 8002710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b50      	cmp	r3, #80	@ 0x50
 8002716:	d00b      	beq.n	8002730 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	61bb      	str	r3, [r7, #24]
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002730:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002744:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f840 	bl	80027d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800275a:	4618      	mov	r0, r3
 800275c:	3730      	adds	r7, #48	@ 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002762:	b580      	push	{r7, lr}
 8002764:	b08a      	sub	sp, #40	@ 0x28
 8002766:	af02      	add	r7, sp, #8
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	4613      	mov	r3, r2
 800276e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	613b      	str	r3, [r7, #16]
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3350      	adds	r3, #80	@ 0x50
 800279c:	4618      	mov	r0, r3
 800279e:	f002 f997 	bl	8004ad0 <pvPortMalloc>
 80027a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d011      	beq.n	80027ce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3350      	adds	r3, #80	@ 0x50
 80027b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f805 	bl	80027d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027ce:	69bb      	ldr	r3, [r7, #24]
	}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e002      	b.n	80027fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002806:	2101      	movs	r1, #1
 8002808:	69b8      	ldr	r0, [r7, #24]
 800280a:	f7ff fec3 	bl	8002594 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	@ 0x38
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <xQueueGenericSend+0x34>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <xQueueGenericSend+0x42>
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <xQueueGenericSend+0x46>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <xQueueGenericSend+0x48>
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <xQueueGenericSend+0x64>
	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d103      	bne.n	8002892 <xQueueGenericSend+0x72>
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <xQueueGenericSend+0x76>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <xQueueGenericSend+0x78>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <xQueueGenericSend+0x94>
	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	623b      	str	r3, [r7, #32]
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028b4:	f001 fae0 	bl	8003e78 <xTaskGetSchedulerState>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <xQueueGenericSend+0xa4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <xQueueGenericSend+0xa8>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <xQueueGenericSend+0xaa>
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <xQueueGenericSend+0xc6>
	__asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	61fb      	str	r3, [r7, #28]
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	e7fd      	b.n	80028e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028e6:	f001 fff1 	bl	80048cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d302      	bcc.n	80028fc <xQueueGenericSend+0xdc>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d129      	bne.n	8002950 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002902:	f000 fa91 	bl	8002e28 <prvCopyDataToQueue>
 8002906:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002912:	3324      	adds	r3, #36	@ 0x24
 8002914:	4618      	mov	r0, r3
 8002916:	f001 f8e9 	bl	8003aec <xTaskRemoveFromEventList>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002920:	4b3f      	ldr	r3, [pc, #252]	@ (8002a20 <xQueueGenericSend+0x200>)
 8002922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	e00a      	b.n	8002948 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002938:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <xQueueGenericSend+0x200>)
 800293a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002948:	f001 fff0 	bl	800492c <vPortExitCritical>
				return pdPASS;
 800294c:	2301      	movs	r3, #1
 800294e:	e063      	b.n	8002a18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002956:	f001 ffe9 	bl	800492c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800295a:	2300      	movs	r3, #0
 800295c:	e05c      	b.n	8002a18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800295e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f923 	bl	8003bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800296e:	2301      	movs	r3, #1
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002972:	f001 ffdb 	bl	800492c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002976:	f000 fe8f 	bl	8003698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800297a:	f001 ffa7 	bl	80048cc <vPortEnterCritical>
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002984:	b25b      	sxtb	r3, r3
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d103      	bne.n	8002994 <xQueueGenericSend+0x174>
 800298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800299a:	b25b      	sxtb	r3, r3
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d103      	bne.n	80029aa <xQueueGenericSend+0x18a>
 80029a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029aa:	f001 ffbf 	bl	800492c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ae:	1d3a      	adds	r2, r7, #4
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f912 	bl	8003be0 <xTaskCheckForTimeOut>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d124      	bne.n	8002a0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029c4:	f000 fb28 	bl	8003018 <prvIsQueueFull>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d018      	beq.n	8002a00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	3310      	adds	r3, #16
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f836 	bl	8003a48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029de:	f000 fab3 	bl	8002f48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029e2:	f000 fe67 	bl	80036b4 <xTaskResumeAll>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f47f af7c 	bne.w	80028e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80029ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <xQueueGenericSend+0x200>)
 80029f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	e772      	b.n	80028e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a02:	f000 faa1 	bl	8002f48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a06:	f000 fe55 	bl	80036b4 <xTaskResumeAll>
 8002a0a:	e76c      	b.n	80028e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a0e:	f000 fa9b 	bl	8002f48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a12:	f000 fe4f 	bl	80036b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3738      	adds	r7, #56	@ 0x38
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b090      	sub	sp, #64	@ 0x40
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d103      	bne.n	8002a62 <xQueueGenericSendFromISR+0x3e>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <xQueueGenericSendFromISR+0x42>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <xQueueGenericSendFromISR+0x44>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d103      	bne.n	8002a92 <xQueueGenericSendFromISR+0x6e>
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <xQueueGenericSendFromISR+0x72>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <xQueueGenericSendFromISR+0x74>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	623b      	str	r3, [r7, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ab4:	f001 ffcc 	bl	8004a50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ab8:	f3ef 8211 	mrs	r2, BASEPRI
 8002abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ad2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <xQueueGenericSendFromISR+0xc2>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d12f      	bne.n	8002b46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002afc:	f000 f994 	bl	8002e28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d112      	bne.n	8002b30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b14:	3324      	adds	r3, #36	@ 0x24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 ffe8 	bl	8003aec <xTaskRemoveFromEventList>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00e      	beq.n	8002b40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e007      	b.n	8002b40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b34:	3301      	adds	r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	b25a      	sxtb	r2, r3
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b40:	2301      	movs	r3, #1
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b44:	e001      	b.n	8002b4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3740      	adds	r7, #64	@ 0x40
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	@ 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <xQueueReceive+0x32>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	623b      	str	r3, [r7, #32]
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	e7fd      	b.n	8002b8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <xQueueReceive+0x40>
 8002b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <xQueueReceive+0x44>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <xQueueReceive+0x46>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <xQueueReceive+0x62>
	__asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	61fb      	str	r3, [r7, #28]
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	e7fd      	b.n	8002bbe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc2:	f001 f959 	bl	8003e78 <xTaskGetSchedulerState>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <xQueueReceive+0x72>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <xQueueReceive+0x76>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueReceive+0x78>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <xQueueReceive+0x94>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	61bb      	str	r3, [r7, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bf4:	f001 fe6a 	bl	80048cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01f      	beq.n	8002c44 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c08:	f000 f978 	bl	8002efc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00f      	beq.n	8002c3c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	3310      	adds	r3, #16
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 ff63 	bl	8003aec <xTaskRemoveFromEventList>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d20 <xQueueReceive+0x1c0>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c3c:	f001 fe76 	bl	800492c <vPortExitCritical>
				return pdPASS;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e069      	b.n	8002d18 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c4a:	f001 fe6f 	bl	800492c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e062      	b.n	8002d18 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 ffa9 	bl	8003bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c62:	2301      	movs	r3, #1
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c66:	f001 fe61 	bl	800492c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c6a:	f000 fd15 	bl	8003698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c6e:	f001 fe2d 	bl	80048cc <vPortEnterCritical>
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d103      	bne.n	8002c88 <xQueueReceive+0x128>
 8002c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d103      	bne.n	8002c9e <xQueueReceive+0x13e>
 8002c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c9e:	f001 fe45 	bl	800492c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ca2:	1d3a      	adds	r2, r7, #4
 8002ca4:	f107 0310 	add.w	r3, r7, #16
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 ff98 	bl	8003be0 <xTaskCheckForTimeOut>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d123      	bne.n	8002cfe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cb8:	f000 f998 	bl	8002fec <prvIsQueueEmpty>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	3324      	adds	r3, #36	@ 0x24
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 febc 	bl	8003a48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cd2:	f000 f939 	bl	8002f48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cd6:	f000 fced 	bl	80036b4 <xTaskResumeAll>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d189      	bne.n	8002bf4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <xQueueReceive+0x1c0>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	e780      	b.n	8002bf4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cf4:	f000 f928 	bl	8002f48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cf8:	f000 fcdc 	bl	80036b4 <xTaskResumeAll>
 8002cfc:	e77a      	b.n	8002bf4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d00:	f000 f922 	bl	8002f48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d04:	f000 fcd6 	bl	80036b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d0a:	f000 f96f 	bl	8002fec <prvIsQueueEmpty>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f43f af6f 	beq.w	8002bf4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3730      	adds	r7, #48	@ 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	e000ed04 	.word	0xe000ed04

08002d24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08e      	sub	sp, #56	@ 0x38
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	623b      	str	r3, [r7, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <xQueueReceiveFromISR+0x3c>
 8002d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <xQueueReceiveFromISR+0x40>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <xQueueReceiveFromISR+0x42>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	61fb      	str	r3, [r7, #28]
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	e7fd      	b.n	8002d7e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d82:	f001 fe65 	bl	8004a50 <vPortValidateInterruptPriority>
	__asm volatile
 8002d86:	f3ef 8211 	mrs	r2, BASEPRI
 8002d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	61ba      	str	r2, [r7, #24]
 8002d9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002d9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02f      	beq.n	8002e0e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dbc:	f000 f89e 	bl	8002efc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d112      	bne.n	8002df8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	3310      	adds	r3, #16
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fe84 	bl	8003aec <xTaskRemoveFromEventList>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00e      	beq.n	8002e08 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e007      	b.n	8002e08 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	b25a      	sxtb	r2, r3
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e0c:	e001      	b.n	8002e12 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f383 8811 	msr	BASEPRI, r3
}
 8002e1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3738      	adds	r7, #56	@ 0x38
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d14d      	bne.n	8002eea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 f82e 	bl	8003eb4 <xTaskPriorityDisinherit>
 8002e58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	e043      	b.n	8002eea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d119      	bne.n	8002e9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6858      	ldr	r0, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	461a      	mov	r2, r3
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	f002 f8cc 	bl	8005010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	441a      	add	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d32b      	bcc.n	8002eea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	e026      	b.n	8002eea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68d8      	ldr	r0, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	f002 f8b2 	bl	8005010 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	425b      	negs	r3, r3
 8002eb6:	441a      	add	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d207      	bcs.n	8002ed8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	425b      	negs	r3, r3
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d105      	bne.n	8002eea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002ef2:	697b      	ldr	r3, [r7, #20]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	441a      	add	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d303      	bcc.n	8002f30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68d9      	ldr	r1, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6838      	ldr	r0, [r7, #0]
 8002f3c:	f002 f868 	bl	8005010 <memcpy>
	}
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f50:	f001 fcbc 	bl	80048cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f5c:	e011      	b.n	8002f82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d012      	beq.n	8002f8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3324      	adds	r3, #36	@ 0x24
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fdbe 	bl	8003aec <xTaskRemoveFromEventList>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f76:	f000 fe97 	bl	8003ca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	dce9      	bgt.n	8002f5e <prvUnlockQueue+0x16>
 8002f8a:	e000      	b.n	8002f8e <prvUnlockQueue+0x46>
					break;
 8002f8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	22ff      	movs	r2, #255	@ 0xff
 8002f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002f96:	f001 fcc9 	bl	800492c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f9a:	f001 fc97 	bl	80048cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fa6:	e011      	b.n	8002fcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3310      	adds	r3, #16
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd99 	bl	8003aec <xTaskRemoveFromEventList>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fc0:	f000 fe72 	bl	8003ca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fc4:	7bbb      	ldrb	r3, [r7, #14]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	dce9      	bgt.n	8002fa8 <prvUnlockQueue+0x60>
 8002fd4:	e000      	b.n	8002fd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	22ff      	movs	r2, #255	@ 0xff
 8002fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002fe0:	f001 fca4 	bl	800492c <vPortExitCritical>
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ff4:	f001 fc6a 	bl	80048cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e001      	b.n	800300a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800300a:	f001 fc8f 	bl	800492c <vPortExitCritical>

	return xReturn;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003020:	f001 fc54 	bl	80048cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	429a      	cmp	r2, r3
 800302e:	d102      	bne.n	8003036 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e001      	b.n	800303a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800303a:	f001 fc77 	bl	800492c <vPortExitCritical>

	return xReturn;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e014      	b.n	8003082 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003058:	4a0e      	ldr	r2, [pc, #56]	@ (8003094 <vQueueAddToRegistry+0x4c>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003064:	490b      	ldr	r1, [pc, #44]	@ (8003094 <vQueueAddToRegistry+0x4c>)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <vQueueAddToRegistry+0x4c>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800307a:	e006      	b.n	800308a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3301      	adds	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b07      	cmp	r3, #7
 8003086:	d9e7      	bls.n	8003058 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	20000874 	.word	0x20000874

08003098 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030a8:	f001 fc10 	bl	80048cc <vPortEnterCritical>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d103      	bne.n	80030c2 <vQueueWaitForMessageRestricted+0x2a>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d103      	bne.n	80030d8 <vQueueWaitForMessageRestricted+0x40>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030d8:	f001 fc28 	bl	800492c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3324      	adds	r3, #36	@ 0x24
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fcd1 	bl	8003a94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff ff28 	bl	8002f48 <prvUnlockQueue>
	}
 80030f8:	bf00      	nop
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	@ 0x38
 8003104:	af04      	add	r7, sp, #16
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800310e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	623b      	str	r3, [r7, #32]
}
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800312c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	61fb      	str	r3, [r7, #28]
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	e7fd      	b.n	8003146 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800314a:	23a8      	movs	r3, #168	@ 0xa8
 800314c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2ba8      	cmp	r3, #168	@ 0xa8
 8003152:	d00b      	beq.n	800316c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	61bb      	str	r3, [r7, #24]
}
 8003166:	bf00      	nop
 8003168:	bf00      	nop
 800316a:	e7fd      	b.n	8003168 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800316c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01e      	beq.n	80031b2 <xTaskCreateStatic+0xb2>
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01b      	beq.n	80031b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800317a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003182:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	2202      	movs	r2, #2
 8003188:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800318c:	2300      	movs	r3, #0
 800318e:	9303      	str	r3, [sp, #12]
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f851 	bl	800324c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031ac:	f000 f8f6 	bl	800339c <prvAddNewTaskToReadyList>
 80031b0:	e001      	b.n	80031b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031b6:	697b      	ldr	r3, [r7, #20]
	}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3728      	adds	r7, #40	@ 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	@ 0x30
 80031c4:	af04      	add	r7, sp, #16
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 fc7b 	bl	8004ad0 <pvPortMalloc>
 80031da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00e      	beq.n	8003200 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031e2:	20a8      	movs	r0, #168	@ 0xa8
 80031e4:	f001 fc74 	bl	8004ad0 <pvPortMalloc>
 80031e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80031f6:	e005      	b.n	8003204 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031f8:	6978      	ldr	r0, [r7, #20]
 80031fa:	f001 fd37 	bl	8004c6c <vPortFree>
 80031fe:	e001      	b.n	8003204 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d017      	beq.n	800323a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	2300      	movs	r3, #0
 8003216:	9303      	str	r3, [sp, #12]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	9302      	str	r3, [sp, #8]
 800321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f80f 	bl	800324c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800322e:	69f8      	ldr	r0, [r7, #28]
 8003230:	f000 f8b4 	bl	800339c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003234:	2301      	movs	r3, #1
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	e002      	b.n	8003240 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003240:	69bb      	ldr	r3, [r7, #24]
	}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	461a      	mov	r2, r3
 8003264:	21a5      	movs	r1, #165	@ 0xa5
 8003266:	f001 fe41 	bl	8004eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800326a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003274:	3b01      	subs	r3, #1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f023 0307 	bic.w	r3, r3, #7
 8003282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	617b      	str	r3, [r7, #20]
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	e7fd      	b.n	80032a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01f      	beq.n	80032ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e012      	b.n	80032d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	7819      	ldrb	r1, [r3, #0]
 80032ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	3334      	adds	r3, #52	@ 0x34
 80032c2:	460a      	mov	r2, r1
 80032c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d006      	beq.n	80032e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	d9e9      	bls.n	80032b2 <prvInitialiseNewTask+0x66>
 80032de:	e000      	b.n	80032e2 <prvInitialiseNewTask+0x96>
			{
				break;
 80032e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032ea:	e003      	b.n	80032f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	2b37      	cmp	r3, #55	@ 0x37
 80032f8:	d901      	bls.n	80032fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032fa:	2337      	movs	r3, #55	@ 0x37
 80032fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003302:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003308:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	2200      	movs	r2, #0
 800330e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	3304      	adds	r3, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f8ac 	bl	8002472 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	3318      	adds	r3, #24
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f8a7 	bl	8002472 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003328:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003338:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333c:	2200      	movs	r2, #0
 800333e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	2200      	movs	r2, #0
 8003346:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334c:	3354      	adds	r3, #84	@ 0x54
 800334e:	224c      	movs	r2, #76	@ 0x4c
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f001 fdca 	bl	8004eec <memset>
 8003358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335a:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <prvInitialiseNewTask+0x144>)
 800335c:	659a      	str	r2, [r3, #88]	@ 0x58
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	4a0c      	ldr	r2, [pc, #48]	@ (8003394 <prvInitialiseNewTask+0x148>)
 8003362:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003366:	4a0c      	ldr	r2, [pc, #48]	@ (8003398 <prvInitialiseNewTask+0x14c>)
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	69b8      	ldr	r0, [r7, #24]
 8003370:	f001 f9bc 	bl	80046ec <pxPortInitialiseStack>
 8003374:	4602      	mov	r2, r0
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003386:	bf00      	nop
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20001b08 	.word	0x20001b08
 8003394:	20001b70 	.word	0x20001b70
 8003398:	20001bd8 	.word	0x20001bd8

0800339c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033a4:	f001 fa92 	bl	80048cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <prvAddNewTaskToReadyList+0xc4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d110      	bne.n	80033ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033c8:	f000 fc92 	bl	8003cf0 <prvInitialiseTaskLists>
 80033cc:	e00d      	b.n	80033ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033ce:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <prvAddNewTaskToReadyList+0xcc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033d6:	4b23      	ldr	r3, [pc, #140]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d802      	bhi.n	80033ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <prvAddNewTaskToReadyList+0xd0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4a1e      	ldr	r2, [pc, #120]	@ (800346c <prvAddNewTaskToReadyList+0xd0>)
 80033f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033f4:	4b1d      	ldr	r3, [pc, #116]	@ (800346c <prvAddNewTaskToReadyList+0xd0>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <prvAddNewTaskToReadyList+0xd4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d903      	bls.n	8003410 <prvAddNewTaskToReadyList+0x74>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <prvAddNewTaskToReadyList+0xd4>)
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4a15      	ldr	r2, [pc, #84]	@ (8003474 <prvAddNewTaskToReadyList+0xd8>)
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f7ff f82f 	bl	800248a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800342c:	f001 fa7e 	bl	800492c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003430:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <prvAddNewTaskToReadyList+0xcc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003438:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <prvAddNewTaskToReadyList+0xc8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	429a      	cmp	r2, r3
 8003444:	d207      	bcs.n	8003456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003446:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <prvAddNewTaskToReadyList+0xdc>)
 8003448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000d88 	.word	0x20000d88
 8003464:	200008b4 	.word	0x200008b4
 8003468:	20000d94 	.word	0x20000d94
 800346c:	20000da4 	.word	0x20000da4
 8003470:	20000d90 	.word	0x20000d90
 8003474:	200008b8 	.word	0x200008b8
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d018      	beq.n	80034c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800348e:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <vTaskDelay+0x64>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <vTaskDelay+0x32>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60bb      	str	r3, [r7, #8]
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	e7fd      	b.n	80034aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034ae:	f000 f8f3 	bl	8003698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034b2:	2100      	movs	r1, #0
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fd6d 	bl	8003f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034ba:	f000 f8fb 	bl	80036b4 <xTaskResumeAll>
 80034be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80034c6:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <vTaskDelay+0x68>)
 80034c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000db0 	.word	0x20000db0
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <eTaskGetState+0x2a>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	60bb      	str	r3, [r7, #8]
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003512:	4b24      	ldr	r3, [pc, #144]	@ (80035a4 <eTaskGetState+0xbc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	429a      	cmp	r2, r3
 800351a:	d102      	bne.n	8003522 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800351c:	2300      	movs	r3, #0
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e03a      	b.n	8003598 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8003522:	f001 f9d3 	bl	80048cc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800352c:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <eTaskGetState+0xc0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <eTaskGetState+0xc4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003538:	f001 f9f8 	bl	800492c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	d003      	beq.n	800354c <eTaskGetState+0x64>
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d102      	bne.n	8003552 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800354c:	2302      	movs	r3, #2
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e022      	b.n	8003598 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4a16      	ldr	r2, [pc, #88]	@ (80035b0 <eTaskGetState+0xc8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d112      	bne.n	8003580 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d102      	bne.n	8003574 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800356e:	2302      	movs	r3, #2
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e011      	b.n	8003598 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8003574:	2303      	movs	r3, #3
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e00e      	b.n	8003598 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800357a:	2302      	movs	r3, #2
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e00b      	b.n	8003598 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4a0c      	ldr	r2, [pc, #48]	@ (80035b4 <eTaskGetState+0xcc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d002      	beq.n	800358e <eTaskGetState+0xa6>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800358e:	2304      	movs	r3, #4
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e001      	b.n	8003598 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003598:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200008b4 	.word	0x200008b4
 80035a8:	20000d40 	.word	0x20000d40
 80035ac:	20000d44 	.word	0x20000d44
 80035b0:	20000d74 	.word	0x20000d74
 80035b4:	20000d5c 	.word	0x20000d5c

080035b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035c6:	463a      	mov	r2, r7
 80035c8:	1d39      	adds	r1, r7, #4
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fefe 	bl	80023d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	9202      	str	r2, [sp, #8]
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2300      	movs	r3, #0
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	460a      	mov	r2, r1
 80035e6:	4924      	ldr	r1, [pc, #144]	@ (8003678 <vTaskStartScheduler+0xc0>)
 80035e8:	4824      	ldr	r0, [pc, #144]	@ (800367c <vTaskStartScheduler+0xc4>)
 80035ea:	f7ff fd89 	bl	8003100 <xTaskCreateStatic>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4a23      	ldr	r2, [pc, #140]	@ (8003680 <vTaskStartScheduler+0xc8>)
 80035f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035f4:	4b22      	ldr	r3, [pc, #136]	@ (8003680 <vTaskStartScheduler+0xc8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035fc:	2301      	movs	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e001      	b.n	8003606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d102      	bne.n	8003612 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800360c:	f000 fd16 	bl	800403c <xTimerCreateTimerTask>
 8003610:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d11b      	bne.n	8003650 <vTaskStartScheduler+0x98>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	613b      	str	r3, [r7, #16]
}
 800362a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800362c:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <vTaskStartScheduler+0xcc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3354      	adds	r3, #84	@ 0x54
 8003632:	4a15      	ldr	r2, [pc, #84]	@ (8003688 <vTaskStartScheduler+0xd0>)
 8003634:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003636:	4b15      	ldr	r3, [pc, #84]	@ (800368c <vTaskStartScheduler+0xd4>)
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800363e:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <vTaskStartScheduler+0xd8>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <vTaskStartScheduler+0xdc>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800364a:	f001 f8cd 	bl	80047e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800364e:	e00f      	b.n	8003670 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d10b      	bne.n	8003670 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60fb      	str	r3, [r7, #12]
}
 800366a:	bf00      	nop
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <vTaskStartScheduler+0xb4>
}
 8003670:	bf00      	nop
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	08005918 	.word	0x08005918
 800367c:	08003cc1 	.word	0x08003cc1
 8003680:	20000dac 	.word	0x20000dac
 8003684:	200008b4 	.word	0x200008b4
 8003688:	20000010 	.word	0x20000010
 800368c:	20000da8 	.word	0x20000da8
 8003690:	20000d94 	.word	0x20000d94
 8003694:	20000d8c 	.word	0x20000d8c

08003698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800369c:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <vTaskSuspendAll+0x18>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a03      	ldr	r2, [pc, #12]	@ (80036b0 <vTaskSuspendAll+0x18>)
 80036a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000db0 	.word	0x20000db0

080036b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036c2:	4b42      	ldr	r3, [pc, #264]	@ (80037cc <xTaskResumeAll+0x118>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	603b      	str	r3, [r7, #0]
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036e2:	f001 f8f3 	bl	80048cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036e6:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <xTaskResumeAll+0x118>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	4a37      	ldr	r2, [pc, #220]	@ (80037cc <xTaskResumeAll+0x118>)
 80036ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036f0:	4b36      	ldr	r3, [pc, #216]	@ (80037cc <xTaskResumeAll+0x118>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d162      	bne.n	80037be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036f8:	4b35      	ldr	r3, [pc, #212]	@ (80037d0 <xTaskResumeAll+0x11c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05e      	beq.n	80037be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003700:	e02f      	b.n	8003762 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003702:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <xTaskResumeAll+0x120>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3318      	adds	r3, #24
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe ff16 	bl	8002540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe ff11 	bl	8002540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003722:	4b2d      	ldr	r3, [pc, #180]	@ (80037d8 <xTaskResumeAll+0x124>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d903      	bls.n	8003732 <xTaskResumeAll+0x7e>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	4a2a      	ldr	r2, [pc, #168]	@ (80037d8 <xTaskResumeAll+0x124>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4a27      	ldr	r2, [pc, #156]	@ (80037dc <xTaskResumeAll+0x128>)
 8003740:	441a      	add	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3304      	adds	r3, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f7fe fe9e 	bl	800248a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003752:	4b23      	ldr	r3, [pc, #140]	@ (80037e0 <xTaskResumeAll+0x12c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800375c:	4b21      	ldr	r3, [pc, #132]	@ (80037e4 <xTaskResumeAll+0x130>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003762:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <xTaskResumeAll+0x120>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1cb      	bne.n	8003702 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003770:	f000 fb62 	bl	8003e38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003774:	4b1c      	ldr	r3, [pc, #112]	@ (80037e8 <xTaskResumeAll+0x134>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003780:	f000 f844 	bl	800380c <xTaskIncrementTick>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800378a:	4b16      	ldr	r3, [pc, #88]	@ (80037e4 <xTaskResumeAll+0x130>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f1      	bne.n	8003780 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800379c:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <xTaskResumeAll+0x134>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <xTaskResumeAll+0x130>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037ae:	4b0f      	ldr	r3, [pc, #60]	@ (80037ec <xTaskResumeAll+0x138>)
 80037b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037be:	f001 f8b5 	bl	800492c <vPortExitCritical>

	return xAlreadyYielded;
 80037c2:	68bb      	ldr	r3, [r7, #8]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000db0 	.word	0x20000db0
 80037d0:	20000d88 	.word	0x20000d88
 80037d4:	20000d48 	.word	0x20000d48
 80037d8:	20000d90 	.word	0x20000d90
 80037dc:	200008b8 	.word	0x200008b8
 80037e0:	200008b4 	.word	0x200008b4
 80037e4:	20000d9c 	.word	0x20000d9c
 80037e8:	20000d98 	.word	0x20000d98
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037f6:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <xTaskGetTickCount+0x18>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037fc:	687b      	ldr	r3, [r7, #4]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	20000d8c 	.word	0x20000d8c

0800380c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003816:	4b4f      	ldr	r3, [pc, #316]	@ (8003954 <xTaskIncrementTick+0x148>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 8090 	bne.w	8003940 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003820:	4b4d      	ldr	r3, [pc, #308]	@ (8003958 <xTaskIncrementTick+0x14c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003828:	4a4b      	ldr	r2, [pc, #300]	@ (8003958 <xTaskIncrementTick+0x14c>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d121      	bne.n	8003878 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003834:	4b49      	ldr	r3, [pc, #292]	@ (800395c <xTaskIncrementTick+0x150>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <xTaskIncrementTick+0x4a>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	603b      	str	r3, [r7, #0]
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	e7fd      	b.n	8003852 <xTaskIncrementTick+0x46>
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <xTaskIncrementTick+0x150>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	4b40      	ldr	r3, [pc, #256]	@ (8003960 <xTaskIncrementTick+0x154>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3e      	ldr	r2, [pc, #248]	@ (800395c <xTaskIncrementTick+0x150>)
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4a3e      	ldr	r2, [pc, #248]	@ (8003960 <xTaskIncrementTick+0x154>)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b3e      	ldr	r3, [pc, #248]	@ (8003964 <xTaskIncrementTick+0x158>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	4a3c      	ldr	r2, [pc, #240]	@ (8003964 <xTaskIncrementTick+0x158>)
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	f000 fae0 	bl	8003e38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003878:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <xTaskIncrementTick+0x15c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	429a      	cmp	r2, r3
 8003880:	d349      	bcc.n	8003916 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003882:	4b36      	ldr	r3, [pc, #216]	@ (800395c <xTaskIncrementTick+0x150>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800388c:	4b36      	ldr	r3, [pc, #216]	@ (8003968 <xTaskIncrementTick+0x15c>)
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	601a      	str	r2, [r3, #0]
					break;
 8003894:	e03f      	b.n	8003916 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003896:	4b31      	ldr	r3, [pc, #196]	@ (800395c <xTaskIncrementTick+0x150>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d203      	bcs.n	80038b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003968 <xTaskIncrementTick+0x15c>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038b4:	e02f      	b.n	8003916 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fe40 	bl	8002540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fe37 	bl	8002540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	4b25      	ldr	r3, [pc, #148]	@ (800396c <xTaskIncrementTick+0x160>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d903      	bls.n	80038e6 <xTaskIncrementTick+0xda>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	4a22      	ldr	r2, [pc, #136]	@ (800396c <xTaskIncrementTick+0x160>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <xTaskIncrementTick+0x164>)
 80038f4:	441a      	add	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7fe fdc4 	bl	800248a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003906:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <xTaskIncrementTick+0x168>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390c:	429a      	cmp	r2, r3
 800390e:	d3b8      	bcc.n	8003882 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003914:	e7b5      	b.n	8003882 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003916:	4b17      	ldr	r3, [pc, #92]	@ (8003974 <xTaskIncrementTick+0x168>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391c:	4914      	ldr	r1, [pc, #80]	@ (8003970 <xTaskIncrementTick+0x164>)
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d901      	bls.n	8003932 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003932:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <xTaskIncrementTick+0x16c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e004      	b.n	800394a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003940:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <xTaskIncrementTick+0x170>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a0d      	ldr	r2, [pc, #52]	@ (800397c <xTaskIncrementTick+0x170>)
 8003948:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800394a:	697b      	ldr	r3, [r7, #20]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000db0 	.word	0x20000db0
 8003958:	20000d8c 	.word	0x20000d8c
 800395c:	20000d40 	.word	0x20000d40
 8003960:	20000d44 	.word	0x20000d44
 8003964:	20000da0 	.word	0x20000da0
 8003968:	20000da8 	.word	0x20000da8
 800396c:	20000d90 	.word	0x20000d90
 8003970:	200008b8 	.word	0x200008b8
 8003974:	200008b4 	.word	0x200008b4
 8003978:	20000d9c 	.word	0x20000d9c
 800397c:	20000d98 	.word	0x20000d98

08003980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003986:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <vTaskSwitchContext+0xb0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800398e:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <vTaskSwitchContext+0xb4>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003994:	e047      	b.n	8003a26 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003996:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <vTaskSwitchContext+0xb4>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399c:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <vTaskSwitchContext+0xb8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e011      	b.n	80039c8 <vTaskSwitchContext+0x48>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	607b      	str	r3, [r7, #4]
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <vTaskSwitchContext+0x3e>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	491c      	ldr	r1, [pc, #112]	@ (8003a3c <vTaskSwitchContext+0xbc>)
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0e3      	beq.n	80039a4 <vTaskSwitchContext+0x24>
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a15      	ldr	r2, [pc, #84]	@ (8003a3c <vTaskSwitchContext+0xbc>)
 80039e8:	4413      	add	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3308      	adds	r3, #8
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d104      	bne.n	8003a0c <vTaskSwitchContext+0x8c>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	4a0b      	ldr	r2, [pc, #44]	@ (8003a40 <vTaskSwitchContext+0xc0>)
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4a08      	ldr	r2, [pc, #32]	@ (8003a38 <vTaskSwitchContext+0xb8>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a1c:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <vTaskSwitchContext+0xc0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3354      	adds	r3, #84	@ 0x54
 8003a22:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <vTaskSwitchContext+0xc4>)
 8003a24:	6013      	str	r3, [r2, #0]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20000db0 	.word	0x20000db0
 8003a34:	20000d9c 	.word	0x20000d9c
 8003a38:	20000d90 	.word	0x20000d90
 8003a3c:	200008b8 	.word	0x200008b8
 8003a40:	200008b4 	.word	0x200008b4
 8003a44:	20000010 	.word	0x20000010

08003a48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60fb      	str	r3, [r7, #12]
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	e7fd      	b.n	8003a6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <vTaskPlaceOnEventList+0x48>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3318      	adds	r3, #24
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fe fd29 	bl	80024d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a7e:	2101      	movs	r1, #1
 8003a80:	6838      	ldr	r0, [r7, #0]
 8003a82:	f000 fa87 	bl	8003f94 <prvAddCurrentTaskToDelayedList>
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200008b4 	.word	0x200008b4

08003a94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	617b      	str	r3, [r7, #20]
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	e7fd      	b.n	8003aba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003abe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3318      	adds	r3, #24
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7fe fcdf 	bl	800248a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68b8      	ldr	r0, [r7, #8]
 8003adc:	f000 fa5a 	bl	8003f94 <prvAddCurrentTaskToDelayedList>
	}
 8003ae0:	bf00      	nop
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200008b4 	.word	0x200008b4

08003aec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60fb      	str	r3, [r7, #12]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3318      	adds	r3, #24
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fd0e 	bl	8002540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b24:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <xTaskRemoveFromEventList+0xb0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11d      	bne.n	8003b68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fd05 	bl	8002540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ba0 <xTaskRemoveFromEventList+0xb4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d903      	bls.n	8003b4a <xTaskRemoveFromEventList+0x5e>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	4a16      	ldr	r2, [pc, #88]	@ (8003ba0 <xTaskRemoveFromEventList+0xb4>)
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4a13      	ldr	r2, [pc, #76]	@ (8003ba4 <xTaskRemoveFromEventList+0xb8>)
 8003b58:	441a      	add	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fe fc92 	bl	800248a <vListInsertEnd>
 8003b66:	e005      	b.n	8003b74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	480e      	ldr	r0, [pc, #56]	@ (8003ba8 <xTaskRemoveFromEventList+0xbc>)
 8003b70:	f7fe fc8b 	bl	800248a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b78:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <xTaskRemoveFromEventList+0xc0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d905      	bls.n	8003b8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b86:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <xTaskRemoveFromEventList+0xc4>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e001      	b.n	8003b92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b92:	697b      	ldr	r3, [r7, #20]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000db0 	.word	0x20000db0
 8003ba0:	20000d90 	.word	0x20000d90
 8003ba4:	200008b8 	.word	0x200008b8
 8003ba8:	20000d48 	.word	0x20000d48
 8003bac:	200008b4 	.word	0x200008b4
 8003bb0:	20000d9c 	.word	0x20000d9c

08003bb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <vTaskInternalSetTimeOutState+0x24>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <vTaskInternalSetTimeOutState+0x28>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000da0 	.word	0x20000da0
 8003bdc:	20000d8c 	.word	0x20000d8c

08003be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	613b      	str	r3, [r7, #16]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	60fb      	str	r3, [r7, #12]
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	e7fd      	b.n	8003c22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003c26:	f000 fe51 	bl	80048cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <xTaskCheckForTimeOut+0xc0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d102      	bne.n	8003c4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e023      	b.n	8003c92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <xTaskCheckForTimeOut+0xc4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d007      	beq.n	8003c66 <xTaskCheckForTimeOut+0x86>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e015      	b.n	8003c92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d20b      	bcs.n	8003c88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	1ad2      	subs	r2, r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff99 	bl	8003bb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	e004      	b.n	8003c92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c92:	f000 fe4b 	bl	800492c <vPortExitCritical>

	return xReturn;
 8003c96:	69fb      	ldr	r3, [r7, #28]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000d8c 	.word	0x20000d8c
 8003ca4:	20000da0 	.word	0x20000da0

08003ca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <vTaskMissedYield+0x14>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000d9c 	.word	0x20000d9c

08003cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cc8:	f000 f852 	bl	8003d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <prvIdleTask+0x28>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d9f9      	bls.n	8003cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cd4:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <prvIdleTask+0x2c>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ce4:	e7f0      	b.n	8003cc8 <prvIdleTask+0x8>
 8003ce6:	bf00      	nop
 8003ce8:	200008b8 	.word	0x200008b8
 8003cec:	e000ed04 	.word	0xe000ed04

08003cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	e00c      	b.n	8003d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4a12      	ldr	r2, [pc, #72]	@ (8003d50 <prvInitialiseTaskLists+0x60>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fb92 	bl	8002434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3301      	adds	r3, #1
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b37      	cmp	r3, #55	@ 0x37
 8003d1a:	d9ef      	bls.n	8003cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d1c:	480d      	ldr	r0, [pc, #52]	@ (8003d54 <prvInitialiseTaskLists+0x64>)
 8003d1e:	f7fe fb89 	bl	8002434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d22:	480d      	ldr	r0, [pc, #52]	@ (8003d58 <prvInitialiseTaskLists+0x68>)
 8003d24:	f7fe fb86 	bl	8002434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d28:	480c      	ldr	r0, [pc, #48]	@ (8003d5c <prvInitialiseTaskLists+0x6c>)
 8003d2a:	f7fe fb83 	bl	8002434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d2e:	480c      	ldr	r0, [pc, #48]	@ (8003d60 <prvInitialiseTaskLists+0x70>)
 8003d30:	f7fe fb80 	bl	8002434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d34:	480b      	ldr	r0, [pc, #44]	@ (8003d64 <prvInitialiseTaskLists+0x74>)
 8003d36:	f7fe fb7d 	bl	8002434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <prvInitialiseTaskLists+0x78>)
 8003d3c:	4a05      	ldr	r2, [pc, #20]	@ (8003d54 <prvInitialiseTaskLists+0x64>)
 8003d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <prvInitialiseTaskLists+0x7c>)
 8003d42:	4a05      	ldr	r2, [pc, #20]	@ (8003d58 <prvInitialiseTaskLists+0x68>)
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200008b8 	.word	0x200008b8
 8003d54:	20000d18 	.word	0x20000d18
 8003d58:	20000d2c 	.word	0x20000d2c
 8003d5c:	20000d48 	.word	0x20000d48
 8003d60:	20000d5c 	.word	0x20000d5c
 8003d64:	20000d74 	.word	0x20000d74
 8003d68:	20000d40 	.word	0x20000d40
 8003d6c:	20000d44 	.word	0x20000d44

08003d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d76:	e019      	b.n	8003dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d78:	f000 fda8 	bl	80048cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7c:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <prvCheckTasksWaitingTermination+0x50>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fbd9 	bl	8002540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <prvCheckTasksWaitingTermination+0x54>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	4a0b      	ldr	r2, [pc, #44]	@ (8003dc4 <prvCheckTasksWaitingTermination+0x54>)
 8003d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <prvCheckTasksWaitingTermination+0x58>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <prvCheckTasksWaitingTermination+0x58>)
 8003da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003da2:	f000 fdc3 	bl	800492c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f810 	bl	8003dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dac:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <prvCheckTasksWaitingTermination+0x58>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e1      	bne.n	8003d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000d5c 	.word	0x20000d5c
 8003dc4:	20000d88 	.word	0x20000d88
 8003dc8:	20000d70 	.word	0x20000d70

08003dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3354      	adds	r3, #84	@ 0x54
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f88f 	bl	8004efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d108      	bne.n	8003dfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 ff3d 	bl	8004c6c <vPortFree>
				vPortFree( pxTCB );
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 ff3a 	bl	8004c6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003df8:	e019      	b.n	8003e2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d103      	bne.n	8003e0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 ff31 	bl	8004c6c <vPortFree>
	}
 8003e0a:	e010      	b.n	8003e2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d00b      	beq.n	8003e2e <prvDeleteTCB+0x62>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	60fb      	str	r3, [r7, #12]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <prvDeleteTCB+0x5e>
	}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <prvResetNextTaskUnblockTime+0x38>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <prvResetNextTaskUnblockTime+0x3c>)
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e50:	e008      	b.n	8003e64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e52:	4b07      	ldr	r3, [pc, #28]	@ (8003e70 <prvResetNextTaskUnblockTime+0x38>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4a04      	ldr	r2, [pc, #16]	@ (8003e74 <prvResetNextTaskUnblockTime+0x3c>)
 8003e62:	6013      	str	r3, [r2, #0]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000d40 	.word	0x20000d40
 8003e74:	20000da8 	.word	0x20000da8

08003e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <xTaskGetSchedulerState+0x34>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e86:	2301      	movs	r3, #1
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	e008      	b.n	8003e9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e8c:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <xTaskGetSchedulerState+0x38>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e94:	2302      	movs	r3, #2
 8003e96:	607b      	str	r3, [r7, #4]
 8003e98:	e001      	b.n	8003e9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e9e:	687b      	ldr	r3, [r7, #4]
	}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000d94 	.word	0x20000d94
 8003eb0:	20000db0 	.word	0x20000db0

08003eb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d058      	beq.n	8003f7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003eca:	4b2f      	ldr	r3, [pc, #188]	@ (8003f88 <xTaskPriorityDisinherit+0xd4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d00b      	beq.n	8003eec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60bb      	str	r3, [r7, #8]
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f10:	1e5a      	subs	r2, r3, #1
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d02c      	beq.n	8003f7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d128      	bne.n	8003f7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fb06 	bl	8002540 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <xTaskPriorityDisinherit+0xd8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d903      	bls.n	8003f5c <xTaskPriorityDisinherit+0xa8>
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	4a0c      	ldr	r2, [pc, #48]	@ (8003f8c <xTaskPriorityDisinherit+0xd8>)
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4a09      	ldr	r2, [pc, #36]	@ (8003f90 <xTaskPriorityDisinherit+0xdc>)
 8003f6a:	441a      	add	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7fe fa89 	bl	800248a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f7c:	697b      	ldr	r3, [r7, #20]
	}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200008b4 	.word	0x200008b4
 8003f8c:	20000d90 	.word	0x20000d90
 8003f90:	200008b8 	.word	0x200008b8

08003f94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f9e:	4b21      	ldr	r3, [pc, #132]	@ (8004024 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fa4:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fac8 	bl	8002540 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d10a      	bne.n	8003fce <prvAddCurrentTaskToDelayedList+0x3a>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4819      	ldr	r0, [pc, #100]	@ (800402c <prvAddCurrentTaskToDelayedList+0x98>)
 8003fc8:	f7fe fa5f 	bl	800248a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fcc:	e026      	b.n	800401c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fd6:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d209      	bcs.n	8003ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe6:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b0f      	ldr	r3, [pc, #60]	@ (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f7fe fa6c 	bl	80024d0 <vListInsert>
}
 8003ff8:	e010      	b.n	800401c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <prvAddCurrentTaskToDelayedList+0x94>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fe fa62 	bl	80024d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	d202      	bcs.n	800401c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004016:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000d8c 	.word	0x20000d8c
 8004028:	200008b4 	.word	0x200008b4
 800402c:	20000d74 	.word	0x20000d74
 8004030:	20000d44 	.word	0x20000d44
 8004034:	20000d40 	.word	0x20000d40
 8004038:	20000da8 	.word	0x20000da8

0800403c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004046:	f000 fb11 	bl	800466c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800404a:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <xTimerCreateTimerTask+0x84>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d021      	beq.n	8004096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800405a:	1d3a      	adds	r2, r7, #4
 800405c:	f107 0108 	add.w	r1, r7, #8
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe f9cb 	bl	8002400 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	9202      	str	r2, [sp, #8]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2302      	movs	r3, #2
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	460a      	mov	r2, r1
 800407c:	4911      	ldr	r1, [pc, #68]	@ (80040c4 <xTimerCreateTimerTask+0x88>)
 800407e:	4812      	ldr	r0, [pc, #72]	@ (80040c8 <xTimerCreateTimerTask+0x8c>)
 8004080:	f7ff f83e 	bl	8003100 <xTaskCreateStatic>
 8004084:	4603      	mov	r3, r0
 8004086:	4a11      	ldr	r2, [pc, #68]	@ (80040cc <xTimerCreateTimerTask+0x90>)
 8004088:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800408a:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <xTimerCreateTimerTask+0x90>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004092:	2301      	movs	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	613b      	str	r3, [r7, #16]
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040b4:	697b      	ldr	r3, [r7, #20]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000de4 	.word	0x20000de4
 80040c4:	08005920 	.word	0x08005920
 80040c8:	08004209 	.word	0x08004209
 80040cc:	20000de8 	.word	0x20000de8

080040d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	@ 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040de:	2300      	movs	r3, #0
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <xTimerGenericCommand+0x30>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	623b      	str	r3, [r7, #32]
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <xTimerGenericCommand+0x98>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02a      	beq.n	800415e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b05      	cmp	r3, #5
 8004118:	dc18      	bgt.n	800414c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800411a:	f7ff fead 	bl	8003e78 <xTaskGetSchedulerState>
 800411e:	4603      	mov	r3, r0
 8004120:	2b02      	cmp	r3, #2
 8004122:	d109      	bne.n	8004138 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004124:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <xTimerGenericCommand+0x98>)
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	f107 0110 	add.w	r1, r7, #16
 800412c:	2300      	movs	r3, #0
 800412e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004130:	f7fe fb76 	bl	8002820 <xQueueGenericSend>
 8004134:	6278      	str	r0, [r7, #36]	@ 0x24
 8004136:	e012      	b.n	800415e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <xTimerGenericCommand+0x98>)
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	f107 0110 	add.w	r1, r7, #16
 8004140:	2300      	movs	r3, #0
 8004142:	2200      	movs	r2, #0
 8004144:	f7fe fb6c 	bl	8002820 <xQueueGenericSend>
 8004148:	6278      	str	r0, [r7, #36]	@ 0x24
 800414a:	e008      	b.n	800415e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <xTimerGenericCommand+0x98>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f107 0110 	add.w	r1, r7, #16
 8004154:	2300      	movs	r3, #0
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	f7fe fc64 	bl	8002a24 <xQueueGenericSendFromISR>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004160:	4618      	mov	r0, r3
 8004162:	3728      	adds	r7, #40	@ 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000de4 	.word	0x20000de4

0800416c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004176:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <prvProcessExpiredTimer+0x98>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f9db 	bl	8002540 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d023      	beq.n	80041e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	18d1      	adds	r1, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	6978      	ldr	r0, [r7, #20]
 80041a6:	f000 f8d3 	bl	8004350 <prvInsertTimerInActiveList>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041b0:	2300      	movs	r3, #0
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2300      	movs	r3, #0
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	2100      	movs	r1, #0
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff ff88 	bl	80040d0 <xTimerGenericCommand>
 80041c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d114      	bne.n	80041f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	60fb      	str	r3, [r7, #12]
}
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	4798      	blx	r3
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000ddc 	.word	0x20000ddc

08004208 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f859 	bl	80042cc <prvGetNextExpireTime>
 800421a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f805 	bl	8004230 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004226:	f000 f8d5 	bl	80043d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800422a:	bf00      	nop
 800422c:	e7f0      	b.n	8004210 <prvTimerTask+0x8>
	...

08004230 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800423a:	f7ff fa2d 	bl	8003698 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800423e:	f107 0308 	add.w	r3, r7, #8
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f864 	bl	8004310 <prvSampleTimeNow>
 8004248:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d130      	bne.n	80042b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <prvProcessTimerOrBlockTask+0x3c>
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	429a      	cmp	r2, r3
 800425c:	d806      	bhi.n	800426c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800425e:	f7ff fa29 	bl	80036b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff81 	bl	800416c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800426a:	e024      	b.n	80042b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004272:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <prvProcessTimerOrBlockTask+0x90>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <prvProcessTimerOrBlockTask+0x50>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <prvProcessTimerOrBlockTask+0x52>
 8004280:	2300      	movs	r3, #0
 8004282:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004284:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <prvProcessTimerOrBlockTask+0x94>)
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	f7fe ff01 	bl	8003098 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004296:	f7ff fa0d 	bl	80036b4 <xTaskResumeAll>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <prvProcessTimerOrBlockTask+0x98>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
}
 80042b0:	e001      	b.n	80042b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042b2:	f7ff f9ff 	bl	80036b4 <xTaskResumeAll>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000de0 	.word	0x20000de0
 80042c4:	20000de4 	.word	0x20000de4
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042d4:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <prvGetNextExpireTime+0x40>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <prvGetNextExpireTime+0x16>
 80042de:	2201      	movs	r2, #1
 80042e0:	e000      	b.n	80042e4 <prvGetNextExpireTime+0x18>
 80042e2:	2200      	movs	r2, #0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042f0:	4b06      	ldr	r3, [pc, #24]	@ (800430c <prvGetNextExpireTime+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e001      	b.n	8004300 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004300:	68fb      	ldr	r3, [r7, #12]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	20000ddc 	.word	0x20000ddc

08004310 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004318:	f7ff fa6a 	bl	80037f0 <xTaskGetTickCount>
 800431c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <prvSampleTimeNow+0x3c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d205      	bcs.n	8004334 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004328:	f000 f93a 	bl	80045a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e002      	b.n	800433a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800433a:	4a04      	ldr	r2, [pc, #16]	@ (800434c <prvSampleTimeNow+0x3c>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004340:	68fb      	ldr	r3, [r7, #12]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000dec 	.word	0x20000dec

08004350 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d812      	bhi.n	800439c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	429a      	cmp	r2, r3
 8004382:	d302      	bcc.n	800438a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004384:	2301      	movs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e01b      	b.n	80043c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800438a:	4b10      	ldr	r3, [pc, #64]	@ (80043cc <prvInsertTimerInActiveList+0x7c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3304      	adds	r3, #4
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7fe f89b 	bl	80024d0 <vListInsert>
 800439a:	e012      	b.n	80043c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d206      	bcs.n	80043b2 <prvInsertTimerInActiveList+0x62>
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e007      	b.n	80043c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043b2:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <prvInsertTimerInActiveList+0x80>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fe f887 	bl	80024d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043c2:	697b      	ldr	r3, [r7, #20]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000de0 	.word	0x20000de0
 80043d0:	20000ddc 	.word	0x20000ddc

080043d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	@ 0x38
 80043d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043da:	e0ce      	b.n	800457a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da19      	bge.n	8004416 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	3304      	adds	r3, #4
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	61fb      	str	r3, [r7, #28]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800440c:	6850      	ldr	r0, [r2, #4]
 800440e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004410:	6892      	ldr	r2, [r2, #8]
 8004412:	4611      	mov	r1, r2
 8004414:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f2c0 80ae 	blt.w	800457a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800442a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe f886 	bl	8002540 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004434:	463b      	mov	r3, r7
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff6a 	bl	8004310 <prvSampleTimeNow>
 800443c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b09      	cmp	r3, #9
 8004442:	f200 8097 	bhi.w	8004574 <prvProcessReceivedCommands+0x1a0>
 8004446:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <prvProcessReceivedCommands+0x78>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004475 	.word	0x08004475
 8004450:	08004475 	.word	0x08004475
 8004454:	08004475 	.word	0x08004475
 8004458:	080044eb 	.word	0x080044eb
 800445c:	080044ff 	.word	0x080044ff
 8004460:	0800454b 	.word	0x0800454b
 8004464:	08004475 	.word	0x08004475
 8004468:	08004475 	.word	0x08004475
 800446c:	080044eb 	.word	0x080044eb
 8004470:	080044ff 	.word	0x080044ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	b2da      	uxtb	r2, r3
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	18d1      	adds	r1, r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004494:	f7ff ff5c 	bl	8004350 <prvInsertTimerInActiveList>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d06c      	beq.n	8004578 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800449e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d061      	beq.n	8004578 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	441a      	add	r2, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2300      	movs	r3, #0
 80044c2:	2100      	movs	r1, #0
 80044c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044c6:	f7ff fe03 	bl	80040d0 <xTimerGenericCommand>
 80044ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d152      	bne.n	8004578 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61bb      	str	r3, [r7, #24]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80044fc:	e03d      	b.n	800457a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	b2da      	uxtb	r2, r3
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	617b      	str	r3, [r7, #20]
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	e7fd      	b.n	8004532 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	18d1      	adds	r1, r2, r3
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004544:	f7ff ff04 	bl	8004350 <prvInsertTimerInActiveList>
					break;
 8004548:	e017      	b.n	800457a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800455a:	f000 fb87 	bl	8004c6c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800455e:	e00c      	b.n	800457a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004572:	e002      	b.n	800457a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <prvProcessReceivedCommands+0x1a6>
					break;
 8004578:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800457a:	4b08      	ldr	r3, [pc, #32]	@ (800459c <prvProcessReceivedCommands+0x1c8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	1d39      	adds	r1, r7, #4
 8004580:	2200      	movs	r2, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe faec 	bl	8002b60 <xQueueReceive>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f47f af26 	bne.w	80043dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	3730      	adds	r7, #48	@ 0x30
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000de4 	.word	0x20000de4

080045a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045a6:	e049      	b.n	800463c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004664 <prvSwitchTimerLists+0xc4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004664 <prvSwitchTimerLists+0xc4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fd ffbd 	bl	8002540 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02f      	beq.n	800463c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4413      	add	r3, r2
 80045e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d90e      	bls.n	800460c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <prvSwitchTimerLists+0xc4>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7fd ff63 	bl	80024d0 <vListInsert>
 800460a:	e017      	b.n	800463c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800460c:	2300      	movs	r3, #0
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	2100      	movs	r1, #0
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff fd5a 	bl	80040d0 <xTimerGenericCommand>
 800461c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	603b      	str	r3, [r7, #0]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800463c:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <prvSwitchTimerLists+0xc4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1b0      	bne.n	80045a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004646:	4b07      	ldr	r3, [pc, #28]	@ (8004664 <prvSwitchTimerLists+0xc4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <prvSwitchTimerLists+0xc8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <prvSwitchTimerLists+0xc4>)
 8004652:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004654:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <prvSwitchTimerLists+0xc8>)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6013      	str	r3, [r2, #0]
}
 800465a:	bf00      	nop
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000ddc 	.word	0x20000ddc
 8004668:	20000de0 	.word	0x20000de0

0800466c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004672:	f000 f92b 	bl	80048cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004676:	4b15      	ldr	r3, [pc, #84]	@ (80046cc <prvCheckForValidListAndQueue+0x60>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d120      	bne.n	80046c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800467e:	4814      	ldr	r0, [pc, #80]	@ (80046d0 <prvCheckForValidListAndQueue+0x64>)
 8004680:	f7fd fed8 	bl	8002434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004684:	4813      	ldr	r0, [pc, #76]	@ (80046d4 <prvCheckForValidListAndQueue+0x68>)
 8004686:	f7fd fed5 	bl	8002434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800468a:	4b13      	ldr	r3, [pc, #76]	@ (80046d8 <prvCheckForValidListAndQueue+0x6c>)
 800468c:	4a10      	ldr	r2, [pc, #64]	@ (80046d0 <prvCheckForValidListAndQueue+0x64>)
 800468e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004690:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <prvCheckForValidListAndQueue+0x70>)
 8004692:	4a10      	ldr	r2, [pc, #64]	@ (80046d4 <prvCheckForValidListAndQueue+0x68>)
 8004694:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <prvCheckForValidListAndQueue+0x74>)
 800469c:	4a11      	ldr	r2, [pc, #68]	@ (80046e4 <prvCheckForValidListAndQueue+0x78>)
 800469e:	2110      	movs	r1, #16
 80046a0:	200a      	movs	r0, #10
 80046a2:	f7fd ffe1 	bl	8002668 <xQueueGenericCreateStatic>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4a08      	ldr	r2, [pc, #32]	@ (80046cc <prvCheckForValidListAndQueue+0x60>)
 80046aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046ac:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <prvCheckForValidListAndQueue+0x60>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <prvCheckForValidListAndQueue+0x60>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	490b      	ldr	r1, [pc, #44]	@ (80046e8 <prvCheckForValidListAndQueue+0x7c>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fcc4 	bl	8003048 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046c0:	f000 f934 	bl	800492c <vPortExitCritical>
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000de4 	.word	0x20000de4
 80046d0:	20000db4 	.word	0x20000db4
 80046d4:	20000dc8 	.word	0x20000dc8
 80046d8:	20000ddc 	.word	0x20000ddc
 80046dc:	20000de0 	.word	0x20000de0
 80046e0:	20000e90 	.word	0x20000e90
 80046e4:	20000df0 	.word	0x20000df0
 80046e8:	08005928 	.word	0x08005928

080046ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3b04      	subs	r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b04      	subs	r3, #4
 800470a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b04      	subs	r3, #4
 800471a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800471c:	4a08      	ldr	r2, [pc, #32]	@ (8004740 <pxPortInitialiseStack+0x54>)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b14      	subs	r3, #20
 8004726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3b20      	subs	r3, #32
 8004732:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	08004745 	.word	0x08004745

08004744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800474e:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <prvTaskExitError+0x54>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d00b      	beq.n	8004770 <prvTaskExitError+0x2c>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60fb      	str	r3, [r7, #12]
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <prvTaskExitError+0x28>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60bb      	str	r3, [r7, #8]
}
 8004782:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004784:	bf00      	nop
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0fc      	beq.n	8004786 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	2000000c 	.word	0x2000000c
 800479c:	00000000 	.word	0x00000000

080047a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047a0:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <pxCurrentTCBConst2>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047aa:	f380 8809 	msr	PSP, r0
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8811 	msr	BASEPRI, r0
 80047ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80047be:	4770      	bx	lr

080047c0 <pxCurrentTCBConst2>:
 80047c0:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80047c8:	4806      	ldr	r0, [pc, #24]	@ (80047e4 <prvPortStartFirstTask+0x1c>)
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f380 8808 	msr	MSP, r0
 80047d2:	b662      	cpsie	i
 80047d4:	b661      	cpsie	f
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	df00      	svc	0
 80047e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047e2:	bf00      	nop
 80047e4:	e000ed08 	.word	0xe000ed08

080047e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ee:	4b32      	ldr	r3, [pc, #200]	@ (80048b8 <xPortStartScheduler+0xd0>)
 80047f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	@ 0xff
 80047fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004810:	b2da      	uxtb	r2, r3
 8004812:	4b2a      	ldr	r3, [pc, #168]	@ (80048bc <xPortStartScheduler+0xd4>)
 8004814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004816:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <xPortStartScheduler+0xd8>)
 8004818:	2207      	movs	r2, #7
 800481a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800481c:	e009      	b.n	8004832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800481e:	4b28      	ldr	r3, [pc, #160]	@ (80048c0 <xPortStartScheduler+0xd8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	4a26      	ldr	r2, [pc, #152]	@ (80048c0 <xPortStartScheduler+0xd8>)
 8004826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483a:	2b80      	cmp	r3, #128	@ 0x80
 800483c:	d0ef      	beq.n	800481e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800483e:	4b20      	ldr	r3, [pc, #128]	@ (80048c0 <xPortStartScheduler+0xd8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1c3 0307 	rsb	r3, r3, #7
 8004846:	2b04      	cmp	r3, #4
 8004848:	d00b      	beq.n	8004862 <xPortStartScheduler+0x7a>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60bb      	str	r3, [r7, #8]
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	e7fd      	b.n	800485e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004862:	4b17      	ldr	r3, [pc, #92]	@ (80048c0 <xPortStartScheduler+0xd8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <xPortStartScheduler+0xd8>)
 800486a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800486c:	4b14      	ldr	r3, [pc, #80]	@ (80048c0 <xPortStartScheduler+0xd8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004874:	4a12      	ldr	r2, [pc, #72]	@ (80048c0 <xPortStartScheduler+0xd8>)
 8004876:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004880:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <xPortStartScheduler+0xdc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0f      	ldr	r2, [pc, #60]	@ (80048c4 <xPortStartScheduler+0xdc>)
 8004886:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800488a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800488c:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <xPortStartScheduler+0xdc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0c      	ldr	r2, [pc, #48]	@ (80048c4 <xPortStartScheduler+0xdc>)
 8004892:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004896:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004898:	f000 f8b8 	bl	8004a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <xPortStartScheduler+0xe0>)
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048a2:	f7ff ff91 	bl	80047c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048a6:	f7ff f86b 	bl	8003980 <vTaskSwitchContext>
	prvTaskExitError();
 80048aa:	f7ff ff4b 	bl	8004744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	e000e400 	.word	0xe000e400
 80048bc:	20000ee0 	.word	0x20000ee0
 80048c0:	20000ee4 	.word	0x20000ee4
 80048c4:	e000ed20 	.word	0xe000ed20
 80048c8:	2000000c 	.word	0x2000000c

080048cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	607b      	str	r3, [r7, #4]
}
 80048e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004924 <vPortEnterCritical+0x58>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3301      	adds	r3, #1
 80048ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004924 <vPortEnterCritical+0x58>)
 80048ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <vPortEnterCritical+0x58>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d110      	bne.n	800491a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <vPortEnterCritical+0x5c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <vPortEnterCritical+0x4e>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	603b      	str	r3, [r7, #0]
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	e7fd      	b.n	8004916 <vPortEnterCritical+0x4a>
	}
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	2000000c 	.word	0x2000000c
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004932:	4b12      	ldr	r3, [pc, #72]	@ (800497c <vPortExitCritical+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <vPortExitCritical+0x26>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	607b      	str	r3, [r7, #4]
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004952:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <vPortExitCritical+0x50>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	4a08      	ldr	r2, [pc, #32]	@ (800497c <vPortExitCritical+0x50>)
 800495a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800495c:	4b07      	ldr	r3, [pc, #28]	@ (800497c <vPortExitCritical+0x50>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <vPortExitCritical+0x44>
 8004964:	2300      	movs	r3, #0
 8004966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	2000000c 	.word	0x2000000c

08004980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004980:	f3ef 8009 	mrs	r0, PSP
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <pxCurrentTCBConst>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004990:	6010      	str	r0, [r2, #0]
 8004992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004996:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800499a:	f380 8811 	msr	BASEPRI, r0
 800499e:	f7fe ffef 	bl	8003980 <vTaskSwitchContext>
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	6808      	ldr	r0, [r1, #0]
 80049b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049b6:	f380 8809 	msr	PSP, r0
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	4770      	bx	lr

080049c0 <pxCurrentTCBConst>:
 80049c0:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049e2:	f7fe ff13 	bl	800380c <xTaskIncrementTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <xPortSysTickHandler+0x40>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f383 8811 	msr	BASEPRI, r3
}
 80049fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <vPortSetupTimerInterrupt+0x30>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a16:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a1c:	4b09      	ldr	r3, [pc, #36]	@ (8004a44 <vPortSetupTimerInterrupt+0x38>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <vPortSetupTimerInterrupt+0x3c>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	4a08      	ldr	r2, [pc, #32]	@ (8004a4c <vPortSetupTimerInterrupt+0x40>)
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a2e:	4b03      	ldr	r3, [pc, #12]	@ (8004a3c <vPortSetupTimerInterrupt+0x30>)
 8004a30:	2207      	movs	r2, #7
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e010 	.word	0xe000e010
 8004a40:	e000e018 	.word	0xe000e018
 8004a44:	20000000 	.word	0x20000000
 8004a48:	10624dd3 	.word	0x10624dd3
 8004a4c:	e000e014 	.word	0xe000e014

08004a50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a56:	f3ef 8305 	mrs	r3, IPSR
 8004a5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d915      	bls.n	8004a8e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a62:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <vPortValidateInterruptPriority+0x70>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a6c:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <vPortValidateInterruptPriority+0x74>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	7afa      	ldrb	r2, [r7, #11]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d20b      	bcs.n	8004a8e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	607b      	str	r3, [r7, #4]
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	e7fd      	b.n	8004a8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <vPortValidateInterruptPriority+0x78>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <vPortValidateInterruptPriority+0x7c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d90b      	bls.n	8004ab6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	603b      	str	r3, [r7, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <vPortValidateInterruptPriority+0x62>
	}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	e000e3f0 	.word	0xe000e3f0
 8004ac4:	20000ee0 	.word	0x20000ee0
 8004ac8:	e000ed0c 	.word	0xe000ed0c
 8004acc:	20000ee4 	.word	0x20000ee4

08004ad0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	@ 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004adc:	f7fe fddc 	bl	8003698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8004c54 <pvPortMalloc+0x184>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ae8:	f000 f924 	bl	8004d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004aec:	4b5a      	ldr	r3, [pc, #360]	@ (8004c58 <pvPortMalloc+0x188>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 8095 	bne.w	8004c24 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01e      	beq.n	8004b3e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b00:	2208      	movs	r2, #8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d015      	beq.n	8004b3e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f023 0307 	bic.w	r3, r3, #7
 8004b18:	3308      	adds	r3, #8
 8004b1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <pvPortMalloc+0x6e>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	617b      	str	r3, [r7, #20]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d06f      	beq.n	8004c24 <pvPortMalloc+0x154>
 8004b44:	4b45      	ldr	r3, [pc, #276]	@ (8004c5c <pvPortMalloc+0x18c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d86a      	bhi.n	8004c24 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b4e:	4b44      	ldr	r3, [pc, #272]	@ (8004c60 <pvPortMalloc+0x190>)
 8004b50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b52:	4b43      	ldr	r3, [pc, #268]	@ (8004c60 <pvPortMalloc+0x190>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b58:	e004      	b.n	8004b64 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d903      	bls.n	8004b76 <pvPortMalloc+0xa6>
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f1      	bne.n	8004b5a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b76:	4b37      	ldr	r3, [pc, #220]	@ (8004c54 <pvPortMalloc+0x184>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d051      	beq.n	8004c24 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2208      	movs	r2, #8
 8004b86:	4413      	add	r3, r2
 8004b88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	1ad2      	subs	r2, r2, r3
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d920      	bls.n	8004be4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <pvPortMalloc+0xfc>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	613b      	str	r3, [r7, #16]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bde:	69b8      	ldr	r0, [r7, #24]
 8004be0:	f000 f90a 	bl	8004df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <pvPortMalloc+0x18c>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	4a1b      	ldr	r2, [pc, #108]	@ (8004c5c <pvPortMalloc+0x18c>)
 8004bf0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c5c <pvPortMalloc+0x18c>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c64 <pvPortMalloc+0x194>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d203      	bcs.n	8004c06 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bfe:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <pvPortMalloc+0x18c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a18      	ldr	r2, [pc, #96]	@ (8004c64 <pvPortMalloc+0x194>)
 8004c04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4b13      	ldr	r3, [pc, #76]	@ (8004c58 <pvPortMalloc+0x188>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c1a:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <pvPortMalloc+0x198>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4a11      	ldr	r2, [pc, #68]	@ (8004c68 <pvPortMalloc+0x198>)
 8004c22:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c24:	f7fe fd46 	bl	80036b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <pvPortMalloc+0x17a>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60fb      	str	r3, [r7, #12]
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	e7fd      	b.n	8004c46 <pvPortMalloc+0x176>
	return pvReturn;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3728      	adds	r7, #40	@ 0x28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20001af0 	.word	0x20001af0
 8004c58:	20001b04 	.word	0x20001b04
 8004c5c:	20001af4 	.word	0x20001af4
 8004c60:	20001ae8 	.word	0x20001ae8
 8004c64:	20001af8 	.word	0x20001af8
 8004c68:	20001afc 	.word	0x20001afc

08004c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d04f      	beq.n	8004d1e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c7e:	2308      	movs	r3, #8
 8004c80:	425b      	negs	r3, r3
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4413      	add	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	4b25      	ldr	r3, [pc, #148]	@ (8004d28 <vPortFree+0xbc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <vPortFree+0x46>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	60fb      	str	r3, [r7, #12]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <vPortFree+0x66>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	60bb      	str	r3, [r7, #8]
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	e7fd      	b.n	8004cce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <vPortFree+0xbc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01e      	beq.n	8004d1e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11a      	bne.n	8004d1e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	4b0e      	ldr	r3, [pc, #56]	@ (8004d28 <vPortFree+0xbc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cf8:	f7fe fcce 	bl	8003698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <vPortFree+0xc0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4413      	add	r3, r2
 8004d06:	4a09      	ldr	r2, [pc, #36]	@ (8004d2c <vPortFree+0xc0>)
 8004d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d0a:	6938      	ldr	r0, [r7, #16]
 8004d0c:	f000 f874 	bl	8004df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d10:	4b07      	ldr	r3, [pc, #28]	@ (8004d30 <vPortFree+0xc4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3301      	adds	r3, #1
 8004d16:	4a06      	ldr	r2, [pc, #24]	@ (8004d30 <vPortFree+0xc4>)
 8004d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d1a:	f7fe fccb 	bl	80036b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d1e:	bf00      	nop
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20001b04 	.word	0x20001b04
 8004d2c:	20001af4 	.word	0x20001af4
 8004d30:	20001b00 	.word	0x20001b00

08004d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d40:	4b27      	ldr	r3, [pc, #156]	@ (8004de0 <prvHeapInit+0xac>)
 8004d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00c      	beq.n	8004d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3307      	adds	r3, #7
 8004d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0307 	bic.w	r3, r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <prvHeapInit+0xac>)
 8004d64:	4413      	add	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004de4 <prvHeapInit+0xb0>)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d72:	4b1c      	ldr	r3, [pc, #112]	@ (8004de4 <prvHeapInit+0xb0>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d80:	2208      	movs	r2, #8
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0307 	bic.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a15      	ldr	r2, [pc, #84]	@ (8004de8 <prvHeapInit+0xb4>)
 8004d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d96:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <prvHeapInit+0xb4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <prvHeapInit+0xb4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	1ad2      	subs	r2, r2, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <prvHeapInit+0xb4>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004dec <prvHeapInit+0xb8>)
 8004dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <prvHeapInit+0xbc>)
 8004dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dcc:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <prvHeapInit+0xc0>)
 8004dce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000ee8 	.word	0x20000ee8
 8004de4:	20001ae8 	.word	0x20001ae8
 8004de8:	20001af0 	.word	0x20001af0
 8004dec:	20001af8 	.word	0x20001af8
 8004df0:	20001af4 	.word	0x20001af4
 8004df4:	20001b04 	.word	0x20001b04

08004df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e00:	4b27      	ldr	r3, [pc, #156]	@ (8004ea0 <prvInsertBlockIntoFreeList+0xa8>)
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e002      	b.n	8004e0c <prvInsertBlockIntoFreeList+0x14>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d8f7      	bhi.n	8004e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4413      	add	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d108      	bne.n	8004e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	441a      	add	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	441a      	add	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d118      	bne.n	8004e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b14      	ldr	r3, [pc, #80]	@ (8004ea4 <prvInsertBlockIntoFreeList+0xac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d00d      	beq.n	8004e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	441a      	add	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e008      	b.n	8004e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <prvInsertBlockIntoFreeList+0xac>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e003      	b.n	8004e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d002      	beq.n	8004e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	20001ae8 	.word	0x20001ae8
 8004ea4:	20001af0 	.word	0x20001af0

08004ea8 <siprintf>:
 8004ea8:	b40e      	push	{r1, r2, r3}
 8004eaa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	2400      	movs	r4, #0
 8004eb2:	b09d      	sub	sp, #116	@ 0x74
 8004eb4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004eb6:	9002      	str	r0, [sp, #8]
 8004eb8:	9006      	str	r0, [sp, #24]
 8004eba:	9107      	str	r1, [sp, #28]
 8004ebc:	9104      	str	r1, [sp, #16]
 8004ebe:	4809      	ldr	r0, [pc, #36]	@ (8004ee4 <siprintf+0x3c>)
 8004ec0:	4909      	ldr	r1, [pc, #36]	@ (8004ee8 <siprintf+0x40>)
 8004ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ec6:	9105      	str	r1, [sp, #20]
 8004ec8:	6800      	ldr	r0, [r0, #0]
 8004eca:	a902      	add	r1, sp, #8
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ed0:	f000 f9fe 	bl	80052d0 <_svfiprintf_r>
 8004ed4:	9b02      	ldr	r3, [sp, #8]
 8004ed6:	701c      	strb	r4, [r3, #0]
 8004ed8:	b01d      	add	sp, #116	@ 0x74
 8004eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ede:	b003      	add	sp, #12
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000010 	.word	0x20000010
 8004ee8:	ffff0208 	.word	0xffff0208

08004eec <memset>:
 8004eec:	4603      	mov	r3, r0
 8004eee:	4402      	add	r2, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <_reclaim_reent>:
 8004efc:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb4 <_reclaim_reent+0xb8>)
 8004efe:	b570      	push	{r4, r5, r6, lr}
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4604      	mov	r4, r0
 8004f04:	4283      	cmp	r3, r0
 8004f06:	d053      	beq.n	8004fb0 <_reclaim_reent+0xb4>
 8004f08:	69c3      	ldr	r3, [r0, #28]
 8004f0a:	b31b      	cbz	r3, 8004f54 <_reclaim_reent+0x58>
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	b163      	cbz	r3, 8004f2a <_reclaim_reent+0x2e>
 8004f10:	2500      	movs	r5, #0
 8004f12:	69e3      	ldr	r3, [r4, #28]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	5959      	ldr	r1, [r3, r5]
 8004f18:	b9b1      	cbnz	r1, 8004f48 <_reclaim_reent+0x4c>
 8004f1a:	3504      	adds	r5, #4
 8004f1c:	2d80      	cmp	r5, #128	@ 0x80
 8004f1e:	d1f8      	bne.n	8004f12 <_reclaim_reent+0x16>
 8004f20:	69e3      	ldr	r3, [r4, #28]
 8004f22:	4620      	mov	r0, r4
 8004f24:	68d9      	ldr	r1, [r3, #12]
 8004f26:	f000 f881 	bl	800502c <_free_r>
 8004f2a:	69e3      	ldr	r3, [r4, #28]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	b111      	cbz	r1, 8004f36 <_reclaim_reent+0x3a>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 f87b 	bl	800502c <_free_r>
 8004f36:	69e3      	ldr	r3, [r4, #28]
 8004f38:	689d      	ldr	r5, [r3, #8]
 8004f3a:	b15d      	cbz	r5, 8004f54 <_reclaim_reent+0x58>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4620      	mov	r0, r4
 8004f40:	682d      	ldr	r5, [r5, #0]
 8004f42:	f000 f873 	bl	800502c <_free_r>
 8004f46:	e7f8      	b.n	8004f3a <_reclaim_reent+0x3e>
 8004f48:	680e      	ldr	r6, [r1, #0]
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f86e 	bl	800502c <_free_r>
 8004f50:	4631      	mov	r1, r6
 8004f52:	e7e1      	b.n	8004f18 <_reclaim_reent+0x1c>
 8004f54:	6961      	ldr	r1, [r4, #20]
 8004f56:	b111      	cbz	r1, 8004f5e <_reclaim_reent+0x62>
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 f867 	bl	800502c <_free_r>
 8004f5e:	69e1      	ldr	r1, [r4, #28]
 8004f60:	b111      	cbz	r1, 8004f68 <_reclaim_reent+0x6c>
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 f862 	bl	800502c <_free_r>
 8004f68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f6a:	b111      	cbz	r1, 8004f72 <_reclaim_reent+0x76>
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f000 f85d 	bl	800502c <_free_r>
 8004f72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f74:	b111      	cbz	r1, 8004f7c <_reclaim_reent+0x80>
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 f858 	bl	800502c <_free_r>
 8004f7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004f7e:	b111      	cbz	r1, 8004f86 <_reclaim_reent+0x8a>
 8004f80:	4620      	mov	r0, r4
 8004f82:	f000 f853 	bl	800502c <_free_r>
 8004f86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004f88:	b111      	cbz	r1, 8004f90 <_reclaim_reent+0x94>
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f000 f84e 	bl	800502c <_free_r>
 8004f90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f92:	b111      	cbz	r1, 8004f9a <_reclaim_reent+0x9e>
 8004f94:	4620      	mov	r0, r4
 8004f96:	f000 f849 	bl	800502c <_free_r>
 8004f9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f9c:	b111      	cbz	r1, 8004fa4 <_reclaim_reent+0xa8>
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 f844 	bl	800502c <_free_r>
 8004fa4:	6a23      	ldr	r3, [r4, #32]
 8004fa6:	b11b      	cbz	r3, 8004fb0 <_reclaim_reent+0xb4>
 8004fa8:	4620      	mov	r0, r4
 8004faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fae:	4718      	bx	r3
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000010 	.word	0x20000010

08004fb8 <__errno>:
 8004fb8:	4b01      	ldr	r3, [pc, #4]	@ (8004fc0 <__errno+0x8>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000010 	.word	0x20000010

08004fc4 <__libc_init_array>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	4d0c      	ldr	r5, [pc, #48]	@ (8004ffc <__libc_init_array+0x38>)
 8004fca:	4c0d      	ldr	r4, [pc, #52]	@ (8005000 <__libc_init_array+0x3c>)
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	42a6      	cmp	r6, r4
 8004fd2:	d109      	bne.n	8004fe8 <__libc_init_array+0x24>
 8004fd4:	f000 fc76 	bl	80058c4 <_init>
 8004fd8:	2600      	movs	r6, #0
 8004fda:	4d0a      	ldr	r5, [pc, #40]	@ (8005004 <__libc_init_array+0x40>)
 8004fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8005008 <__libc_init_array+0x44>)
 8004fde:	1b64      	subs	r4, r4, r5
 8004fe0:	10a4      	asrs	r4, r4, #2
 8004fe2:	42a6      	cmp	r6, r4
 8004fe4:	d105      	bne.n	8004ff2 <__libc_init_array+0x2e>
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fec:	4798      	blx	r3
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7ee      	b.n	8004fd0 <__libc_init_array+0xc>
 8004ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff6:	4798      	blx	r3
 8004ff8:	3601      	adds	r6, #1
 8004ffa:	e7f2      	b.n	8004fe2 <__libc_init_array+0x1e>
 8004ffc:	080059f8 	.word	0x080059f8
 8005000:	080059f8 	.word	0x080059f8
 8005004:	080059f8 	.word	0x080059f8
 8005008:	080059fc 	.word	0x080059fc

0800500c <__retarget_lock_acquire_recursive>:
 800500c:	4770      	bx	lr

0800500e <__retarget_lock_release_recursive>:
 800500e:	4770      	bx	lr

08005010 <memcpy>:
 8005010:	440a      	add	r2, r1
 8005012:	4291      	cmp	r1, r2
 8005014:	f100 33ff 	add.w	r3, r0, #4294967295
 8005018:	d100      	bne.n	800501c <memcpy+0xc>
 800501a:	4770      	bx	lr
 800501c:	b510      	push	{r4, lr}
 800501e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005022:	4291      	cmp	r1, r2
 8005024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005028:	d1f9      	bne.n	800501e <memcpy+0xe>
 800502a:	bd10      	pop	{r4, pc}

0800502c <_free_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4605      	mov	r5, r0
 8005030:	2900      	cmp	r1, #0
 8005032:	d040      	beq.n	80050b6 <_free_r+0x8a>
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f0c      	subs	r4, r1, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfb8      	it	lt
 800503e:	18e4      	addlt	r4, r4, r3
 8005040:	f000 f8de 	bl	8005200 <__malloc_lock>
 8005044:	4a1c      	ldr	r2, [pc, #112]	@ (80050b8 <_free_r+0x8c>)
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	b933      	cbnz	r3, 8005058 <_free_r+0x2c>
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6014      	str	r4, [r2, #0]
 800504e:	4628      	mov	r0, r5
 8005050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005054:	f000 b8da 	b.w	800520c <__malloc_unlock>
 8005058:	42a3      	cmp	r3, r4
 800505a:	d908      	bls.n	800506e <_free_r+0x42>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	1821      	adds	r1, r4, r0
 8005060:	428b      	cmp	r3, r1
 8005062:	bf01      	itttt	eq
 8005064:	6819      	ldreq	r1, [r3, #0]
 8005066:	685b      	ldreq	r3, [r3, #4]
 8005068:	1809      	addeq	r1, r1, r0
 800506a:	6021      	streq	r1, [r4, #0]
 800506c:	e7ed      	b.n	800504a <_free_r+0x1e>
 800506e:	461a      	mov	r2, r3
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	b10b      	cbz	r3, 8005078 <_free_r+0x4c>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d9fa      	bls.n	800506e <_free_r+0x42>
 8005078:	6811      	ldr	r1, [r2, #0]
 800507a:	1850      	adds	r0, r2, r1
 800507c:	42a0      	cmp	r0, r4
 800507e:	d10b      	bne.n	8005098 <_free_r+0x6c>
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	4401      	add	r1, r0
 8005084:	1850      	adds	r0, r2, r1
 8005086:	4283      	cmp	r3, r0
 8005088:	6011      	str	r1, [r2, #0]
 800508a:	d1e0      	bne.n	800504e <_free_r+0x22>
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4408      	add	r0, r1
 8005092:	6010      	str	r0, [r2, #0]
 8005094:	6053      	str	r3, [r2, #4]
 8005096:	e7da      	b.n	800504e <_free_r+0x22>
 8005098:	d902      	bls.n	80050a0 <_free_r+0x74>
 800509a:	230c      	movs	r3, #12
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	e7d6      	b.n	800504e <_free_r+0x22>
 80050a0:	6820      	ldr	r0, [r4, #0]
 80050a2:	1821      	adds	r1, r4, r0
 80050a4:	428b      	cmp	r3, r1
 80050a6:	bf01      	itttt	eq
 80050a8:	6819      	ldreq	r1, [r3, #0]
 80050aa:	685b      	ldreq	r3, [r3, #4]
 80050ac:	1809      	addeq	r1, r1, r0
 80050ae:	6021      	streq	r1, [r4, #0]
 80050b0:	6063      	str	r3, [r4, #4]
 80050b2:	6054      	str	r4, [r2, #4]
 80050b4:	e7cb      	b.n	800504e <_free_r+0x22>
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20001c4c 	.word	0x20001c4c

080050bc <sbrk_aligned>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4e0f      	ldr	r6, [pc, #60]	@ (80050fc <sbrk_aligned+0x40>)
 80050c0:	460c      	mov	r4, r1
 80050c2:	6831      	ldr	r1, [r6, #0]
 80050c4:	4605      	mov	r5, r0
 80050c6:	b911      	cbnz	r1, 80050ce <sbrk_aligned+0x12>
 80050c8:	f000 fba8 	bl	800581c <_sbrk_r>
 80050cc:	6030      	str	r0, [r6, #0]
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 fba3 	bl	800581c <_sbrk_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d103      	bne.n	80050e2 <sbrk_aligned+0x26>
 80050da:	f04f 34ff 	mov.w	r4, #4294967295
 80050de:	4620      	mov	r0, r4
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
 80050e2:	1cc4      	adds	r4, r0, #3
 80050e4:	f024 0403 	bic.w	r4, r4, #3
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d0f8      	beq.n	80050de <sbrk_aligned+0x22>
 80050ec:	1a21      	subs	r1, r4, r0
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 fb94 	bl	800581c <_sbrk_r>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d1f2      	bne.n	80050de <sbrk_aligned+0x22>
 80050f8:	e7ef      	b.n	80050da <sbrk_aligned+0x1e>
 80050fa:	bf00      	nop
 80050fc:	20001c48 	.word	0x20001c48

08005100 <_malloc_r>:
 8005100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005104:	1ccd      	adds	r5, r1, #3
 8005106:	f025 0503 	bic.w	r5, r5, #3
 800510a:	3508      	adds	r5, #8
 800510c:	2d0c      	cmp	r5, #12
 800510e:	bf38      	it	cc
 8005110:	250c      	movcc	r5, #12
 8005112:	2d00      	cmp	r5, #0
 8005114:	4606      	mov	r6, r0
 8005116:	db01      	blt.n	800511c <_malloc_r+0x1c>
 8005118:	42a9      	cmp	r1, r5
 800511a:	d904      	bls.n	8005126 <_malloc_r+0x26>
 800511c:	230c      	movs	r3, #12
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	2000      	movs	r0, #0
 8005122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051fc <_malloc_r+0xfc>
 800512a:	f000 f869 	bl	8005200 <__malloc_lock>
 800512e:	f8d8 3000 	ldr.w	r3, [r8]
 8005132:	461c      	mov	r4, r3
 8005134:	bb44      	cbnz	r4, 8005188 <_malloc_r+0x88>
 8005136:	4629      	mov	r1, r5
 8005138:	4630      	mov	r0, r6
 800513a:	f7ff ffbf 	bl	80050bc <sbrk_aligned>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	4604      	mov	r4, r0
 8005142:	d158      	bne.n	80051f6 <_malloc_r+0xf6>
 8005144:	f8d8 4000 	ldr.w	r4, [r8]
 8005148:	4627      	mov	r7, r4
 800514a:	2f00      	cmp	r7, #0
 800514c:	d143      	bne.n	80051d6 <_malloc_r+0xd6>
 800514e:	2c00      	cmp	r4, #0
 8005150:	d04b      	beq.n	80051ea <_malloc_r+0xea>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	4639      	mov	r1, r7
 8005156:	4630      	mov	r0, r6
 8005158:	eb04 0903 	add.w	r9, r4, r3
 800515c:	f000 fb5e 	bl	800581c <_sbrk_r>
 8005160:	4581      	cmp	r9, r0
 8005162:	d142      	bne.n	80051ea <_malloc_r+0xea>
 8005164:	6821      	ldr	r1, [r4, #0]
 8005166:	4630      	mov	r0, r6
 8005168:	1a6d      	subs	r5, r5, r1
 800516a:	4629      	mov	r1, r5
 800516c:	f7ff ffa6 	bl	80050bc <sbrk_aligned>
 8005170:	3001      	adds	r0, #1
 8005172:	d03a      	beq.n	80051ea <_malloc_r+0xea>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	442b      	add	r3, r5
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	f8d8 3000 	ldr.w	r3, [r8]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	bb62      	cbnz	r2, 80051dc <_malloc_r+0xdc>
 8005182:	f8c8 7000 	str.w	r7, [r8]
 8005186:	e00f      	b.n	80051a8 <_malloc_r+0xa8>
 8005188:	6822      	ldr	r2, [r4, #0]
 800518a:	1b52      	subs	r2, r2, r5
 800518c:	d420      	bmi.n	80051d0 <_malloc_r+0xd0>
 800518e:	2a0b      	cmp	r2, #11
 8005190:	d917      	bls.n	80051c2 <_malloc_r+0xc2>
 8005192:	1961      	adds	r1, r4, r5
 8005194:	42a3      	cmp	r3, r4
 8005196:	6025      	str	r5, [r4, #0]
 8005198:	bf18      	it	ne
 800519a:	6059      	strne	r1, [r3, #4]
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	bf08      	it	eq
 80051a0:	f8c8 1000 	streq.w	r1, [r8]
 80051a4:	5162      	str	r2, [r4, r5]
 80051a6:	604b      	str	r3, [r1, #4]
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 f82f 	bl	800520c <__malloc_unlock>
 80051ae:	f104 000b 	add.w	r0, r4, #11
 80051b2:	1d23      	adds	r3, r4, #4
 80051b4:	f020 0007 	bic.w	r0, r0, #7
 80051b8:	1ac2      	subs	r2, r0, r3
 80051ba:	bf1c      	itt	ne
 80051bc:	1a1b      	subne	r3, r3, r0
 80051be:	50a3      	strne	r3, [r4, r2]
 80051c0:	e7af      	b.n	8005122 <_malloc_r+0x22>
 80051c2:	6862      	ldr	r2, [r4, #4]
 80051c4:	42a3      	cmp	r3, r4
 80051c6:	bf0c      	ite	eq
 80051c8:	f8c8 2000 	streq.w	r2, [r8]
 80051cc:	605a      	strne	r2, [r3, #4]
 80051ce:	e7eb      	b.n	80051a8 <_malloc_r+0xa8>
 80051d0:	4623      	mov	r3, r4
 80051d2:	6864      	ldr	r4, [r4, #4]
 80051d4:	e7ae      	b.n	8005134 <_malloc_r+0x34>
 80051d6:	463c      	mov	r4, r7
 80051d8:	687f      	ldr	r7, [r7, #4]
 80051da:	e7b6      	b.n	800514a <_malloc_r+0x4a>
 80051dc:	461a      	mov	r2, r3
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d1fb      	bne.n	80051dc <_malloc_r+0xdc>
 80051e4:	2300      	movs	r3, #0
 80051e6:	6053      	str	r3, [r2, #4]
 80051e8:	e7de      	b.n	80051a8 <_malloc_r+0xa8>
 80051ea:	230c      	movs	r3, #12
 80051ec:	4630      	mov	r0, r6
 80051ee:	6033      	str	r3, [r6, #0]
 80051f0:	f000 f80c 	bl	800520c <__malloc_unlock>
 80051f4:	e794      	b.n	8005120 <_malloc_r+0x20>
 80051f6:	6005      	str	r5, [r0, #0]
 80051f8:	e7d6      	b.n	80051a8 <_malloc_r+0xa8>
 80051fa:	bf00      	nop
 80051fc:	20001c4c 	.word	0x20001c4c

08005200 <__malloc_lock>:
 8005200:	4801      	ldr	r0, [pc, #4]	@ (8005208 <__malloc_lock+0x8>)
 8005202:	f7ff bf03 	b.w	800500c <__retarget_lock_acquire_recursive>
 8005206:	bf00      	nop
 8005208:	20001c44 	.word	0x20001c44

0800520c <__malloc_unlock>:
 800520c:	4801      	ldr	r0, [pc, #4]	@ (8005214 <__malloc_unlock+0x8>)
 800520e:	f7ff befe 	b.w	800500e <__retarget_lock_release_recursive>
 8005212:	bf00      	nop
 8005214:	20001c44 	.word	0x20001c44

08005218 <__ssputs_r>:
 8005218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	461f      	mov	r7, r3
 800521e:	688e      	ldr	r6, [r1, #8]
 8005220:	4682      	mov	sl, r0
 8005222:	42be      	cmp	r6, r7
 8005224:	460c      	mov	r4, r1
 8005226:	4690      	mov	r8, r2
 8005228:	680b      	ldr	r3, [r1, #0]
 800522a:	d82d      	bhi.n	8005288 <__ssputs_r+0x70>
 800522c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005230:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005234:	d026      	beq.n	8005284 <__ssputs_r+0x6c>
 8005236:	6965      	ldr	r5, [r4, #20]
 8005238:	6909      	ldr	r1, [r1, #16]
 800523a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800523e:	eba3 0901 	sub.w	r9, r3, r1
 8005242:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005246:	1c7b      	adds	r3, r7, #1
 8005248:	444b      	add	r3, r9
 800524a:	106d      	asrs	r5, r5, #1
 800524c:	429d      	cmp	r5, r3
 800524e:	bf38      	it	cc
 8005250:	461d      	movcc	r5, r3
 8005252:	0553      	lsls	r3, r2, #21
 8005254:	d527      	bpl.n	80052a6 <__ssputs_r+0x8e>
 8005256:	4629      	mov	r1, r5
 8005258:	f7ff ff52 	bl	8005100 <_malloc_r>
 800525c:	4606      	mov	r6, r0
 800525e:	b360      	cbz	r0, 80052ba <__ssputs_r+0xa2>
 8005260:	464a      	mov	r2, r9
 8005262:	6921      	ldr	r1, [r4, #16]
 8005264:	f7ff fed4 	bl	8005010 <memcpy>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800526e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	6126      	str	r6, [r4, #16]
 8005276:	444e      	add	r6, r9
 8005278:	6026      	str	r6, [r4, #0]
 800527a:	463e      	mov	r6, r7
 800527c:	6165      	str	r5, [r4, #20]
 800527e:	eba5 0509 	sub.w	r5, r5, r9
 8005282:	60a5      	str	r5, [r4, #8]
 8005284:	42be      	cmp	r6, r7
 8005286:	d900      	bls.n	800528a <__ssputs_r+0x72>
 8005288:	463e      	mov	r6, r7
 800528a:	4632      	mov	r2, r6
 800528c:	4641      	mov	r1, r8
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	f000 faaa 	bl	80057e8 <memmove>
 8005294:	2000      	movs	r0, #0
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	1b9b      	subs	r3, r3, r6
 800529a:	60a3      	str	r3, [r4, #8]
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	4433      	add	r3, r6
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a6:	462a      	mov	r2, r5
 80052a8:	f000 fad6 	bl	8005858 <_realloc_r>
 80052ac:	4606      	mov	r6, r0
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d1e0      	bne.n	8005274 <__ssputs_r+0x5c>
 80052b2:	4650      	mov	r0, sl
 80052b4:	6921      	ldr	r1, [r4, #16]
 80052b6:	f7ff feb9 	bl	800502c <_free_r>
 80052ba:	230c      	movs	r3, #12
 80052bc:	f8ca 3000 	str.w	r3, [sl]
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f04f 30ff 	mov.w	r0, #4294967295
 80052c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	e7e9      	b.n	80052a2 <__ssputs_r+0x8a>
	...

080052d0 <_svfiprintf_r>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	4698      	mov	r8, r3
 80052d6:	898b      	ldrh	r3, [r1, #12]
 80052d8:	4607      	mov	r7, r0
 80052da:	061b      	lsls	r3, r3, #24
 80052dc:	460d      	mov	r5, r1
 80052de:	4614      	mov	r4, r2
 80052e0:	b09d      	sub	sp, #116	@ 0x74
 80052e2:	d510      	bpl.n	8005306 <_svfiprintf_r+0x36>
 80052e4:	690b      	ldr	r3, [r1, #16]
 80052e6:	b973      	cbnz	r3, 8005306 <_svfiprintf_r+0x36>
 80052e8:	2140      	movs	r1, #64	@ 0x40
 80052ea:	f7ff ff09 	bl	8005100 <_malloc_r>
 80052ee:	6028      	str	r0, [r5, #0]
 80052f0:	6128      	str	r0, [r5, #16]
 80052f2:	b930      	cbnz	r0, 8005302 <_svfiprintf_r+0x32>
 80052f4:	230c      	movs	r3, #12
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	b01d      	add	sp, #116	@ 0x74
 80052fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005302:	2340      	movs	r3, #64	@ 0x40
 8005304:	616b      	str	r3, [r5, #20]
 8005306:	2300      	movs	r3, #0
 8005308:	9309      	str	r3, [sp, #36]	@ 0x24
 800530a:	2320      	movs	r3, #32
 800530c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005310:	2330      	movs	r3, #48	@ 0x30
 8005312:	f04f 0901 	mov.w	r9, #1
 8005316:	f8cd 800c 	str.w	r8, [sp, #12]
 800531a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80054b4 <_svfiprintf_r+0x1e4>
 800531e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005322:	4623      	mov	r3, r4
 8005324:	469a      	mov	sl, r3
 8005326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800532a:	b10a      	cbz	r2, 8005330 <_svfiprintf_r+0x60>
 800532c:	2a25      	cmp	r2, #37	@ 0x25
 800532e:	d1f9      	bne.n	8005324 <_svfiprintf_r+0x54>
 8005330:	ebba 0b04 	subs.w	fp, sl, r4
 8005334:	d00b      	beq.n	800534e <_svfiprintf_r+0x7e>
 8005336:	465b      	mov	r3, fp
 8005338:	4622      	mov	r2, r4
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ff6b 	bl	8005218 <__ssputs_r>
 8005342:	3001      	adds	r0, #1
 8005344:	f000 80a7 	beq.w	8005496 <_svfiprintf_r+0x1c6>
 8005348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800534a:	445a      	add	r2, fp
 800534c:	9209      	str	r2, [sp, #36]	@ 0x24
 800534e:	f89a 3000 	ldrb.w	r3, [sl]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 809f 	beq.w	8005496 <_svfiprintf_r+0x1c6>
 8005358:	2300      	movs	r3, #0
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005362:	f10a 0a01 	add.w	sl, sl, #1
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	9307      	str	r3, [sp, #28]
 800536a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800536e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005370:	4654      	mov	r4, sl
 8005372:	2205      	movs	r2, #5
 8005374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005378:	484e      	ldr	r0, [pc, #312]	@ (80054b4 <_svfiprintf_r+0x1e4>)
 800537a:	f000 fa5f 	bl	800583c <memchr>
 800537e:	9a04      	ldr	r2, [sp, #16]
 8005380:	b9d8      	cbnz	r0, 80053ba <_svfiprintf_r+0xea>
 8005382:	06d0      	lsls	r0, r2, #27
 8005384:	bf44      	itt	mi
 8005386:	2320      	movmi	r3, #32
 8005388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800538c:	0711      	lsls	r1, r2, #28
 800538e:	bf44      	itt	mi
 8005390:	232b      	movmi	r3, #43	@ 0x2b
 8005392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005396:	f89a 3000 	ldrb.w	r3, [sl]
 800539a:	2b2a      	cmp	r3, #42	@ 0x2a
 800539c:	d015      	beq.n	80053ca <_svfiprintf_r+0xfa>
 800539e:	4654      	mov	r4, sl
 80053a0:	2000      	movs	r0, #0
 80053a2:	f04f 0c0a 	mov.w	ip, #10
 80053a6:	9a07      	ldr	r2, [sp, #28]
 80053a8:	4621      	mov	r1, r4
 80053aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ae:	3b30      	subs	r3, #48	@ 0x30
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d94b      	bls.n	800544c <_svfiprintf_r+0x17c>
 80053b4:	b1b0      	cbz	r0, 80053e4 <_svfiprintf_r+0x114>
 80053b6:	9207      	str	r2, [sp, #28]
 80053b8:	e014      	b.n	80053e4 <_svfiprintf_r+0x114>
 80053ba:	eba0 0308 	sub.w	r3, r0, r8
 80053be:	fa09 f303 	lsl.w	r3, r9, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	46a2      	mov	sl, r4
 80053c6:	9304      	str	r3, [sp, #16]
 80053c8:	e7d2      	b.n	8005370 <_svfiprintf_r+0xa0>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	9103      	str	r1, [sp, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfbb      	ittet	lt
 80053d6:	425b      	neglt	r3, r3
 80053d8:	f042 0202 	orrlt.w	r2, r2, #2
 80053dc:	9307      	strge	r3, [sp, #28]
 80053de:	9307      	strlt	r3, [sp, #28]
 80053e0:	bfb8      	it	lt
 80053e2:	9204      	strlt	r2, [sp, #16]
 80053e4:	7823      	ldrb	r3, [r4, #0]
 80053e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80053e8:	d10a      	bne.n	8005400 <_svfiprintf_r+0x130>
 80053ea:	7863      	ldrb	r3, [r4, #1]
 80053ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80053ee:	d132      	bne.n	8005456 <_svfiprintf_r+0x186>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	3402      	adds	r4, #2
 80053f4:	1d1a      	adds	r2, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9203      	str	r2, [sp, #12]
 80053fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053fe:	9305      	str	r3, [sp, #20]
 8005400:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80054b8 <_svfiprintf_r+0x1e8>
 8005404:	2203      	movs	r2, #3
 8005406:	4650      	mov	r0, sl
 8005408:	7821      	ldrb	r1, [r4, #0]
 800540a:	f000 fa17 	bl	800583c <memchr>
 800540e:	b138      	cbz	r0, 8005420 <_svfiprintf_r+0x150>
 8005410:	2240      	movs	r2, #64	@ 0x40
 8005412:	9b04      	ldr	r3, [sp, #16]
 8005414:	eba0 000a 	sub.w	r0, r0, sl
 8005418:	4082      	lsls	r2, r0
 800541a:	4313      	orrs	r3, r2
 800541c:	3401      	adds	r4, #1
 800541e:	9304      	str	r3, [sp, #16]
 8005420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005424:	2206      	movs	r2, #6
 8005426:	4825      	ldr	r0, [pc, #148]	@ (80054bc <_svfiprintf_r+0x1ec>)
 8005428:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800542c:	f000 fa06 	bl	800583c <memchr>
 8005430:	2800      	cmp	r0, #0
 8005432:	d036      	beq.n	80054a2 <_svfiprintf_r+0x1d2>
 8005434:	4b22      	ldr	r3, [pc, #136]	@ (80054c0 <_svfiprintf_r+0x1f0>)
 8005436:	bb1b      	cbnz	r3, 8005480 <_svfiprintf_r+0x1b0>
 8005438:	9b03      	ldr	r3, [sp, #12]
 800543a:	3307      	adds	r3, #7
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	3308      	adds	r3, #8
 8005442:	9303      	str	r3, [sp, #12]
 8005444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005446:	4433      	add	r3, r6
 8005448:	9309      	str	r3, [sp, #36]	@ 0x24
 800544a:	e76a      	b.n	8005322 <_svfiprintf_r+0x52>
 800544c:	460c      	mov	r4, r1
 800544e:	2001      	movs	r0, #1
 8005450:	fb0c 3202 	mla	r2, ip, r2, r3
 8005454:	e7a8      	b.n	80053a8 <_svfiprintf_r+0xd8>
 8005456:	2300      	movs	r3, #0
 8005458:	f04f 0c0a 	mov.w	ip, #10
 800545c:	4619      	mov	r1, r3
 800545e:	3401      	adds	r4, #1
 8005460:	9305      	str	r3, [sp, #20]
 8005462:	4620      	mov	r0, r4
 8005464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005468:	3a30      	subs	r2, #48	@ 0x30
 800546a:	2a09      	cmp	r2, #9
 800546c:	d903      	bls.n	8005476 <_svfiprintf_r+0x1a6>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0c6      	beq.n	8005400 <_svfiprintf_r+0x130>
 8005472:	9105      	str	r1, [sp, #20]
 8005474:	e7c4      	b.n	8005400 <_svfiprintf_r+0x130>
 8005476:	4604      	mov	r4, r0
 8005478:	2301      	movs	r3, #1
 800547a:	fb0c 2101 	mla	r1, ip, r1, r2
 800547e:	e7f0      	b.n	8005462 <_svfiprintf_r+0x192>
 8005480:	ab03      	add	r3, sp, #12
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	462a      	mov	r2, r5
 8005486:	4638      	mov	r0, r7
 8005488:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <_svfiprintf_r+0x1f4>)
 800548a:	a904      	add	r1, sp, #16
 800548c:	f3af 8000 	nop.w
 8005490:	1c42      	adds	r2, r0, #1
 8005492:	4606      	mov	r6, r0
 8005494:	d1d6      	bne.n	8005444 <_svfiprintf_r+0x174>
 8005496:	89ab      	ldrh	r3, [r5, #12]
 8005498:	065b      	lsls	r3, r3, #25
 800549a:	f53f af2d 	bmi.w	80052f8 <_svfiprintf_r+0x28>
 800549e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054a0:	e72c      	b.n	80052fc <_svfiprintf_r+0x2c>
 80054a2:	ab03      	add	r3, sp, #12
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	462a      	mov	r2, r5
 80054a8:	4638      	mov	r0, r7
 80054aa:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <_svfiprintf_r+0x1f4>)
 80054ac:	a904      	add	r1, sp, #16
 80054ae:	f000 f87d 	bl	80055ac <_printf_i>
 80054b2:	e7ed      	b.n	8005490 <_svfiprintf_r+0x1c0>
 80054b4:	080059ba 	.word	0x080059ba
 80054b8:	080059c0 	.word	0x080059c0
 80054bc:	080059c4 	.word	0x080059c4
 80054c0:	00000000 	.word	0x00000000
 80054c4:	08005219 	.word	0x08005219

080054c8 <_printf_common>:
 80054c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054cc:	4616      	mov	r6, r2
 80054ce:	4698      	mov	r8, r3
 80054d0:	688a      	ldr	r2, [r1, #8]
 80054d2:	690b      	ldr	r3, [r1, #16]
 80054d4:	4607      	mov	r7, r0
 80054d6:	4293      	cmp	r3, r2
 80054d8:	bfb8      	it	lt
 80054da:	4613      	movlt	r3, r2
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054e2:	460c      	mov	r4, r1
 80054e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e8:	b10a      	cbz	r2, 80054ee <_printf_common+0x26>
 80054ea:	3301      	adds	r3, #1
 80054ec:	6033      	str	r3, [r6, #0]
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	0699      	lsls	r1, r3, #26
 80054f2:	bf42      	ittt	mi
 80054f4:	6833      	ldrmi	r3, [r6, #0]
 80054f6:	3302      	addmi	r3, #2
 80054f8:	6033      	strmi	r3, [r6, #0]
 80054fa:	6825      	ldr	r5, [r4, #0]
 80054fc:	f015 0506 	ands.w	r5, r5, #6
 8005500:	d106      	bne.n	8005510 <_printf_common+0x48>
 8005502:	f104 0a19 	add.w	sl, r4, #25
 8005506:	68e3      	ldr	r3, [r4, #12]
 8005508:	6832      	ldr	r2, [r6, #0]
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	42ab      	cmp	r3, r5
 800550e:	dc2b      	bgt.n	8005568 <_printf_common+0xa0>
 8005510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	3b00      	subs	r3, #0
 8005518:	bf18      	it	ne
 800551a:	2301      	movne	r3, #1
 800551c:	0692      	lsls	r2, r2, #26
 800551e:	d430      	bmi.n	8005582 <_printf_common+0xba>
 8005520:	4641      	mov	r1, r8
 8005522:	4638      	mov	r0, r7
 8005524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005528:	47c8      	blx	r9
 800552a:	3001      	adds	r0, #1
 800552c:	d023      	beq.n	8005576 <_printf_common+0xae>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	6922      	ldr	r2, [r4, #16]
 8005532:	f003 0306 	and.w	r3, r3, #6
 8005536:	2b04      	cmp	r3, #4
 8005538:	bf14      	ite	ne
 800553a:	2500      	movne	r5, #0
 800553c:	6833      	ldreq	r3, [r6, #0]
 800553e:	f04f 0600 	mov.w	r6, #0
 8005542:	bf08      	it	eq
 8005544:	68e5      	ldreq	r5, [r4, #12]
 8005546:	f104 041a 	add.w	r4, r4, #26
 800554a:	bf08      	it	eq
 800554c:	1aed      	subeq	r5, r5, r3
 800554e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005552:	bf08      	it	eq
 8005554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005558:	4293      	cmp	r3, r2
 800555a:	bfc4      	itt	gt
 800555c:	1a9b      	subgt	r3, r3, r2
 800555e:	18ed      	addgt	r5, r5, r3
 8005560:	42b5      	cmp	r5, r6
 8005562:	d11a      	bne.n	800559a <_printf_common+0xd2>
 8005564:	2000      	movs	r0, #0
 8005566:	e008      	b.n	800557a <_printf_common+0xb2>
 8005568:	2301      	movs	r3, #1
 800556a:	4652      	mov	r2, sl
 800556c:	4641      	mov	r1, r8
 800556e:	4638      	mov	r0, r7
 8005570:	47c8      	blx	r9
 8005572:	3001      	adds	r0, #1
 8005574:	d103      	bne.n	800557e <_printf_common+0xb6>
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557e:	3501      	adds	r5, #1
 8005580:	e7c1      	b.n	8005506 <_printf_common+0x3e>
 8005582:	2030      	movs	r0, #48	@ 0x30
 8005584:	18e1      	adds	r1, r4, r3
 8005586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005590:	4422      	add	r2, r4
 8005592:	3302      	adds	r3, #2
 8005594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005598:	e7c2      	b.n	8005520 <_printf_common+0x58>
 800559a:	2301      	movs	r3, #1
 800559c:	4622      	mov	r2, r4
 800559e:	4641      	mov	r1, r8
 80055a0:	4638      	mov	r0, r7
 80055a2:	47c8      	blx	r9
 80055a4:	3001      	adds	r0, #1
 80055a6:	d0e6      	beq.n	8005576 <_printf_common+0xae>
 80055a8:	3601      	adds	r6, #1
 80055aa:	e7d9      	b.n	8005560 <_printf_common+0x98>

080055ac <_printf_i>:
 80055ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	7e0f      	ldrb	r7, [r1, #24]
 80055b2:	4691      	mov	r9, r2
 80055b4:	2f78      	cmp	r7, #120	@ 0x78
 80055b6:	4680      	mov	r8, r0
 80055b8:	460c      	mov	r4, r1
 80055ba:	469a      	mov	sl, r3
 80055bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055c2:	d807      	bhi.n	80055d4 <_printf_i+0x28>
 80055c4:	2f62      	cmp	r7, #98	@ 0x62
 80055c6:	d80a      	bhi.n	80055de <_printf_i+0x32>
 80055c8:	2f00      	cmp	r7, #0
 80055ca:	f000 80d1 	beq.w	8005770 <_printf_i+0x1c4>
 80055ce:	2f58      	cmp	r7, #88	@ 0x58
 80055d0:	f000 80b8 	beq.w	8005744 <_printf_i+0x198>
 80055d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055dc:	e03a      	b.n	8005654 <_printf_i+0xa8>
 80055de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055e2:	2b15      	cmp	r3, #21
 80055e4:	d8f6      	bhi.n	80055d4 <_printf_i+0x28>
 80055e6:	a101      	add	r1, pc, #4	@ (adr r1, 80055ec <_printf_i+0x40>)
 80055e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005659 	.word	0x08005659
 80055f4:	080055d5 	.word	0x080055d5
 80055f8:	080055d5 	.word	0x080055d5
 80055fc:	080055d5 	.word	0x080055d5
 8005600:	080055d5 	.word	0x080055d5
 8005604:	08005659 	.word	0x08005659
 8005608:	080055d5 	.word	0x080055d5
 800560c:	080055d5 	.word	0x080055d5
 8005610:	080055d5 	.word	0x080055d5
 8005614:	080055d5 	.word	0x080055d5
 8005618:	08005757 	.word	0x08005757
 800561c:	08005683 	.word	0x08005683
 8005620:	08005711 	.word	0x08005711
 8005624:	080055d5 	.word	0x080055d5
 8005628:	080055d5 	.word	0x080055d5
 800562c:	08005779 	.word	0x08005779
 8005630:	080055d5 	.word	0x080055d5
 8005634:	08005683 	.word	0x08005683
 8005638:	080055d5 	.word	0x080055d5
 800563c:	080055d5 	.word	0x080055d5
 8005640:	08005719 	.word	0x08005719
 8005644:	6833      	ldr	r3, [r6, #0]
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6032      	str	r2, [r6, #0]
 800564c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005654:	2301      	movs	r3, #1
 8005656:	e09c      	b.n	8005792 <_printf_i+0x1e6>
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	1d19      	adds	r1, r3, #4
 800565e:	6031      	str	r1, [r6, #0]
 8005660:	0606      	lsls	r6, r0, #24
 8005662:	d501      	bpl.n	8005668 <_printf_i+0xbc>
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	e003      	b.n	8005670 <_printf_i+0xc4>
 8005668:	0645      	lsls	r5, r0, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0xb8>
 800566c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005670:	2d00      	cmp	r5, #0
 8005672:	da03      	bge.n	800567c <_printf_i+0xd0>
 8005674:	232d      	movs	r3, #45	@ 0x2d
 8005676:	426d      	negs	r5, r5
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800567c:	230a      	movs	r3, #10
 800567e:	4858      	ldr	r0, [pc, #352]	@ (80057e0 <_printf_i+0x234>)
 8005680:	e011      	b.n	80056a6 <_printf_i+0xfa>
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	0608      	lsls	r0, r1, #24
 8005688:	f853 5b04 	ldr.w	r5, [r3], #4
 800568c:	d402      	bmi.n	8005694 <_printf_i+0xe8>
 800568e:	0649      	lsls	r1, r1, #25
 8005690:	bf48      	it	mi
 8005692:	b2ad      	uxthmi	r5, r5
 8005694:	2f6f      	cmp	r7, #111	@ 0x6f
 8005696:	6033      	str	r3, [r6, #0]
 8005698:	bf14      	ite	ne
 800569a:	230a      	movne	r3, #10
 800569c:	2308      	moveq	r3, #8
 800569e:	4850      	ldr	r0, [pc, #320]	@ (80057e0 <_printf_i+0x234>)
 80056a0:	2100      	movs	r1, #0
 80056a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a6:	6866      	ldr	r6, [r4, #4]
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	60a6      	str	r6, [r4, #8]
 80056ac:	db05      	blt.n	80056ba <_printf_i+0x10e>
 80056ae:	6821      	ldr	r1, [r4, #0]
 80056b0:	432e      	orrs	r6, r5
 80056b2:	f021 0104 	bic.w	r1, r1, #4
 80056b6:	6021      	str	r1, [r4, #0]
 80056b8:	d04b      	beq.n	8005752 <_printf_i+0x1a6>
 80056ba:	4616      	mov	r6, r2
 80056bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80056c0:	fb03 5711 	mls	r7, r3, r1, r5
 80056c4:	5dc7      	ldrb	r7, [r0, r7]
 80056c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ca:	462f      	mov	r7, r5
 80056cc:	42bb      	cmp	r3, r7
 80056ce:	460d      	mov	r5, r1
 80056d0:	d9f4      	bls.n	80056bc <_printf_i+0x110>
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d10b      	bne.n	80056ee <_printf_i+0x142>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	07df      	lsls	r7, r3, #31
 80056da:	d508      	bpl.n	80056ee <_printf_i+0x142>
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	6861      	ldr	r1, [r4, #4]
 80056e0:	4299      	cmp	r1, r3
 80056e2:	bfde      	ittt	le
 80056e4:	2330      	movle	r3, #48	@ 0x30
 80056e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056ee:	1b92      	subs	r2, r2, r6
 80056f0:	6122      	str	r2, [r4, #16]
 80056f2:	464b      	mov	r3, r9
 80056f4:	4621      	mov	r1, r4
 80056f6:	4640      	mov	r0, r8
 80056f8:	f8cd a000 	str.w	sl, [sp]
 80056fc:	aa03      	add	r2, sp, #12
 80056fe:	f7ff fee3 	bl	80054c8 <_printf_common>
 8005702:	3001      	adds	r0, #1
 8005704:	d14a      	bne.n	800579c <_printf_i+0x1f0>
 8005706:	f04f 30ff 	mov.w	r0, #4294967295
 800570a:	b004      	add	sp, #16
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	f043 0320 	orr.w	r3, r3, #32
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	2778      	movs	r7, #120	@ 0x78
 800571a:	4832      	ldr	r0, [pc, #200]	@ (80057e4 <_printf_i+0x238>)
 800571c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	6831      	ldr	r1, [r6, #0]
 8005724:	061f      	lsls	r7, r3, #24
 8005726:	f851 5b04 	ldr.w	r5, [r1], #4
 800572a:	d402      	bmi.n	8005732 <_printf_i+0x186>
 800572c:	065f      	lsls	r7, r3, #25
 800572e:	bf48      	it	mi
 8005730:	b2ad      	uxthmi	r5, r5
 8005732:	6031      	str	r1, [r6, #0]
 8005734:	07d9      	lsls	r1, r3, #31
 8005736:	bf44      	itt	mi
 8005738:	f043 0320 	orrmi.w	r3, r3, #32
 800573c:	6023      	strmi	r3, [r4, #0]
 800573e:	b11d      	cbz	r5, 8005748 <_printf_i+0x19c>
 8005740:	2310      	movs	r3, #16
 8005742:	e7ad      	b.n	80056a0 <_printf_i+0xf4>
 8005744:	4826      	ldr	r0, [pc, #152]	@ (80057e0 <_printf_i+0x234>)
 8005746:	e7e9      	b.n	800571c <_printf_i+0x170>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	e7f6      	b.n	8005740 <_printf_i+0x194>
 8005752:	4616      	mov	r6, r2
 8005754:	e7bd      	b.n	80056d2 <_printf_i+0x126>
 8005756:	6833      	ldr	r3, [r6, #0]
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	1d18      	adds	r0, r3, #4
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	6030      	str	r0, [r6, #0]
 8005760:	062e      	lsls	r6, r5, #24
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	d501      	bpl.n	800576a <_printf_i+0x1be>
 8005766:	6019      	str	r1, [r3, #0]
 8005768:	e002      	b.n	8005770 <_printf_i+0x1c4>
 800576a:	0668      	lsls	r0, r5, #25
 800576c:	d5fb      	bpl.n	8005766 <_printf_i+0x1ba>
 800576e:	8019      	strh	r1, [r3, #0]
 8005770:	2300      	movs	r3, #0
 8005772:	4616      	mov	r6, r2
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	e7bc      	b.n	80056f2 <_printf_i+0x146>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	2100      	movs	r1, #0
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	6032      	str	r2, [r6, #0]
 8005780:	681e      	ldr	r6, [r3, #0]
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	4630      	mov	r0, r6
 8005786:	f000 f859 	bl	800583c <memchr>
 800578a:	b108      	cbz	r0, 8005790 <_printf_i+0x1e4>
 800578c:	1b80      	subs	r0, r0, r6
 800578e:	6060      	str	r0, [r4, #4]
 8005790:	6863      	ldr	r3, [r4, #4]
 8005792:	6123      	str	r3, [r4, #16]
 8005794:	2300      	movs	r3, #0
 8005796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579a:	e7aa      	b.n	80056f2 <_printf_i+0x146>
 800579c:	4632      	mov	r2, r6
 800579e:	4649      	mov	r1, r9
 80057a0:	4640      	mov	r0, r8
 80057a2:	6923      	ldr	r3, [r4, #16]
 80057a4:	47d0      	blx	sl
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0ad      	beq.n	8005706 <_printf_i+0x15a>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	079b      	lsls	r3, r3, #30
 80057ae:	d413      	bmi.n	80057d8 <_printf_i+0x22c>
 80057b0:	68e0      	ldr	r0, [r4, #12]
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	4298      	cmp	r0, r3
 80057b6:	bfb8      	it	lt
 80057b8:	4618      	movlt	r0, r3
 80057ba:	e7a6      	b.n	800570a <_printf_i+0x15e>
 80057bc:	2301      	movs	r3, #1
 80057be:	4632      	mov	r2, r6
 80057c0:	4649      	mov	r1, r9
 80057c2:	4640      	mov	r0, r8
 80057c4:	47d0      	blx	sl
 80057c6:	3001      	adds	r0, #1
 80057c8:	d09d      	beq.n	8005706 <_printf_i+0x15a>
 80057ca:	3501      	adds	r5, #1
 80057cc:	68e3      	ldr	r3, [r4, #12]
 80057ce:	9903      	ldr	r1, [sp, #12]
 80057d0:	1a5b      	subs	r3, r3, r1
 80057d2:	42ab      	cmp	r3, r5
 80057d4:	dcf2      	bgt.n	80057bc <_printf_i+0x210>
 80057d6:	e7eb      	b.n	80057b0 <_printf_i+0x204>
 80057d8:	2500      	movs	r5, #0
 80057da:	f104 0619 	add.w	r6, r4, #25
 80057de:	e7f5      	b.n	80057cc <_printf_i+0x220>
 80057e0:	080059cb 	.word	0x080059cb
 80057e4:	080059dc 	.word	0x080059dc

080057e8 <memmove>:
 80057e8:	4288      	cmp	r0, r1
 80057ea:	b510      	push	{r4, lr}
 80057ec:	eb01 0402 	add.w	r4, r1, r2
 80057f0:	d902      	bls.n	80057f8 <memmove+0x10>
 80057f2:	4284      	cmp	r4, r0
 80057f4:	4623      	mov	r3, r4
 80057f6:	d807      	bhi.n	8005808 <memmove+0x20>
 80057f8:	1e43      	subs	r3, r0, #1
 80057fa:	42a1      	cmp	r1, r4
 80057fc:	d008      	beq.n	8005810 <memmove+0x28>
 80057fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005806:	e7f8      	b.n	80057fa <memmove+0x12>
 8005808:	4601      	mov	r1, r0
 800580a:	4402      	add	r2, r0
 800580c:	428a      	cmp	r2, r1
 800580e:	d100      	bne.n	8005812 <memmove+0x2a>
 8005810:	bd10      	pop	{r4, pc}
 8005812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800581a:	e7f7      	b.n	800580c <memmove+0x24>

0800581c <_sbrk_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	2300      	movs	r3, #0
 8005820:	4d05      	ldr	r5, [pc, #20]	@ (8005838 <_sbrk_r+0x1c>)
 8005822:	4604      	mov	r4, r0
 8005824:	4608      	mov	r0, r1
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	f7fa ff38 	bl	800069c <_sbrk>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_sbrk_r+0x1a>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_sbrk_r+0x1a>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20001c40 	.word	0x20001c40

0800583c <memchr>:
 800583c:	4603      	mov	r3, r0
 800583e:	b510      	push	{r4, lr}
 8005840:	b2c9      	uxtb	r1, r1
 8005842:	4402      	add	r2, r0
 8005844:	4293      	cmp	r3, r2
 8005846:	4618      	mov	r0, r3
 8005848:	d101      	bne.n	800584e <memchr+0x12>
 800584a:	2000      	movs	r0, #0
 800584c:	e003      	b.n	8005856 <memchr+0x1a>
 800584e:	7804      	ldrb	r4, [r0, #0]
 8005850:	3301      	adds	r3, #1
 8005852:	428c      	cmp	r4, r1
 8005854:	d1f6      	bne.n	8005844 <memchr+0x8>
 8005856:	bd10      	pop	{r4, pc}

08005858 <_realloc_r>:
 8005858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585c:	4607      	mov	r7, r0
 800585e:	4614      	mov	r4, r2
 8005860:	460d      	mov	r5, r1
 8005862:	b921      	cbnz	r1, 800586e <_realloc_r+0x16>
 8005864:	4611      	mov	r1, r2
 8005866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586a:	f7ff bc49 	b.w	8005100 <_malloc_r>
 800586e:	b92a      	cbnz	r2, 800587c <_realloc_r+0x24>
 8005870:	f7ff fbdc 	bl	800502c <_free_r>
 8005874:	4625      	mov	r5, r4
 8005876:	4628      	mov	r0, r5
 8005878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800587c:	f000 f81a 	bl	80058b4 <_malloc_usable_size_r>
 8005880:	4284      	cmp	r4, r0
 8005882:	4606      	mov	r6, r0
 8005884:	d802      	bhi.n	800588c <_realloc_r+0x34>
 8005886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800588a:	d8f4      	bhi.n	8005876 <_realloc_r+0x1e>
 800588c:	4621      	mov	r1, r4
 800588e:	4638      	mov	r0, r7
 8005890:	f7ff fc36 	bl	8005100 <_malloc_r>
 8005894:	4680      	mov	r8, r0
 8005896:	b908      	cbnz	r0, 800589c <_realloc_r+0x44>
 8005898:	4645      	mov	r5, r8
 800589a:	e7ec      	b.n	8005876 <_realloc_r+0x1e>
 800589c:	42b4      	cmp	r4, r6
 800589e:	4622      	mov	r2, r4
 80058a0:	4629      	mov	r1, r5
 80058a2:	bf28      	it	cs
 80058a4:	4632      	movcs	r2, r6
 80058a6:	f7ff fbb3 	bl	8005010 <memcpy>
 80058aa:	4629      	mov	r1, r5
 80058ac:	4638      	mov	r0, r7
 80058ae:	f7ff fbbd 	bl	800502c <_free_r>
 80058b2:	e7f1      	b.n	8005898 <_realloc_r+0x40>

080058b4 <_malloc_usable_size_r>:
 80058b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b8:	1f18      	subs	r0, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bfbc      	itt	lt
 80058be:	580b      	ldrlt	r3, [r1, r0]
 80058c0:	18c0      	addlt	r0, r0, r3
 80058c2:	4770      	bx	lr

080058c4 <_init>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	bf00      	nop
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr

080058d0 <_fini>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	bf00      	nop
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr
