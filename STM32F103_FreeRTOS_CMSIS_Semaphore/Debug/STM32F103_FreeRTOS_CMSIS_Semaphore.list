
STM32F103_FreeRTOS_CMSIS_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000522c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800533c  0800533c  0000633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005430  08005430  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005430  08005430  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005430  08005430  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005430  08005430  00006430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005438  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002370  20000060  08005498  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023d0  08005498  000073d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016957  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314a  00000000  00000000  0001d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00020b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f42  00000000  00000000  00021ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d2e  00000000  00000000  00022e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149cb  00000000  00000000  00025b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000946b3  00000000  00000000  0003a503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cebb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000556c  00000000  00000000  000cebfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d4168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005324 	.word	0x08005324

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005324 	.word	0x08005324

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a0:	f000 fade 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a4:	f000 f840 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f8aa 	bl	8000300 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ac:	f000 f87e 	bl	80002ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001b0:	f001 fd3c 	bl	8001c2c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 80001b4:	4a11      	ldr	r2, [pc, #68]	@ (80001fc <main+0x60>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	2002      	movs	r0, #2
 80001ba:	f001 fe2c 	bl	8001e16 <osSemaphoreNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000200 <main+0x64>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000204 <main+0x68>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	480f      	ldr	r0, [pc, #60]	@ (8000208 <main+0x6c>)
 80001ca:	f001 fd77 	bl	8001cbc <osThreadNew>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <main+0x70>)
 80001d2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000210 <main+0x74>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	480e      	ldr	r0, [pc, #56]	@ (8000214 <main+0x78>)
 80001da:	f001 fd6f 	bl	8001cbc <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000218 <main+0x7c>)
 80001e2:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80001e4:	4a0d      	ldr	r2, [pc, #52]	@ (800021c <main+0x80>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	480d      	ldr	r0, [pc, #52]	@ (8000220 <main+0x84>)
 80001ea:	f001 fd67 	bl	8001cbc <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000224 <main+0x88>)
 80001f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001f4:	f001 fd3c 	bl	8001c70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	bf00      	nop
 80001fa:	e7fd      	b.n	80001f8 <main+0x5c>
 80001fc:	080053f4 	.word	0x080053f4
 8000200:	200000d0 	.word	0x200000d0
 8000204:	08005388 	.word	0x08005388
 8000208:	0800042d 	.word	0x0800042d
 800020c:	200000c4 	.word	0x200000c4
 8000210:	080053ac 	.word	0x080053ac
 8000214:	08000455 	.word	0x08000455
 8000218:	200000c8 	.word	0x200000c8
 800021c:	080053d0 	.word	0x080053d0
 8000220:	0800047d 	.word	0x0800047d
 8000224:	200000cc 	.word	0x200000cc

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f004 ff86 	bl	8005148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800025a:	2300      	movs	r3, #0
 800025c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fd3f 	bl	8000cec <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000274:	f000 f92e 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f000 ffac 	bl	80011f0 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029e:	f000 f919 	bl	80004d4 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	@ 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002b0:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002b2:	4a12      	ldr	r2, [pc, #72]	@ (80002fc <MX_USART2_UART_Init+0x50>)
 80002b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002b6:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002d2:	220c      	movs	r2, #12
 80002d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d6:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002e4:	f001 fb80 	bl	80019e8 <HAL_UART_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ee:	f000 f8f1 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	2000007c 	.word	0x2000007c
 80002fc:	40004400 	.word	0x40004400

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b2d      	ldr	r3, [pc, #180]	@ (80003cc <MX_GPIO_Init+0xcc>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a2c      	ldr	r2, [pc, #176]	@ (80003cc <MX_GPIO_Init+0xcc>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b2a      	ldr	r3, [pc, #168]	@ (80003cc <MX_GPIO_Init+0xcc>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032c:	4b27      	ldr	r3, [pc, #156]	@ (80003cc <MX_GPIO_Init+0xcc>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a26      	ldr	r2, [pc, #152]	@ (80003cc <MX_GPIO_Init+0xcc>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b24      	ldr	r3, [pc, #144]	@ (80003cc <MX_GPIO_Init+0xcc>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0320 	and.w	r3, r3, #32
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	4b21      	ldr	r3, [pc, #132]	@ (80003cc <MX_GPIO_Init+0xcc>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a20      	ldr	r2, [pc, #128]	@ (80003cc <MX_GPIO_Init+0xcc>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <MX_GPIO_Init+0xcc>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0304 	and.w	r3, r3, #4
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <MX_GPIO_Init+0xcc>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a1a      	ldr	r2, [pc, #104]	@ (80003cc <MX_GPIO_Init+0xcc>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_GPIO_Init+0xcc>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2120      	movs	r1, #32
 8000378:	4815      	ldr	r0, [pc, #84]	@ (80003d0 <MX_GPIO_Init+0xd0>)
 800037a:	f000 fc87 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800037e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <MX_GPIO_Init+0xd4>)
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000388:	2302      	movs	r3, #2
 800038a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	4811      	ldr	r0, [pc, #68]	@ (80003d8 <MX_GPIO_Init+0xd8>)
 8000394:	f000 faf6 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000398:	2320      	movs	r3, #32
 800039a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2302      	movs	r3, #2
 80003a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	4808      	ldr	r0, [pc, #32]	@ (80003d0 <MX_GPIO_Init+0xd0>)
 80003b0:	f000 fae8 	bl	8000984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2105      	movs	r1, #5
 80003b8:	2028      	movs	r0, #40	@ 0x28
 80003ba:	f000 fab8 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003be:	2028      	movs	r0, #40	@ 0x28
 80003c0:	f000 fad1 	bl	8000966 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010800 	.word	0x40010800
 80003d4:	10110000 	.word	0x10110000
 80003d8:	40011000 	.word	0x40011000

080003dc <TaskAction>:

/* USER CODE BEGIN 4 */
static void TaskAction(char message) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff feb1 	bl	8000150 <ITM_SendChar>
	ITM_SendChar('\n');
 80003ee:	200a      	movs	r0, #10
 80003f0:	f7ff feae 	bl	8000150 <ITM_SendChar>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
  //UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

	if (GPIO_Pin == B1_Pin) {
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800040c:	d107      	bne.n	800041e <HAL_GPIO_EXTI_Callback+0x22>
		TaskAction('!');
 800040e:	2021      	movs	r0, #33	@ 0x21
 8000410:	f7ff ffe4 	bl	80003dc <TaskAction>
		osSemaphoreRelease(myCountingSem01Handle);
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f001 fdd7 	bl	8001fcc <osSemaphoreRelease>
	}
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000d0 	.word	0x200000d0

0800042c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreRelease(myCountingSem01Handle);
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <StartDefaultTask+0x24>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f001 fdc7 	bl	8001fcc <osSemaphoreRelease>
	  TaskAction('1');
 800043e:	2031      	movs	r0, #49	@ 0x31
 8000440:	f7ff ffcc 	bl	80003dc <TaskAction>
	  osDelay(5000);
 8000444:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000448:	f001 fcca 	bl	8001de0 <osDelay>
	  osSemaphoreRelease(myCountingSem01Handle);
 800044c:	bf00      	nop
 800044e:	e7f1      	b.n	8000434 <StartDefaultTask+0x8>
 8000450:	200000d0 	.word	0x200000d0

08000454 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreRelease(myCountingSem01Handle);
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <StartTask02+0x24>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f001 fdb3 	bl	8001fcc <osSemaphoreRelease>
	  TaskAction('2');
 8000466:	2032      	movs	r0, #50	@ 0x32
 8000468:	f7ff ffb8 	bl	80003dc <TaskAction>
	  osDelay(5000);
 800046c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000470:	f001 fcb6 	bl	8001de0 <osDelay>
	  osSemaphoreRelease(myCountingSem01Handle);
 8000474:	bf00      	nop
 8000476:	e7f1      	b.n	800045c <StartTask02+0x8>
 8000478:	200000d0 	.word	0x200000d0

0800047c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myCountingSem01Handle, 10000);
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <StartTask03+0x30>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f242 7110 	movw	r1, #10000	@ 0x2710
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fd4b 	bl	8001f28 <osSemaphoreAcquire>
	  osSemaphoreAcquire(myCountingSem01Handle, 10000);
 8000492:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <StartTask03+0x30>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f242 7110 	movw	r1, #10000	@ 0x2710
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fd44 	bl	8001f28 <osSemaphoreAcquire>
	  TaskAction('3');
 80004a0:	2033      	movs	r0, #51	@ 0x33
 80004a2:	f7ff ff9b 	bl	80003dc <TaskAction>
	  osSemaphoreAcquire(myCountingSem01Handle, 10000);
 80004a6:	bf00      	nop
 80004a8:	e7ec      	b.n	8000484 <StartTask03+0x8>
 80004aa:	bf00      	nop
 80004ac:	200000d0 	.word	0x200000d0

080004b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d101      	bne.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80004c2:	f000 f963 	bl	800078c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40012c00 	.word	0x40012c00

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <HAL_MspInit+0x68>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a17      	ldr	r2, [pc, #92]	@ (8000548 <HAL_MspInit+0x68>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_MspInit+0x68>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_MspInit+0x68>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <HAL_MspInit+0x68>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x68>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	210f      	movs	r1, #15
 800051a:	f06f 0001 	mvn.w	r0, #1
 800051e:	f000 fa06 	bl	800092e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <HAL_MspInit+0x6c>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	@ (800054c <HAL_MspInit+0x6c>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a15      	ldr	r2, [pc, #84]	@ (80005c0 <HAL_UART_MspInit+0x70>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d123      	bne.n	80005b8 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <HAL_UART_MspInit+0x74>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a13      	ldr	r2, [pc, #76]	@ (80005c4 <HAL_UART_MspInit+0x74>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057a:	61d3      	str	r3, [r2, #28]
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <HAL_UART_MspInit+0x74>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <HAL_UART_MspInit+0x74>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <HAL_UART_MspInit+0x74>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <HAL_UART_MspInit+0x74>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a0:	230c      	movs	r3, #12
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <HAL_UART_MspInit+0x78>)
 80005b4:	f000 f9e6 	bl	8000984 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40004400 	.word	0x40004400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010800 	.word	0x40010800

080005cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <HAL_InitTick+0xd0>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <HAL_InitTick+0xd0>)
 80005e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <HAL_InitTick+0xd0>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005fa:	f107 020c 	add.w	r2, r7, #12
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f000 ff63 	bl	80014d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800060a:	f000 ff4d 	bl	80014a8 <HAL_RCC_GetPCLK2Freq>
 800060e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000612:	4a23      	ldr	r2, [pc, #140]	@ (80006a0 <HAL_InitTick+0xd4>)
 8000614:	fba2 2303 	umull	r2, r3, r2, r3
 8000618:	0c9b      	lsrs	r3, r3, #18
 800061a:	3b01      	subs	r3, #1
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <HAL_InitTick+0xd8>)
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <HAL_InitTick+0xdc>)
 8000622:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <HAL_InitTick+0xd8>)
 8000626:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800062a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800062c:	4a1d      	ldr	r2, [pc, #116]	@ (80006a4 <HAL_InitTick+0xd8>)
 800062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000630:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_InitTick+0xd8>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <HAL_InitTick+0xd8>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <HAL_InitTick+0xd8>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000644:	4817      	ldr	r0, [pc, #92]	@ (80006a4 <HAL_InitTick+0xd8>)
 8000646:	f000 ff91 	bl	800156c <HAL_TIM_Base_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000650:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000654:	2b00      	cmp	r3, #0
 8000656:	d11b      	bne.n	8000690 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000658:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <HAL_InitTick+0xd8>)
 800065a:	f000 ffdf 	bl	800161c <HAL_TIM_Base_Start_IT>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000664:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000668:	2b00      	cmp	r3, #0
 800066a:	d111      	bne.n	8000690 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800066c:	2019      	movs	r0, #25
 800066e:	f000 f97a 	bl	8000966 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d808      	bhi.n	800068a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	2019      	movs	r0, #25
 800067e:	f000 f956 	bl	800092e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <HAL_InitTick+0xe0>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	e002      	b.n	8000690 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000690:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000694:	4618      	mov	r0, r3
 8000696:	3730      	adds	r7, #48	@ 0x30
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	431bde83 	.word	0x431bde83
 80006a4:	200000d4 	.word	0x200000d4
 80006a8:	40012c00 	.word	0x40012c00
 80006ac:	20000004 	.word	0x20000004

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <NMI_Handler+0x4>

080006b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <MemManage_Handler+0x4>

080006c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006e8:	4802      	ldr	r0, [pc, #8]	@ (80006f4 <TIM1_UP_IRQHandler+0x10>)
 80006ea:	f000 ffe9 	bl	80016c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000d4 	.word	0x200000d4

080006f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000700:	f000 fadc 	bl	8000cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff fff8 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071a:	490c      	ldr	r1, [pc, #48]	@ (800074c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <LoopFillZerobss+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000730:	4c09      	ldr	r4, [pc, #36]	@ (8000758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f004 fd69 	bl	8005214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fd2b 	bl	800019c <main>
  bx lr
 8000746:	4770      	bx	lr
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000750:	08005438 	.word	0x08005438
  ldr r2, =_sbss
 8000754:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000758:	200023d0 	.word	0x200023d0

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>
	...

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HAL_Init+0x28>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	@ (8000788 <HAL_Init+0x28>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f8d1 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	200f      	movs	r0, #15
 8000778:	f7ff ff28 	bl	80005cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff feb0 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a03      	ldr	r2, [pc, #12]	@ (80007ac <HAL_IncTick+0x20>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000008 	.word	0x20000008
 80007ac:	2000011c 	.word	0x2000011c

080007b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <HAL_GetTick+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	2000011c 	.word	0x2000011c

080007c4 <__NVIC_SetPriorityGrouping>:
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4906      	ldr	r1, [pc, #24]	@ (800085c <__NVIC_EnableIRQ+0x34>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	@ (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	@ 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	@ 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff4f 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff64 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ffb2 	bl	80008b4 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff81 	bl	8000860 <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff57 	bl	8000828 <__NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b480      	push	{r7}
 8000986:	b08b      	sub	sp, #44	@ 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000996:	e169      	b.n	8000c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000998:	2201      	movs	r2, #1
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	f040 8158 	bne.w	8000c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000c24 <HAL_GPIO_Init+0x2a0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d05e      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009c0:	4a98      	ldr	r2, [pc, #608]	@ (8000c24 <HAL_GPIO_Init+0x2a0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d875      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009c6:	4a98      	ldr	r2, [pc, #608]	@ (8000c28 <HAL_GPIO_Init+0x2a4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d058      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009cc:	4a96      	ldr	r2, [pc, #600]	@ (8000c28 <HAL_GPIO_Init+0x2a4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d86f      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009d2:	4a96      	ldr	r2, [pc, #600]	@ (8000c2c <HAL_GPIO_Init+0x2a8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d052      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009d8:	4a94      	ldr	r2, [pc, #592]	@ (8000c2c <HAL_GPIO_Init+0x2a8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d869      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009de:	4a94      	ldr	r2, [pc, #592]	@ (8000c30 <HAL_GPIO_Init+0x2ac>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d04c      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009e4:	4a92      	ldr	r2, [pc, #584]	@ (8000c30 <HAL_GPIO_Init+0x2ac>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d863      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009ea:	4a92      	ldr	r2, [pc, #584]	@ (8000c34 <HAL_GPIO_Init+0x2b0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d046      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009f0:	4a90      	ldr	r2, [pc, #576]	@ (8000c34 <HAL_GPIO_Init+0x2b0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d85d      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d82a      	bhi.n	8000a50 <HAL_GPIO_Init+0xcc>
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d859      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000a04 <HAL_GPIO_Init+0x80>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a7f 	.word	0x08000a7f
 8000a08:	08000a59 	.word	0x08000a59
 8000a0c:	08000a6b 	.word	0x08000a6b
 8000a10:	08000aad 	.word	0x08000aad
 8000a14:	08000ab3 	.word	0x08000ab3
 8000a18:	08000ab3 	.word	0x08000ab3
 8000a1c:	08000ab3 	.word	0x08000ab3
 8000a20:	08000ab3 	.word	0x08000ab3
 8000a24:	08000ab3 	.word	0x08000ab3
 8000a28:	08000ab3 	.word	0x08000ab3
 8000a2c:	08000ab3 	.word	0x08000ab3
 8000a30:	08000ab3 	.word	0x08000ab3
 8000a34:	08000ab3 	.word	0x08000ab3
 8000a38:	08000ab3 	.word	0x08000ab3
 8000a3c:	08000ab3 	.word	0x08000ab3
 8000a40:	08000ab3 	.word	0x08000ab3
 8000a44:	08000ab3 	.word	0x08000ab3
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000a75 	.word	0x08000a75
 8000a50:	4a79      	ldr	r2, [pc, #484]	@ (8000c38 <HAL_GPIO_Init+0x2b4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a56:	e02c      	b.n	8000ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e029      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	3304      	adds	r3, #4
 8000a66:	623b      	str	r3, [r7, #32]
          break;
 8000a68:	e024      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	3308      	adds	r3, #8
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e01f      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	330c      	adds	r3, #12
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e01a      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a86:	2304      	movs	r3, #4
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e013      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d105      	bne.n	8000aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a94:	2308      	movs	r3, #8
 8000a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	611a      	str	r2, [r3, #16]
          break;
 8000a9e:	e009      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	615a      	str	r2, [r3, #20]
          break;
 8000aaa:	e003      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e000      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          break;
 8000ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2bff      	cmp	r3, #255	@ 0xff
 8000ab8:	d801      	bhi.n	8000abe <HAL_GPIO_Init+0x13a>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	e001      	b.n	8000ac2 <HAL_GPIO_Init+0x13e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	2bff      	cmp	r3, #255	@ 0xff
 8000ac8:	d802      	bhi.n	8000ad0 <HAL_GPIO_Init+0x14c>
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	e002      	b.n	8000ad6 <HAL_GPIO_Init+0x152>
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	3b08      	subs	r3, #8
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	210f      	movs	r1, #15
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	6a39      	ldr	r1, [r7, #32]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	431a      	orrs	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b04:	4b4d      	ldr	r3, [pc, #308]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a4c      	ldr	r2, [pc, #304]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b4a      	ldr	r3, [pc, #296]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b1c:	4a48      	ldr	r2, [pc, #288]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a40      	ldr	r2, [pc, #256]	@ (8000c44 <HAL_GPIO_Init+0x2c0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d013      	beq.n	8000b70 <HAL_GPIO_Init+0x1ec>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c48 <HAL_GPIO_Init+0x2c4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d00d      	beq.n	8000b6c <HAL_GPIO_Init+0x1e8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a3e      	ldr	r2, [pc, #248]	@ (8000c4c <HAL_GPIO_Init+0x2c8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d007      	beq.n	8000b68 <HAL_GPIO_Init+0x1e4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d101      	bne.n	8000b64 <HAL_GPIO_Init+0x1e0>
 8000b60:	2303      	movs	r3, #3
 8000b62:	e006      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b64:	2304      	movs	r3, #4
 8000b66:	e004      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b70:	2300      	movs	r3, #0
 8000b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b74:	f002 0203 	and.w	r2, r2, #3
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b82:	492f      	ldr	r1, [pc, #188]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	492c      	ldr	r1, [pc, #176]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	608b      	str	r3, [r1, #8]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000baa:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4928      	ldr	r1, [pc, #160]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	4922      	ldr	r1, [pc, #136]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60cb      	str	r3, [r1, #12]
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	491e      	ldr	r1, [pc, #120]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	4918      	ldr	r1, [pc, #96]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4914      	ldr	r1, [pc, #80]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d021      	beq.n	8000c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	490e      	ldr	r1, [pc, #56]	@ (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	600b      	str	r3, [r1, #0]
 8000c20:	e021      	b.n	8000c66 <HAL_GPIO_Init+0x2e2>
 8000c22:	bf00      	nop
 8000c24:	10320000 	.word	0x10320000
 8000c28:	10310000 	.word	0x10310000
 8000c2c:	10220000 	.word	0x10220000
 8000c30:	10210000 	.word	0x10210000
 8000c34:	10120000 	.word	0x10120000
 8000c38:	10110000 	.word	0x10110000
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40011400 	.word	0x40011400
 8000c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_GPIO_Init+0x304>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4909      	ldr	r1, [pc, #36]	@ (8000c88 <HAL_GPIO_Init+0x304>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	3301      	adds	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c72:	fa22 f303 	lsr.w	r3, r2, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f47f ae8e 	bne.w	8000998 <HAL_GPIO_Init+0x14>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	372c      	adds	r7, #44	@ 0x2c
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c9c:	787b      	ldrb	r3, [r7, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ca8:	e003      	b.n	8000cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	041a      	lsls	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	611a      	str	r2, [r3, #16]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb8e 	bl	80003fc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e272      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 8087 	beq.w	8000e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d0c:	4b92      	ldr	r3, [pc, #584]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d00c      	beq.n	8000d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d18:	4b8f      	ldr	r3, [pc, #572]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d112      	bne.n	8000d4a <HAL_RCC_OscConfig+0x5e>
 8000d24:	4b8c      	ldr	r3, [pc, #560]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d30:	d10b      	bne.n	8000d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d32:	4b89      	ldr	r3, [pc, #548]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d06c      	beq.n	8000e18 <HAL_RCC_OscConfig+0x12c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d168      	bne.n	8000e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e24c      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d52:	d106      	bne.n	8000d62 <HAL_RCC_OscConfig+0x76>
 8000d54:	4b80      	ldr	r3, [pc, #512]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a7f      	ldr	r2, [pc, #508]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e02e      	b.n	8000dc0 <HAL_RCC_OscConfig+0xd4>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x98>
 8000d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a7a      	ldr	r2, [pc, #488]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b78      	ldr	r3, [pc, #480]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a77      	ldr	r2, [pc, #476]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e01d      	b.n	8000dc0 <HAL_RCC_OscConfig+0xd4>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0xbc>
 8000d8e:	4b72      	ldr	r3, [pc, #456]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a71      	ldr	r2, [pc, #452]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e00b      	b.n	8000dc0 <HAL_RCC_OscConfig+0xd4>
 8000da8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a6a      	ldr	r2, [pc, #424]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b68      	ldr	r3, [pc, #416]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a67      	ldr	r2, [pc, #412]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fcf2 	bl	80007b0 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fcee 	bl	80007b0 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	@ 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e200      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0xe4>
 8000dee:	e014      	b.n	8000e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fcde 	bl	80007b0 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fcda 	bl	80007b0 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	@ 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e1ec      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	4b53      	ldr	r3, [pc, #332]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x10c>
 8000e16:	e000      	b.n	8000e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d063      	beq.n	8000eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e26:	4b4c      	ldr	r3, [pc, #304]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00b      	beq.n	8000e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e32:	4b49      	ldr	r3, [pc, #292]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d11c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x18c>
 8000e3e:	4b46      	ldr	r3, [pc, #280]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d116      	bne.n	8000e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	4b43      	ldr	r3, [pc, #268]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_RCC_OscConfig+0x176>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d001      	beq.n	8000e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e1c0      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e62:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4939      	ldr	r1, [pc, #228]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	e03a      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d020      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e80:	4b36      	ldr	r3, [pc, #216]	@ (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fc93 	bl	80007b0 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fc8f 	bl	80007b0 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e1a1      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4927      	ldr	r1, [pc, #156]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	600b      	str	r3, [r1, #0]
 8000ec0:	e015      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fc72 	bl	80007b0 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc6e 	bl	80007b0 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e180      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d03a      	beq.n	8000f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d019      	beq.n	8000f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <HAL_RCC_OscConfig+0x274>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f08:	f7ff fc52 	bl	80007b0 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fc4e 	bl	80007b0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e160      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 fafe 	bl	8001530 <RCC_Delay>
 8000f34:	e01c      	b.n	8000f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_RCC_OscConfig+0x274>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3c:	f7ff fc38 	bl	80007b0 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f42:	e00f      	b.n	8000f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f44:	f7ff fc34 	bl	80007b0 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d908      	bls.n	8000f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e146      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	42420000 	.word	0x42420000
 8000f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f64:	4b92      	ldr	r3, [pc, #584]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8000f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1e9      	bne.n	8000f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80a6 	beq.w	80010ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f82:	4b8b      	ldr	r3, [pc, #556]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10d      	bne.n	8000faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b88      	ldr	r3, [pc, #544]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a87      	ldr	r2, [pc, #540]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b85      	ldr	r3, [pc, #532]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000faa:	4b82      	ldr	r3, [pc, #520]	@ (80011b4 <HAL_RCC_OscConfig+0x4c8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d118      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80011b4 <HAL_RCC_OscConfig+0x4c8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a7e      	ldr	r2, [pc, #504]	@ (80011b4 <HAL_RCC_OscConfig+0x4c8>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fbf5 	bl	80007b0 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fca:	f7ff fbf1 	bl	80007b0 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b64      	cmp	r3, #100	@ 0x64
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e103      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fdc:	4b75      	ldr	r3, [pc, #468]	@ (80011b4 <HAL_RCC_OscConfig+0x4c8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d106      	bne.n	8000ffe <HAL_RCC_OscConfig+0x312>
 8000ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	e02d      	b.n	800105a <HAL_RCC_OscConfig+0x36e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0x334>
 8001006:	4b6a      	ldr	r3, [pc, #424]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4a69      	ldr	r2, [pc, #420]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	6213      	str	r3, [r2, #32]
 8001012:	4b67      	ldr	r3, [pc, #412]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4a66      	ldr	r2, [pc, #408]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	f023 0304 	bic.w	r3, r3, #4
 800101c:	6213      	str	r3, [r2, #32]
 800101e:	e01c      	b.n	800105a <HAL_RCC_OscConfig+0x36e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b05      	cmp	r3, #5
 8001026:	d10c      	bne.n	8001042 <HAL_RCC_OscConfig+0x356>
 8001028:	4b61      	ldr	r3, [pc, #388]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4a60      	ldr	r2, [pc, #384]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6213      	str	r3, [r2, #32]
 8001034:	4b5e      	ldr	r3, [pc, #376]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a5d      	ldr	r2, [pc, #372]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	e00b      	b.n	800105a <HAL_RCC_OscConfig+0x36e>
 8001042:	4b5b      	ldr	r3, [pc, #364]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a5a      	ldr	r2, [pc, #360]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6213      	str	r3, [r2, #32]
 800104e:	4b58      	ldr	r3, [pc, #352]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4a57      	ldr	r2, [pc, #348]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	f023 0304 	bic.w	r3, r3, #4
 8001058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d015      	beq.n	800108e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fba5 	bl	80007b0 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fba1 	bl	80007b0 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e0b1      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001080:	4b4b      	ldr	r3, [pc, #300]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0ee      	beq.n	800106a <HAL_RCC_OscConfig+0x37e>
 800108c:	e014      	b.n	80010b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb8f 	bl	80007b0 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fb8b 	bl	80007b0 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e09b      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ac:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ee      	bne.n	8001096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d105      	bne.n	80010ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010be:	4b3c      	ldr	r3, [pc, #240]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a3b      	ldr	r2, [pc, #236]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8087 	beq.w	80011e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d4:	4b36      	ldr	r3, [pc, #216]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d061      	beq.n	80011a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d146      	bne.n	8001176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e8:	4b33      	ldr	r3, [pc, #204]	@ (80011b8 <HAL_RCC_OscConfig+0x4cc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fb5f 	bl	80007b0 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f6:	f7ff fb5b 	bl	80007b0 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e06d      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001108:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800111c:	d108      	bne.n	8001130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4921      	ldr	r1, [pc, #132]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a19      	ldr	r1, [r3, #32]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001140:	430b      	orrs	r3, r1
 8001142:	491b      	ldr	r1, [pc, #108]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_RCC_OscConfig+0x4cc>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb2f 	bl	80007b0 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff fb2b 	bl	80007b0 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e03d      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x46a>
 8001174:	e035      	b.n	80011e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_RCC_OscConfig+0x4cc>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fb18 	bl	80007b0 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001184:	f7ff fb14 	bl	80007b0 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e026      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x498>
 80011a2:	e01e      	b.n	80011e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d107      	bne.n	80011bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e019      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40007000 	.word	0x40007000
 80011b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <HAL_RCC_OscConfig+0x500>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011da:	429a      	cmp	r2, r3
 80011dc:	d001      	beq.n	80011e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0d0      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001204:	4b6a      	ldr	r3, [pc, #424]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d910      	bls.n	8001234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b67      	ldr	r3, [pc, #412]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 0207 	bic.w	r2, r3, #7
 800121a:	4965      	ldr	r1, [pc, #404]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001222:	4b63      	ldr	r3, [pc, #396]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d001      	beq.n	8001234 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0b8      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800124c:	4b59      	ldr	r3, [pc, #356]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a58      	ldr	r2, [pc, #352]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001256:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001264:	4b53      	ldr	r3, [pc, #332]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a52      	ldr	r2, [pc, #328]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800126e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001270:	4b50      	ldr	r3, [pc, #320]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	494d      	ldr	r1, [pc, #308]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d040      	beq.n	8001310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	4b47      	ldr	r3, [pc, #284]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d115      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e07f      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ae:	4b41      	ldr	r3, [pc, #260]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e073      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012be:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e06b      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ce:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f023 0203 	bic.w	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4936      	ldr	r1, [pc, #216]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e0:	f7ff fa66 	bl	80007b0 <HAL_GetTick>
 80012e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e8:	f7ff fa62 	bl	80007b0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e053      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 020c 	and.w	r2, r3, #12
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	429a      	cmp	r2, r3
 800130e:	d1eb      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d210      	bcs.n	8001340 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 0207 	bic.w	r2, r3, #7
 8001326:	4922      	ldr	r1, [pc, #136]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132e:	4b20      	ldr	r3, [pc, #128]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d001      	beq.n	8001340 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e032      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4916      	ldr	r1, [pc, #88]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	490e      	ldr	r1, [pc, #56]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800137e:	f000 f821 	bl	80013c4 <HAL_RCC_GetSysClockFreq>
 8001382:	4602      	mov	r2, r0
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	490a      	ldr	r1, [pc, #40]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001390:	5ccb      	ldrb	r3, [r1, r3]
 8001392:	fa22 f303 	lsr.w	r3, r2, r3
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <HAL_RCC_ClockConfig+0x1cc>)
 8001398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_RCC_ClockConfig+0x1d0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f914 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40022000 	.word	0x40022000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	08005404 	.word	0x08005404
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013de:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <HAL_RCC_GetSysClockFreq+0x94>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d002      	beq.n	80013f4 <HAL_RCC_GetSysClockFreq+0x30>
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d003      	beq.n	80013fa <HAL_RCC_GetSysClockFreq+0x36>
 80013f2:	e027      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_RCC_GetSysClockFreq+0x98>)
 80013f6:	613b      	str	r3, [r7, #16]
      break;
 80013f8:	e027      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	0c9b      	lsrs	r3, r3, #18
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d010      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_RCC_GetSysClockFreq+0x94>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	0c5b      	lsrs	r3, r3, #17
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_RCC_GetSysClockFreq+0xa0>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <HAL_RCC_GetSysClockFreq+0x98>)
 8001426:	fb03 f202 	mul.w	r2, r3, r2
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e004      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0c      	ldr	r2, [pc, #48]	@ (8001468 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	613b      	str	r3, [r7, #16]
      break;
 8001442:	e002      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_RCC_GetSysClockFreq+0x98>)
 8001446:	613b      	str	r3, [r7, #16]
      break;
 8001448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144a:	693b      	ldr	r3, [r7, #16]
}
 800144c:	4618      	mov	r0, r3
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	007a1200 	.word	0x007a1200
 8001460:	0800541c 	.word	0x0800541c
 8001464:	0800542c 	.word	0x0800542c
 8001468:	003d0900 	.word	0x003d0900

0800146c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001470:	4b02      	ldr	r3, [pc, #8]	@ (800147c <HAL_RCC_GetHCLKFreq+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001484:	f7ff fff2 	bl	800146c <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	@ (80014a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08005414 	.word	0x08005414

080014a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014ac:	f7ff ffde 	bl	800146c <HAL_RCC_GetHCLKFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0adb      	lsrs	r3, r3, #11
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4903      	ldr	r1, [pc, #12]	@ (80014cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08005414 	.word	0x08005414

080014d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	220f      	movs	r2, #15
 80014de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_RCC_GetClockConfig+0x58>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_RCC_GetClockConfig+0x58>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_RCC_GetClockConfig+0x58>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_RCC_GetClockConfig+0x58>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	08db      	lsrs	r3, r3, #3
 800150a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_RCC_GetClockConfig+0x5c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0207 	and.w	r2, r3, #7
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	40021000 	.word	0x40021000
 800152c:	40022000 	.word	0x40022000

08001530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <RCC_Delay+0x34>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <RCC_Delay+0x38>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0a5b      	lsrs	r3, r3, #9
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800154c:	bf00      	nop
  }
  while (Delay --);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	60fa      	str	r2, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f9      	bne.n	800154c <RCC_Delay+0x1c>
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000000 	.word	0x20000000
 8001568:	10624dd3 	.word	0x10624dd3

0800156c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e041      	b.n	8001602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f839 	bl	800160a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3304      	adds	r3, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4610      	mov	r0, r2
 80015ac:	f000 f99c 	bl	80018e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d001      	beq.n	8001634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e03a      	b.n	80016aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_TIM_Base_Start_IT+0x98>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00e      	beq.n	8001674 <HAL_TIM_Base_Start_IT+0x58>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165e:	d009      	beq.n	8001674 <HAL_TIM_Base_Start_IT+0x58>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d004      	beq.n	8001674 <HAL_TIM_Base_Start_IT+0x58>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <HAL_TIM_Base_Start_IT+0xa0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d111      	bne.n	8001698 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b06      	cmp	r3, #6
 8001684:	d010      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001696:	e007      	b.n	80016a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40012c00 	.word	0x40012c00
 80016b8:	40000400 	.word	0x40000400
 80016bc:	40000800 	.word	0x40000800

080016c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d020      	beq.n	8001724 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01b      	beq.n	8001724 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0202 	mvn.w	r2, #2
 80016f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8d1 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 8001710:	e005      	b.n	800171e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8c4 	bl	80018a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8d3 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d020      	beq.n	8001770 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0204 	mvn.w	r2, #4
 8001740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8ab 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 800175c:	e005      	b.n	800176a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f89e 	bl	80018a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f8ad 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d020      	beq.n	80017bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01b      	beq.n	80017bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0208 	mvn.w	r2, #8
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2204      	movs	r2, #4
 8001792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f885 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f878 	bl	80018a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f887 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d020      	beq.n	8001808 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0210 	mvn.w	r2, #16
 80017d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2208      	movs	r2, #8
 80017de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f85f 	bl	80018b2 <HAL_TIM_IC_CaptureCallback>
 80017f4:	e005      	b.n	8001802 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f852 	bl	80018a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f861 	bl	80018c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0201 	mvn.w	r2, #1
 8001824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe fe42 	bl	80004b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8c3 	bl	80019d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00c      	beq.n	8001874 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800186c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f831 	bl	80018d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00c      	beq.n	8001898 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b00      	cmp	r3, #0
 8001886:	d007      	beq.n	8001898 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 0220 	mvn.w	r2, #32
 8001890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f896 	bl	80019c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a2f      	ldr	r2, [pc, #188]	@ (80019b8 <TIM_Base_SetConfig+0xd0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00b      	beq.n	8001918 <TIM_Base_SetConfig+0x30>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001906:	d007      	beq.n	8001918 <TIM_Base_SetConfig+0x30>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a2c      	ldr	r2, [pc, #176]	@ (80019bc <TIM_Base_SetConfig+0xd4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d003      	beq.n	8001918 <TIM_Base_SetConfig+0x30>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a2b      	ldr	r2, [pc, #172]	@ (80019c0 <TIM_Base_SetConfig+0xd8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d108      	bne.n	800192a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800191e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <TIM_Base_SetConfig+0xd0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00b      	beq.n	800194a <TIM_Base_SetConfig+0x62>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001938:	d007      	beq.n	800194a <TIM_Base_SetConfig+0x62>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <TIM_Base_SetConfig+0xd4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d003      	beq.n	800194a <TIM_Base_SetConfig+0x62>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <TIM_Base_SetConfig+0xd8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d108      	bne.n	800195c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <TIM_Base_SetConfig+0xd0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d103      	bne.n	8001990 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f023 0201 	bic.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]
  }
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40000800 	.word	0x40000800

080019c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e042      	b.n	8001a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fd9e 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2224      	movs	r2, #36	@ 0x24
 8001a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f82b 	bl	8001a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001ac2:	f023 030c 	bic.w	r3, r3, #12
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2c      	ldr	r2, [pc, #176]	@ (8001b9c <UART_SetConfig+0x114>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d103      	bne.n	8001af8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001af0:	f7ff fcda 	bl	80014a8 <HAL_RCC_GetPCLK2Freq>
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	e002      	b.n	8001afe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001af8:	f7ff fcc2 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 8001afc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009a      	lsls	r2, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	4a22      	ldr	r2, [pc, #136]	@ (8001ba0 <UART_SetConfig+0x118>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	0119      	lsls	r1, r3, #4
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009a      	lsls	r2, r3, #2
 8001b28:	441a      	add	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <UART_SetConfig+0x118>)
 8001b36:	fba3 0302 	umull	r0, r3, r3, r2
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2064      	movs	r0, #100	@ 0x64
 8001b3e:	fb00 f303 	mul.w	r3, r0, r3
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	3332      	adds	r3, #50	@ 0x32
 8001b48:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <UART_SetConfig+0x118>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b54:	4419      	add	r1, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009a      	lsls	r2, r3, #2
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <UART_SetConfig+0x118>)
 8001b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2064      	movs	r0, #100	@ 0x64
 8001b76:	fb00 f303 	mul.w	r3, r0, r3
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	3332      	adds	r3, #50	@ 0x32
 8001b80:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <UART_SetConfig+0x118>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	440a      	add	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	51eb851f 	.word	0x51eb851f

08001ba4 <__NVIC_SetPriority>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <SysTick_Handler+0x1c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001c00:	f002 f988 	bl	8003f14 <xTaskGetSchedulerState>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001c0a:	f003 f82d 	bl	8004c68 <xPortSysTickHandler>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f06f 0004 	mvn.w	r0, #4
 8001c22:	f7ff ffbf 	bl	8001ba4 <__NVIC_SetPriority>
#endif
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c32:	f3ef 8305 	mrs	r3, IPSR
 8001c36:	603b      	str	r3, [r7, #0]
  return(result);
 8001c38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001c3e:	f06f 0305 	mvn.w	r3, #5
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e00c      	b.n	8001c60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <osKernelInitialize+0x40>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <osKernelInitialize+0x40>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	e002      	b.n	8001c60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000120 	.word	0x20000120

08001c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c76:	f3ef 8305 	mrs	r3, IPSR
 8001c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8001c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8001c82:	f06f 0305 	mvn.w	r3, #5
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	e010      	b.n	8001cac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <osKernelStart+0x48>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d109      	bne.n	8001ca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c92:	f7ff ffc1 	bl	8001c18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <osKernelStart+0x48>)
 8001c98:	2202      	movs	r2, #2
 8001c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c9c:	f001 fcda 	bl	8003654 <vTaskStartScheduler>
      stat = osOK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	e002      	b.n	8001cac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000120 	.word	0x20000120

08001cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	@ 0x38
 8001cc0:	af04      	add	r7, sp, #16
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ccc:	f3ef 8305 	mrs	r3, IPSR
 8001cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8001cd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d17e      	bne.n	8001dd6 <osThreadNew+0x11a>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d07b      	beq.n	8001dd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001ce2:	2318      	movs	r3, #24
 8001ce4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d045      	beq.n	8001d82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <osThreadNew+0x48>
        name = attr->name;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <osThreadNew+0x6e>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b38      	cmp	r3, #56	@ 0x38
 8001d1c:	d805      	bhi.n	8001d2a <osThreadNew+0x6e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <osThreadNew+0x72>
        return (NULL);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e054      	b.n	8001dd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00e      	beq.n	8001d64 <osThreadNew+0xa8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2ba7      	cmp	r3, #167	@ 0xa7
 8001d4c:	d90a      	bls.n	8001d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d006      	beq.n	8001d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <osThreadNew+0xa8>
        mem = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	e010      	b.n	8001d86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10c      	bne.n	8001d86 <osThreadNew+0xca>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d108      	bne.n	8001d86 <osThreadNew+0xca>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d104      	bne.n	8001d86 <osThreadNew+0xca>
          mem = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	e001      	b.n	8001d86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d110      	bne.n	8001dae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d94:	9202      	str	r2, [sp, #8]
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f001 fa62 	bl	800326c <xTaskCreateStatic>
 8001da8:	4603      	mov	r3, r0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e013      	b.n	8001dd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d110      	bne.n	8001dd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f001 fab0 	bl	800332c <xTaskCreate>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <osThreadNew+0x11a>
            hTask = NULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001dd6:	693b      	ldr	r3, [r7, #16]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001de8:	f3ef 8305 	mrs	r3, IPSR
 8001dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <osDelay+0x1c>
    stat = osErrorISR;
 8001df4:	f06f 0305 	mvn.w	r3, #5
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e007      	b.n	8001e0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f001 fbee 	bl	80035e8 <vTaskDelay>
    }
  }

  return (stat);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b08a      	sub	sp, #40	@ 0x28
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e26:	f3ef 8305 	mrs	r3, IPSR
 8001e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8001e2c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d175      	bne.n	8001f1e <osSemaphoreNew+0x108>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d072      	beq.n	8001f1e <osSemaphoreNew+0x108>
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d86e      	bhi.n	8001f1e <osSemaphoreNew+0x108>
    mem = -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d015      	beq.n	8001e78 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <osSemaphoreNew+0x4c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b4f      	cmp	r3, #79	@ 0x4f
 8001e5a:	d902      	bls.n	8001e62 <osSemaphoreNew+0x4c>
        mem = 1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	e00c      	b.n	8001e7c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d108      	bne.n	8001e7c <osSemaphoreNew+0x66>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <osSemaphoreNew+0x66>
          mem = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	e001      	b.n	8001e7c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e82:	d04c      	beq.n	8001f1e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d128      	bne.n	8001edc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10a      	bne.n	8001ea6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2203      	movs	r2, #3
 8001e96:	9200      	str	r2, [sp, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f000 fa25 	bl	80022ec <xQueueGenericCreateStatic>
 8001ea2:	61f8      	str	r0, [r7, #28]
 8001ea4:	e005      	b.n	8001eb2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 fa9b 	bl	80023e6 <xQueueGenericCreate>
 8001eb0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d022      	beq.n	8001efe <osSemaphoreNew+0xe8>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01f      	beq.n	8001efe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	69f8      	ldr	r0, [r7, #28]
 8001ec6:	f000 fb5b 	bl	8002580 <xQueueGenericSend>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d016      	beq.n	8001efe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8001ed0:	69f8      	ldr	r0, [r7, #28]
 8001ed2:	f000 fff9 	bl	8002ec8 <vQueueDelete>
            hSemaphore = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e010      	b.n	8001efe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d108      	bne.n	8001ef4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fad9 	bl	80024a2 <xQueueCreateCountingSemaphoreStatic>
 8001ef0:	61f8      	str	r0, [r7, #28]
 8001ef2:	e004      	b.n	8001efe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fb0c 	bl	8002514 <xQueueCreateCountingSemaphore>
 8001efc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <osSemaphoreNew+0xfc>
          name = attr->name;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e001      	b.n	8001f16 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001f16:	6979      	ldr	r1, [r7, #20]
 8001f18:	69f8      	ldr	r0, [r7, #28]
 8001f1a:	f001 f921 	bl	8003160 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001f40:	f06f 0303 	mvn.w	r3, #3
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e039      	b.n	8001fbc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f48:	f3ef 8305 	mrs	r3, IPSR
 8001f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d022      	beq.n	8001f9a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8001f5a:	f06f 0303 	mvn.w	r3, #3
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e02c      	b.n	8001fbc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	6938      	ldr	r0, [r7, #16]
 8001f70:	f000 ff28 	bl	8002dc4 <xQueueReceiveFromISR>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d003      	beq.n	8001f82 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8001f7a:	f06f 0302 	mvn.w	r3, #2
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e01c      	b.n	8001fbc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d019      	beq.n	8001fbc <osSemaphoreAcquire+0x94>
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <osSemaphoreAcquire+0xa0>)
 8001f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	f3bf 8f6f 	isb	sy
 8001f98:	e010      	b.n	8001fbc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	6938      	ldr	r0, [r7, #16]
 8001f9e:	f000 fe01 	bl	8002ba4 <xQueueSemaphoreTake>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d009      	beq.n	8001fbc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8001fae:	f06f 0301 	mvn.w	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e002      	b.n	8001fbc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8001fb6:	f06f 0302 	mvn.w	r3, #2
 8001fba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8001fbc:	697b      	ldr	r3, [r7, #20]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000ed04 	.word	0xe000ed04

08001fcc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001fe2:	f06f 0303 	mvn.w	r3, #3
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e02c      	b.n	8002044 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fea:	f3ef 8305 	mrs	r3, IPSR
 8001fee:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01a      	beq.n	800202c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	4619      	mov	r1, r3
 8002000:	6938      	ldr	r0, [r7, #16]
 8002002:	f000 fc5d 	bl	80028c0 <xQueueGiveFromISR>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d003      	beq.n	8002014 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800200c:	f06f 0302 	mvn.w	r3, #2
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e017      	b.n	8002044 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d014      	beq.n	8002044 <osSemaphoreRelease+0x78>
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <osSemaphoreRelease+0x84>)
 800201c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	e00b      	b.n	8002044 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800202c:	2300      	movs	r3, #0
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	6938      	ldr	r0, [r7, #16]
 8002034:	f000 faa4 	bl	8002580 <xQueueGenericSend>
 8002038:	4603      	mov	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	d002      	beq.n	8002044 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800203e:	f06f 0302 	mvn.w	r3, #2
 8002042:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002044:	697b      	ldr	r3, [r7, #20]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000ed04 	.word	0xe000ed04

08002054 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a06      	ldr	r2, [pc, #24]	@ (800207c <vApplicationGetIdleTaskMemory+0x28>)
 8002064:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <vApplicationGetIdleTaskMemory+0x2c>)
 800206a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	@ 0x80
 8002070:	601a      	str	r2, [r3, #0]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	20000124 	.word	0x20000124
 8002080:	200001cc 	.word	0x200001cc

08002084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <vApplicationGetTimerTaskMemory+0x30>)
 800209a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200003cc 	.word	0x200003cc
 80020b4:	20000474 	.word	0x20000474

080020b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f103 0208 	add.w	r2, r3, #8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f103 0208 	add.w	r2, r3, #8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f103 0208 	add.w	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d103      	bne.n	8002174 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	e00c      	b.n	800218e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3308      	adds	r3, #8
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e002      	b.n	8002182 <vListInsert+0x2e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d2f6      	bcs.n	800217c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6852      	ldr	r2, [r2, #4]
 80021e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d103      	bne.n	80021f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
	...

08002218 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002244:	f002 fc92 	bl	8004b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	68f9      	ldr	r1, [r7, #12]
 8002252:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	441a      	add	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	3b01      	subs	r3, #1
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	441a      	add	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	22ff      	movs	r2, #255	@ 0xff
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	22ff      	movs	r2, #255	@ 0xff
 8002290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d114      	bne.n	80022c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01a      	beq.n	80022d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3310      	adds	r3, #16
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fc6e 	bl	8003b88 <xTaskRemoveFromEventList>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d012      	beq.n	80022d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <xQueueGenericReset+0xd0>)
 80022b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	e009      	b.n	80022d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3310      	adds	r3, #16
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fef5 	bl	80020b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3324      	adds	r3, #36	@ 0x24
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fef0 	bl	80020b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022d8:	f002 fc78 	bl	8004bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022dc:	2301      	movs	r3, #1
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000ed04 	.word	0xe000ed04

080022ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	@ 0x38
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10b      	bne.n	8002336 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	e7fd      	b.n	8002332 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <xQueueGenericCreateStatic+0x56>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <xQueueGenericCreateStatic+0x5a>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <xQueueGenericCreateStatic+0x5c>
 8002346:	2300      	movs	r3, #0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800234c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	623b      	str	r3, [r7, #32]
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <xQueueGenericCreateStatic+0x84>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <xQueueGenericCreateStatic+0x88>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <xQueueGenericCreateStatic+0x8a>
 8002374:	2300      	movs	r3, #0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	61fb      	str	r3, [r7, #28]
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002392:	2350      	movs	r3, #80	@ 0x50
 8002394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b50      	cmp	r3, #80	@ 0x50
 800239a:	d00b      	beq.n	80023b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	61bb      	str	r3, [r7, #24]
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80023cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f840 	bl	800245c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80023de:	4618      	mov	r0, r3
 80023e0:	3730      	adds	r7, #48	@ 0x30
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b08a      	sub	sp, #40	@ 0x28
 80023ea:	af02      	add	r7, sp, #8
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <xQueueGenericCreate+0x2c>
	__asm volatile
 80023fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	613b      	str	r3, [r7, #16]
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	e7fd      	b.n	800240e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3350      	adds	r3, #80	@ 0x50
 8002420:	4618      	mov	r0, r3
 8002422:	f002 fca5 	bl	8004d70 <pvPortMalloc>
 8002426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3350      	adds	r3, #80	@ 0x50
 8002436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002440:	79fa      	ldrb	r2, [r7, #7]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f805 	bl	800245c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002452:	69bb      	ldr	r3, [r7, #24]
	}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d103      	bne.n	8002478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e002      	b.n	800247e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800248a:	2101      	movs	r1, #1
 800248c:	69b8      	ldr	r0, [r7, #24]
 800248e:	f7ff fec3 	bl	8002218 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b08a      	sub	sp, #40	@ 0x28
 80024a6:	af02      	add	r7, sp, #8
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	61bb      	str	r3, [r7, #24]
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d90b      	bls.n	80024ec <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	617b      	str	r3, [r7, #20]
}
 80024e6:	bf00      	nop
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80024ec:	2302      	movs	r3, #2
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fef8 	bl	80022ec <xQueueGenericCreateStatic>
 80024fc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800250a:	69fb      	ldr	r3, [r7, #28]
	}
 800250c:	4618      	mov	r0, r3
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	613b      	str	r3, [r7, #16]
}
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d90b      	bls.n	800255c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	60fb      	str	r3, [r7, #12]
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800255c:	2202      	movs	r2, #2
 800255e:	2100      	movs	r1, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff40 	bl	80023e6 <xQueueGenericCreate>
 8002566:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002574:	697b      	ldr	r3, [r7, #20]
	}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	@ 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <xQueueGenericSend+0x34>
	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <xQueueGenericSend+0x42>
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <xQueueGenericSend+0x46>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <xQueueGenericSend+0x48>
 80025c6:	2300      	movs	r3, #0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <xQueueGenericSend+0x64>
	__asm volatile
 80025cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSend+0x72>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <xQueueGenericSend+0x76>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <xQueueGenericSend+0x78>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <xQueueGenericSend+0x94>
	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	623b      	str	r3, [r7, #32]
}
 800260e:	bf00      	nop
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002614:	f001 fc7e 	bl	8003f14 <xTaskGetSchedulerState>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <xQueueGenericSend+0xa4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <xQueueGenericSend+0xa8>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <xQueueGenericSend+0xaa>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10b      	bne.n	8002646 <xQueueGenericSend+0xc6>
	__asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	61fb      	str	r3, [r7, #28]
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	e7fd      	b.n	8002642 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002646:	f002 fa91 	bl	8004b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <xQueueGenericSend+0xdc>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d129      	bne.n	80026b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002662:	f000 fc6c 	bl	8002f3e <prvCopyDataToQueue>
 8002666:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002672:	3324      	adds	r3, #36	@ 0x24
 8002674:	4618      	mov	r0, r3
 8002676:	f001 fa87 	bl	8003b88 <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002680:	4b3f      	ldr	r3, [pc, #252]	@ (8002780 <xQueueGenericSend+0x200>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e00a      	b.n	80026a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002698:	4b39      	ldr	r3, [pc, #228]	@ (8002780 <xQueueGenericSend+0x200>)
 800269a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026a8:	f002 fa90 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e063      	b.n	8002778 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026b6:	f002 fa89 	bl	8004bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e05c      	b.n	8002778 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fac1 	bl	8003c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026d2:	f002 fa7b 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026d6:	f001 f82d 	bl	8003734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026da:	f002 fa47 	bl	8004b6c <vPortEnterCritical>
 80026de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ea:	d103      	bne.n	80026f4 <xQueueGenericSend+0x174>
 80026ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d103      	bne.n	800270a <xQueueGenericSend+0x18a>
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800270a:	f002 fa5f 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800270e:	1d3a      	adds	r2, r7, #4
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fab0 	bl	8003c7c <xTaskCheckForTimeOut>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d124      	bne.n	800276c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002724:	f000 fd03 	bl	800312e <prvIsQueueFull>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800272e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002730:	3310      	adds	r3, #16
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f9d4 	bl	8003ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800273c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800273e:	f000 fc8e 	bl	800305e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002742:	f001 f805 	bl	8003750 <xTaskResumeAll>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f af7c 	bne.w	8002646 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800274e:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <xQueueGenericSend+0x200>)
 8002750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	e772      	b.n	8002646 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002762:	f000 fc7c 	bl	800305e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002766:	f000 fff3 	bl	8003750 <xTaskResumeAll>
 800276a:	e76c      	b.n	8002646 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800276c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800276e:	f000 fc76 	bl	800305e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002772:	f000 ffed 	bl	8003750 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002778:	4618      	mov	r0, r3
 800277a:	3738      	adds	r7, #56	@ 0x38
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	e000ed04 	.word	0xe000ed04

08002784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	@ 0x40
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <xQueueGenericSendFromISR+0x3e>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <xQueueGenericSendFromISR+0x42>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <xQueueGenericSendFromISR+0x44>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d103      	bne.n	80027f2 <xQueueGenericSendFromISR+0x6e>
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <xQueueGenericSendFromISR+0x72>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <xQueueGenericSendFromISR+0x74>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	623b      	str	r3, [r7, #32]
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002814:	f002 fa6c 	bl	8004cf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002818:	f3ef 8211 	mrs	r2, BASEPRI
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	61fa      	str	r2, [r7, #28]
 800282e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002830:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	429a      	cmp	r2, r3
 800283e:	d302      	bcc.n	8002846 <xQueueGenericSendFromISR+0xc2>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d12f      	bne.n	80028a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800284c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800285c:	f000 fb6f 	bl	8002f3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002860:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d112      	bne.n	8002890 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800286a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002874:	3324      	adds	r3, #36	@ 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f001 f986 	bl	8003b88 <xTaskRemoveFromEventList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00e      	beq.n	80028a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e007      	b.n	80028a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002890:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002894:	3301      	adds	r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	b25a      	sxtb	r2, r3
 800289a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80028a0:	2301      	movs	r3, #1
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80028a4:	e001      	b.n	80028aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3740      	adds	r7, #64	@ 0x40
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08e      	sub	sp, #56	@ 0x38
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80028ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	623b      	str	r3, [r7, #32]
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <xQueueGiveFromISR+0x4c>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	61fb      	str	r3, [r7, #28]
}
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <xQueueGiveFromISR+0x5c>
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <xQueueGiveFromISR+0x60>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <xQueueGiveFromISR+0x62>
 8002920:	2300      	movs	r3, #0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	61bb      	str	r3, [r7, #24]
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	e7fd      	b.n	800293a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800293e:	f002 f9d7 	bl	8004cf0 <vPortValidateInterruptPriority>
	__asm volatile
 8002942:	f3ef 8211 	mrs	r2, BASEPRI
 8002946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	617a      	str	r2, [r7, #20]
 8002958:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800295a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800296a:	429a      	cmp	r2, r3
 800296c:	d22b      	bcs.n	80029c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002980:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d112      	bne.n	80029b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	3324      	adds	r3, #36	@ 0x24
 8002996:	4618      	mov	r0, r3
 8002998:	f001 f8f6 	bl	8003b88 <xTaskRemoveFromEventList>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e007      	b.n	80029c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029b4:	3301      	adds	r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80029c0:	2301      	movs	r3, #1
 80029c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c4:	e001      	b.n	80029ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f383 8811 	msr	BASEPRI, r3
}
 80029d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3738      	adds	r7, #56	@ 0x38
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	@ 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <xQueueReceive+0x32>
	__asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	623b      	str	r3, [r7, #32]
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <xQueueReceive+0x40>
 8002a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <xQueueReceive+0x44>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <xQueueReceive+0x46>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10b      	bne.n	8002a42 <xQueueReceive+0x62>
	__asm volatile
 8002a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	61fb      	str	r3, [r7, #28]
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	e7fd      	b.n	8002a3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a42:	f001 fa67 	bl	8003f14 <xTaskGetSchedulerState>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <xQueueReceive+0x72>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <xQueueReceive+0x76>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueReceive+0x78>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <xQueueReceive+0x94>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	61bb      	str	r3, [r7, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a74:	f002 f87a 	bl	8004b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01f      	beq.n	8002ac4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a88:	f000 fac3 	bl	8003012 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00f      	beq.n	8002abc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 f871 	bl	8003b88 <xTaskRemoveFromEventList>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002aac:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba0 <xQueueReceive+0x1c0>)
 8002aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002abc:	f002 f886 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e069      	b.n	8002b98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aca:	f002 f87f 	bl	8004bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e062      	b.n	8002b98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 f8b7 	bl	8003c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ae6:	f002 f871 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aea:	f000 fe23 	bl	8003734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aee:	f002 f83d 	bl	8004b6c <vPortEnterCritical>
 8002af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d103      	bne.n	8002b08 <xQueueReceive+0x128>
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d103      	bne.n	8002b1e <xQueueReceive+0x13e>
 8002b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b1e:	f002 f855 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b22:	1d3a      	adds	r2, r7, #4
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f8a6 	bl	8003c7c <xTaskCheckForTimeOut>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d123      	bne.n	8002b7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b38:	f000 fae3 	bl	8003102 <prvIsQueueEmpty>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d017      	beq.n	8002b72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	3324      	adds	r3, #36	@ 0x24
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 ffca 	bl	8003ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b52:	f000 fa84 	bl	800305e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b56:	f000 fdfb 	bl	8003750 <xTaskResumeAll>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d189      	bne.n	8002a74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <xQueueReceive+0x1c0>)
 8002b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	e780      	b.n	8002a74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b74:	f000 fa73 	bl	800305e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b78:	f000 fdea 	bl	8003750 <xTaskResumeAll>
 8002b7c:	e77a      	b.n	8002a74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b80:	f000 fa6d 	bl	800305e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b84:	f000 fde4 	bl	8003750 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b8a:	f000 faba 	bl	8003102 <prvIsQueueEmpty>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f43f af6f 	beq.w	8002a74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3730      	adds	r7, #48	@ 0x30
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	e000ed04 	.word	0xe000ed04

08002ba4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	@ 0x38
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	623b      	str	r3, [r7, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00b      	beq.n	8002bf8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	61fb      	str	r3, [r7, #28]
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bf8:	f001 f98c 	bl	8003f14 <xTaskGetSchedulerState>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <xQueueSemaphoreTake+0x64>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <xQueueSemaphoreTake+0x68>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <xQueueSemaphoreTake+0x6a>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10b      	bne.n	8002c2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	61bb      	str	r3, [r7, #24]
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c2a:	f001 ff9f 	bl	8004b6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d024      	beq.n	8002c84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002c4a:	f001 fadd 	bl	8004208 <pvTaskIncrementMutexHeldCount>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00f      	beq.n	8002c7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5e:	3310      	adds	r3, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 ff91 	bl	8003b88 <xTaskRemoveFromEventList>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c6c:	4b54      	ldr	r3, [pc, #336]	@ (8002dc0 <xQueueSemaphoreTake+0x21c>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c7c:	f001 ffa6 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e098      	b.n	8002db6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d112      	bne.n	8002cb0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	617b      	str	r3, [r7, #20]
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002ca8:	f001 ff90 	bl	8004bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e082      	b.n	8002db6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb6:	f107 030c 	add.w	r3, r7, #12
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 ffc8 	bl	8003c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cc4:	f001 ff82 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cc8:	f000 fd34 	bl	8003734 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ccc:	f001 ff4e 	bl	8004b6c <vPortEnterCritical>
 8002cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d103      	bne.n	8002ce6 <xQueueSemaphoreTake+0x142>
 8002cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d103      	bne.n	8002cfc <xQueueSemaphoreTake+0x158>
 8002cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cfc:	f001 ff66 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d00:	463a      	mov	r2, r7
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 ffb7 	bl	8003c7c <xTaskCheckForTimeOut>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d132      	bne.n	8002d7a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d16:	f000 f9f4 	bl	8003102 <prvIsQueueEmpty>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d026      	beq.n	8002d6e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002d28:	f001 ff20 	bl	8004b6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f90d 	bl	8003f50 <xTaskPriorityInherit>
 8002d36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002d38:	f001 ff48 	bl	8004bcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3e:	3324      	adds	r3, #36	@ 0x24
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fecd 	bl	8003ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d4c:	f000 f987 	bl	800305e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d50:	f000 fcfe 	bl	8003750 <xTaskResumeAll>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f47f af67 	bne.w	8002c2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002d5c:	4b18      	ldr	r3, [pc, #96]	@ (8002dc0 <xQueueSemaphoreTake+0x21c>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	e75d      	b.n	8002c2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002d6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d70:	f000 f975 	bl	800305e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d74:	f000 fcec 	bl	8003750 <xTaskResumeAll>
 8002d78:	e757      	b.n	8002c2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002d7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d7c:	f000 f96f 	bl	800305e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d80:	f000 fce6 	bl	8003750 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d86:	f000 f9bc 	bl	8003102 <prvIsQueueEmpty>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f43f af4c 	beq.w	8002c2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002d98:	f001 fee8 	bl	8004b6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002d9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d9e:	f000 f8b7 	bl	8002f10 <prvGetDisinheritPriorityAfterTimeout>
 8002da2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 f9a8 	bl	8004100 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002db0:	f001 ff0c 	bl	8004bcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3738      	adds	r7, #56	@ 0x38
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	@ 0x38
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	623b      	str	r3, [r7, #32]
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	e7fd      	b.n	8002dee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d103      	bne.n	8002e00 <xQueueReceiveFromISR+0x3c>
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <xQueueReceiveFromISR+0x40>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <xQueueReceiveFromISR+0x42>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	61fb      	str	r3, [r7, #28]
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	e7fd      	b.n	8002e1e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e22:	f001 ff65 	bl	8004cf0 <vPortValidateInterruptPriority>
	__asm volatile
 8002e26:	f3ef 8211 	mrs	r2, BASEPRI
 8002e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	61ba      	str	r2, [r7, #24]
 8002e3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002e3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d02f      	beq.n	8002eae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e5c:	f000 f8d9 	bl	8003012 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e62:	1e5a      	subs	r2, r3, #1
 8002e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002e68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d112      	bne.n	8002e98 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fe82 	bl	8003b88 <xTaskRemoveFromEventList>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e007      	b.n	8002ea8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	b25a      	sxtb	r2, r3
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eac:	e001      	b.n	8002eb2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f383 8811 	msr	BASEPRI, r3
}
 8002ebc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3738      	adds	r7, #56	@ 0x38
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <vQueueDelete+0x2a>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	60bb      	str	r3, [r7, #8]
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f95c 	bl	80031b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f002 f802 	bl	8004f0c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e001      	b.n	8002f32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002f32:	68fb      	ldr	r3, [r7, #12]
	}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10d      	bne.n	8002f78 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d14d      	bne.n	8003000 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 f859 	bl	8004020 <xTaskPriorityDisinherit>
 8002f6e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	e043      	b.n	8003000 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d119      	bne.n	8002fb2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6858      	ldr	r0, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	461a      	mov	r2, r3
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	f002 f969 	bl	8005260 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	441a      	add	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d32b      	bcc.n	8003000 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	e026      	b.n	8003000 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68d8      	ldr	r0, [r3, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	f002 f94f 	bl	8005260 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	425b      	negs	r3, r3
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d207      	bcs.n	8002fee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	425b      	negs	r3, r3
 8002fe8:	441a      	add	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d105      	bne.n	8003000 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003008:	697b      	ldr	r3, [r7, #20]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d018      	beq.n	8003056 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	441a      	add	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d303      	bcc.n	8003046 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68d9      	ldr	r1, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	461a      	mov	r2, r3
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f002 f905 	bl	8005260 <memcpy>
	}
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003066:	f001 fd81 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003070:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003072:	e011      	b.n	8003098 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d012      	beq.n	80030a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3324      	adds	r3, #36	@ 0x24
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fd81 	bl	8003b88 <xTaskRemoveFromEventList>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800308c:	f000 fe5a 	bl	8003d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	3b01      	subs	r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309c:	2b00      	cmp	r3, #0
 800309e:	dce9      	bgt.n	8003074 <prvUnlockQueue+0x16>
 80030a0:	e000      	b.n	80030a4 <prvUnlockQueue+0x46>
					break;
 80030a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	22ff      	movs	r2, #255	@ 0xff
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80030ac:	f001 fd8e 	bl	8004bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030b0:	f001 fd5c 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030bc:	e011      	b.n	80030e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3310      	adds	r3, #16
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fd5c 	bl	8003b88 <xTaskRemoveFromEventList>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030d6:	f000 fe35 	bl	8003d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030da:	7bbb      	ldrb	r3, [r7, #14]
 80030dc:	3b01      	subs	r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	dce9      	bgt.n	80030be <prvUnlockQueue+0x60>
 80030ea:	e000      	b.n	80030ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	22ff      	movs	r2, #255	@ 0xff
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80030f6:	f001 fd69 	bl	8004bcc <vPortExitCritical>
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800310a:	f001 fd2f 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003116:	2301      	movs	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e001      	b.n	8003120 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003120:	f001 fd54 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003124:	68fb      	ldr	r3, [r7, #12]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003136:	f001 fd19 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003142:	429a      	cmp	r2, r3
 8003144:	d102      	bne.n	800314c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003146:	2301      	movs	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e001      	b.n	8003150 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003150:	f001 fd3c 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003154:	68fb      	ldr	r3, [r7, #12]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e014      	b.n	800319a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003170:	4a0e      	ldr	r2, [pc, #56]	@ (80031ac <vQueueAddToRegistry+0x4c>)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800317c:	490b      	ldr	r1, [pc, #44]	@ (80031ac <vQueueAddToRegistry+0x4c>)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003186:	4a09      	ldr	r2, [pc, #36]	@ (80031ac <vQueueAddToRegistry+0x4c>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003192:	e006      	b.n	80031a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b07      	cmp	r3, #7
 800319e:	d9e7      	bls.n	8003170 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000874 	.word	0x20000874

080031b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e016      	b.n	80031ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80031be:	4a10      	ldr	r2, [pc, #64]	@ (8003200 <vQueueUnregisterQueue+0x50>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d10b      	bne.n	80031e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80031ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003200 <vQueueUnregisterQueue+0x50>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2100      	movs	r1, #0
 80031d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80031d8:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <vQueueUnregisterQueue+0x50>)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
				break;
 80031e4:	e006      	b.n	80031f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b07      	cmp	r3, #7
 80031f0:	d9e5      	bls.n	80031be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000874 	.word	0x20000874

08003204 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003214:	f001 fcaa 	bl	8004b6c <vPortEnterCritical>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800321e:	b25b      	sxtb	r3, r3
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d103      	bne.n	800322e <vQueueWaitForMessageRestricted+0x2a>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003234:	b25b      	sxtb	r3, r3
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	d103      	bne.n	8003244 <vQueueWaitForMessageRestricted+0x40>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003244:	f001 fcc2 	bl	8004bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3324      	adds	r3, #36	@ 0x24
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fc69 	bl	8003b30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff fefd 	bl	800305e <prvUnlockQueue>
	}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	@ 0x38
 8003270:	af04      	add	r7, sp, #16
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800327a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	623b      	str	r3, [r7, #32]
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	61fb      	str	r3, [r7, #28]
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	e7fd      	b.n	80032b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032b6:	23a8      	movs	r3, #168	@ 0xa8
 80032b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2ba8      	cmp	r3, #168	@ 0xa8
 80032be:	d00b      	beq.n	80032d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61bb      	str	r3, [r7, #24]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01e      	beq.n	800331e <xTaskCreateStatic+0xb2>
 80032e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01b      	beq.n	800331e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032f8:	2300      	movs	r3, #0
 80032fa:	9303      	str	r3, [sp, #12]
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f851 	bl	80033b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003316:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003318:	f000 f8f6 	bl	8003508 <prvAddNewTaskToReadyList>
 800331c:	e001      	b.n	8003322 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003322:	697b      	ldr	r3, [r7, #20]
	}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	@ 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	@ 0x30
 8003330:	af04      	add	r7, sp, #16
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fd15 	bl	8004d70 <pvPortMalloc>
 8003346:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00e      	beq.n	800336c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800334e:	20a8      	movs	r0, #168	@ 0xa8
 8003350:	f001 fd0e 	bl	8004d70 <pvPortMalloc>
 8003354:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
 8003362:	e005      	b.n	8003370 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003364:	6978      	ldr	r0, [r7, #20]
 8003366:	f001 fdd1 	bl	8004f0c <vPortFree>
 800336a:	e001      	b.n	8003370 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d017      	beq.n	80033a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	2300      	movs	r3, #0
 8003382:	9303      	str	r3, [sp, #12]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	9302      	str	r3, [sp, #8]
 8003388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f80f 	bl	80033b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800339a:	69f8      	ldr	r0, [r7, #28]
 800339c:	f000 f8b4 	bl	8003508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033a0:	2301      	movs	r3, #1
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e002      	b.n	80033ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033ac:	69bb      	ldr	r3, [r7, #24]
	}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	461a      	mov	r2, r3
 80033d0:	21a5      	movs	r1, #165	@ 0xa5
 80033d2:	f001 feb9 	bl	8005148 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033e0:	3b01      	subs	r3, #1
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	617b      	str	r3, [r7, #20]
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	e7fd      	b.n	800340e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01f      	beq.n	8003458 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	e012      	b.n	8003444 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	4413      	add	r3, r2
 8003424:	7819      	ldrb	r1, [r3, #0]
 8003426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	3334      	adds	r3, #52	@ 0x34
 800342e:	460a      	mov	r2, r1
 8003430:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3301      	adds	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	d9e9      	bls.n	800341e <prvInitialiseNewTask+0x66>
 800344a:	e000      	b.n	800344e <prvInitialiseNewTask+0x96>
			{
				break;
 800344c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003456:	e003      	b.n	8003460 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003462:	2b37      	cmp	r3, #55	@ 0x37
 8003464:	d901      	bls.n	800346a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003466:	2337      	movs	r3, #55	@ 0x37
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003474:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	2200      	movs	r2, #0
 800347a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	3304      	adds	r3, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe fe38 	bl	80020f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	3318      	adds	r3, #24
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fe33 	bl	80020f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003494:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b8:	3354      	adds	r3, #84	@ 0x54
 80034ba:	224c      	movs	r2, #76	@ 0x4c
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fe42 	bl	8005148 <memset>
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	4a0d      	ldr	r2, [pc, #52]	@ (80034fc <prvInitialiseNewTask+0x144>)
 80034c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80034ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003500 <prvInitialiseNewTask+0x148>)
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003504 <prvInitialiseNewTask+0x14c>)
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	69b8      	ldr	r0, [r7, #24]
 80034dc:	f001 fa54 	bl	8004988 <pxPortInitialiseStack>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034f2:	bf00      	nop
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20002290 	.word	0x20002290
 8003500:	200022f8 	.word	0x200022f8
 8003504:	20002360 	.word	0x20002360

08003508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003510:	f001 fb2c 	bl	8004b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003514:	4b2d      	ldr	r3, [pc, #180]	@ (80035cc <prvAddNewTaskToReadyList+0xc4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a2c      	ldr	r2, [pc, #176]	@ (80035cc <prvAddNewTaskToReadyList+0xc4>)
 800351c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800351e:	4b2c      	ldr	r3, [pc, #176]	@ (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003526:	4a2a      	ldr	r2, [pc, #168]	@ (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800352c:	4b27      	ldr	r3, [pc, #156]	@ (80035cc <prvAddNewTaskToReadyList+0xc4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d110      	bne.n	8003556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003534:	f000 fc2a 	bl	8003d8c <prvInitialiseTaskLists>
 8003538:	e00d      	b.n	8003556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800353a:	4b26      	ldr	r3, [pc, #152]	@ (80035d4 <prvAddNewTaskToReadyList+0xcc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003542:	4b23      	ldr	r3, [pc, #140]	@ (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d802      	bhi.n	8003556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003550:	4a1f      	ldr	r2, [pc, #124]	@ (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003556:	4b20      	ldr	r3, [pc, #128]	@ (80035d8 <prvAddNewTaskToReadyList+0xd0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <prvAddNewTaskToReadyList+0xd0>)
 800355e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <prvAddNewTaskToReadyList+0xd0>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <prvAddNewTaskToReadyList+0xd4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d903      	bls.n	800357c <prvAddNewTaskToReadyList+0x74>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <prvAddNewTaskToReadyList+0xd4>)
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4a15      	ldr	r2, [pc, #84]	@ (80035e0 <prvAddNewTaskToReadyList+0xd8>)
 800358a:	441a      	add	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7fe fdbb 	bl	800210e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003598:	f001 fb18 	bl	8004bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800359c:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <prvAddNewTaskToReadyList+0xcc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035a4:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d207      	bcs.n	80035c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035b2:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <prvAddNewTaskToReadyList+0xdc>)
 80035b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000d88 	.word	0x20000d88
 80035d0:	200008b4 	.word	0x200008b4
 80035d4:	20000d94 	.word	0x20000d94
 80035d8:	20000da4 	.word	0x20000da4
 80035dc:	20000d90 	.word	0x20000d90
 80035e0:	200008b8 	.word	0x200008b8
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d018      	beq.n	800362c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <vTaskDelay+0x64>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <vTaskDelay+0x32>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	60bb      	str	r3, [r7, #8]
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800361a:	f000 f88b 	bl	8003734 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800361e:	2100      	movs	r1, #0
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fe05 	bl	8004230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003626:	f000 f893 	bl	8003750 <xTaskResumeAll>
 800362a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003632:	4b07      	ldr	r3, [pc, #28]	@ (8003650 <vTaskDelay+0x68>)
 8003634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000db0 	.word	0x20000db0
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	@ 0x28
 8003658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003662:	463a      	mov	r2, r7
 8003664:	1d39      	adds	r1, r7, #4
 8003666:	f107 0308 	add.w	r3, r7, #8
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fcf2 	bl	8002054 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	9202      	str	r2, [sp, #8]
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	460a      	mov	r2, r1
 8003682:	4924      	ldr	r1, [pc, #144]	@ (8003714 <vTaskStartScheduler+0xc0>)
 8003684:	4824      	ldr	r0, [pc, #144]	@ (8003718 <vTaskStartScheduler+0xc4>)
 8003686:	f7ff fdf1 	bl	800326c <xTaskCreateStatic>
 800368a:	4603      	mov	r3, r0
 800368c:	4a23      	ldr	r2, [pc, #140]	@ (800371c <vTaskStartScheduler+0xc8>)
 800368e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003690:	4b22      	ldr	r3, [pc, #136]	@ (800371c <vTaskStartScheduler+0xc8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e001      	b.n	80036a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036a8:	f000 fe16 	bl	80042d8 <xTimerCreateTimerTask>
 80036ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d11b      	bne.n	80036ec <vTaskStartScheduler+0x98>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	613b      	str	r3, [r7, #16]
}
 80036c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036c8:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <vTaskStartScheduler+0xcc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3354      	adds	r3, #84	@ 0x54
 80036ce:	4a15      	ldr	r2, [pc, #84]	@ (8003724 <vTaskStartScheduler+0xd0>)
 80036d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036d2:	4b15      	ldr	r3, [pc, #84]	@ (8003728 <vTaskStartScheduler+0xd4>)
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036da:	4b14      	ldr	r3, [pc, #80]	@ (800372c <vTaskStartScheduler+0xd8>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036e0:	4b13      	ldr	r3, [pc, #76]	@ (8003730 <vTaskStartScheduler+0xdc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036e6:	f001 f9cf 	bl	8004a88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036ea:	e00f      	b.n	800370c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d10b      	bne.n	800370c <vTaskStartScheduler+0xb8>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60fb      	str	r3, [r7, #12]
}
 8003706:	bf00      	nop
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <vTaskStartScheduler+0xb4>
}
 800370c:	bf00      	nop
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	08005370 	.word	0x08005370
 8003718:	08003d5d 	.word	0x08003d5d
 800371c:	20000dac 	.word	0x20000dac
 8003720:	200008b4 	.word	0x200008b4
 8003724:	20000010 	.word	0x20000010
 8003728:	20000da8 	.word	0x20000da8
 800372c:	20000d94 	.word	0x20000d94
 8003730:	20000d8c 	.word	0x20000d8c

08003734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003738:	4b04      	ldr	r3, [pc, #16]	@ (800374c <vTaskSuspendAll+0x18>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	4a03      	ldr	r2, [pc, #12]	@ (800374c <vTaskSuspendAll+0x18>)
 8003740:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003742:	bf00      	nop
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000db0 	.word	0x20000db0

08003750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800375e:	4b42      	ldr	r3, [pc, #264]	@ (8003868 <xTaskResumeAll+0x118>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10b      	bne.n	800377e <xTaskResumeAll+0x2e>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	603b      	str	r3, [r7, #0]
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	e7fd      	b.n	800377a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800377e:	f001 f9f5 	bl	8004b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003782:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <xTaskResumeAll+0x118>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	4a37      	ldr	r2, [pc, #220]	@ (8003868 <xTaskResumeAll+0x118>)
 800378a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378c:	4b36      	ldr	r3, [pc, #216]	@ (8003868 <xTaskResumeAll+0x118>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d162      	bne.n	800385a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003794:	4b35      	ldr	r3, [pc, #212]	@ (800386c <xTaskResumeAll+0x11c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05e      	beq.n	800385a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800379c:	e02f      	b.n	80037fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800379e:	4b34      	ldr	r3, [pc, #208]	@ (8003870 <xTaskResumeAll+0x120>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3318      	adds	r3, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fd0a 	bl	80021c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3304      	adds	r3, #4
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fd05 	bl	80021c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037be:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <xTaskResumeAll+0x124>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d903      	bls.n	80037ce <xTaskResumeAll+0x7e>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003874 <xTaskResumeAll+0x124>)
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a27      	ldr	r2, [pc, #156]	@ (8003878 <xTaskResumeAll+0x128>)
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7fe fc92 	bl	800210e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <xTaskResumeAll+0x12c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d302      	bcc.n	80037fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80037f8:	4b21      	ldr	r3, [pc, #132]	@ (8003880 <xTaskResumeAll+0x130>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003870 <xTaskResumeAll+0x120>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1cb      	bne.n	800379e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800380c:	f000 fb62 	bl	8003ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003810:	4b1c      	ldr	r3, [pc, #112]	@ (8003884 <xTaskResumeAll+0x134>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800381c:	f000 f844 	bl	80038a8 <xTaskIncrementTick>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003826:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <xTaskResumeAll+0x130>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3b01      	subs	r3, #1
 8003830:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f1      	bne.n	800381c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003838:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <xTaskResumeAll+0x134>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800383e:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <xTaskResumeAll+0x130>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003846:	2301      	movs	r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800384a:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <xTaskResumeAll+0x138>)
 800384c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800385a:	f001 f9b7 	bl	8004bcc <vPortExitCritical>

	return xAlreadyYielded;
 800385e:	68bb      	ldr	r3, [r7, #8]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000db0 	.word	0x20000db0
 800386c:	20000d88 	.word	0x20000d88
 8003870:	20000d48 	.word	0x20000d48
 8003874:	20000d90 	.word	0x20000d90
 8003878:	200008b8 	.word	0x200008b8
 800387c:	200008b4 	.word	0x200008b4
 8003880:	20000d9c 	.word	0x20000d9c
 8003884:	20000d98 	.word	0x20000d98
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <xTaskGetTickCount+0x18>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003898:	687b      	ldr	r3, [r7, #4]
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	20000d8c 	.word	0x20000d8c

080038a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b2:	4b4f      	ldr	r3, [pc, #316]	@ (80039f0 <xTaskIncrementTick+0x148>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 8090 	bne.w	80039dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038bc:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <xTaskIncrementTick+0x14c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038c4:	4a4b      	ldr	r2, [pc, #300]	@ (80039f4 <xTaskIncrementTick+0x14c>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d121      	bne.n	8003914 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80038d0:	4b49      	ldr	r3, [pc, #292]	@ (80039f8 <xTaskIncrementTick+0x150>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	603b      	str	r3, [r7, #0]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <xTaskIncrementTick+0x46>
 80038f2:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <xTaskIncrementTick+0x150>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	4b40      	ldr	r3, [pc, #256]	@ (80039fc <xTaskIncrementTick+0x154>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3e      	ldr	r2, [pc, #248]	@ (80039f8 <xTaskIncrementTick+0x150>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4a3e      	ldr	r2, [pc, #248]	@ (80039fc <xTaskIncrementTick+0x154>)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b3e      	ldr	r3, [pc, #248]	@ (8003a00 <xTaskIncrementTick+0x158>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3301      	adds	r3, #1
 800390c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a00 <xTaskIncrementTick+0x158>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	f000 fae0 	bl	8003ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003914:	4b3b      	ldr	r3, [pc, #236]	@ (8003a04 <xTaskIncrementTick+0x15c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	429a      	cmp	r2, r3
 800391c:	d349      	bcc.n	80039b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <xTaskIncrementTick+0x150>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003928:	4b36      	ldr	r3, [pc, #216]	@ (8003a04 <xTaskIncrementTick+0x15c>)
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	601a      	str	r2, [r3, #0]
					break;
 8003930:	e03f      	b.n	80039b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <xTaskIncrementTick+0x150>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	429a      	cmp	r2, r3
 8003948:	d203      	bcs.n	8003952 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800394a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a04 <xTaskIncrementTick+0x15c>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003950:	e02f      	b.n	80039b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3304      	adds	r3, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fc34 	bl	80021c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3318      	adds	r3, #24
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fc2b 	bl	80021c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003972:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <xTaskIncrementTick+0x160>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d903      	bls.n	8003982 <xTaskIncrementTick+0xda>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <xTaskIncrementTick+0x160>)
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <xTaskIncrementTick+0x164>)
 8003990:	441a      	add	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7fe fbb8 	bl	800210e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <xTaskIncrementTick+0x168>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3b8      	bcc.n	800391e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b0:	e7b5      	b.n	800391e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039b2:	4b17      	ldr	r3, [pc, #92]	@ (8003a10 <xTaskIncrementTick+0x168>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b8:	4914      	ldr	r1, [pc, #80]	@ (8003a0c <xTaskIncrementTick+0x164>)
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d901      	bls.n	80039ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80039ca:	2301      	movs	r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039ce:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <xTaskIncrementTick+0x16c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e004      	b.n	80039e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <xTaskIncrementTick+0x170>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003a18 <xTaskIncrementTick+0x170>)
 80039e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039e6:	697b      	ldr	r3, [r7, #20]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000db0 	.word	0x20000db0
 80039f4:	20000d8c 	.word	0x20000d8c
 80039f8:	20000d40 	.word	0x20000d40
 80039fc:	20000d44 	.word	0x20000d44
 8003a00:	20000da0 	.word	0x20000da0
 8003a04:	20000da8 	.word	0x20000da8
 8003a08:	20000d90 	.word	0x20000d90
 8003a0c:	200008b8 	.word	0x200008b8
 8003a10:	200008b4 	.word	0x200008b4
 8003a14:	20000d9c 	.word	0x20000d9c
 8003a18:	20000d98 	.word	0x20000d98

08003a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a22:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <vTaskSwitchContext+0xb0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a2a:	4b29      	ldr	r3, [pc, #164]	@ (8003ad0 <vTaskSwitchContext+0xb4>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a30:	e047      	b.n	8003ac2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003a32:	4b27      	ldr	r3, [pc, #156]	@ (8003ad0 <vTaskSwitchContext+0xb4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a38:	4b26      	ldr	r3, [pc, #152]	@ (8003ad4 <vTaskSwitchContext+0xb8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e011      	b.n	8003a64 <vTaskSwitchContext+0x48>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <vTaskSwitchContext+0x42>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	607b      	str	r3, [r7, #4]
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	e7fd      	b.n	8003a5a <vTaskSwitchContext+0x3e>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	491c      	ldr	r1, [pc, #112]	@ (8003ad8 <vTaskSwitchContext+0xbc>)
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0e3      	beq.n	8003a40 <vTaskSwitchContext+0x24>
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <vTaskSwitchContext+0xbc>)
 8003a84:	4413      	add	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d104      	bne.n	8003aa8 <vTaskSwitchContext+0x8c>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4a0b      	ldr	r2, [pc, #44]	@ (8003adc <vTaskSwitchContext+0xc0>)
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <vTaskSwitchContext+0xb8>)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ab8:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <vTaskSwitchContext+0xc0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3354      	adds	r3, #84	@ 0x54
 8003abe:	4a08      	ldr	r2, [pc, #32]	@ (8003ae0 <vTaskSwitchContext+0xc4>)
 8003ac0:	6013      	str	r3, [r2, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	20000db0 	.word	0x20000db0
 8003ad0:	20000d9c 	.word	0x20000d9c
 8003ad4:	20000d90 	.word	0x20000d90
 8003ad8:	200008b8 	.word	0x200008b8
 8003adc:	200008b4 	.word	0x200008b4
 8003ae0:	20000010 	.word	0x20000010

08003ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b0c:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <vTaskPlaceOnEventList+0x48>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3318      	adds	r3, #24
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fe fb1d 	bl	8002154 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	6838      	ldr	r0, [r7, #0]
 8003b1e:	f000 fb87 	bl	8004230 <prvAddCurrentTaskToDelayedList>
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200008b4 	.word	0x200008b4

08003b30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	617b      	str	r3, [r7, #20]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3318      	adds	r3, #24
 8003b60:	4619      	mov	r1, r3
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7fe fad3 	bl	800210e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	68b8      	ldr	r0, [r7, #8]
 8003b78:	f000 fb5a 	bl	8004230 <prvAddCurrentTaskToDelayedList>
	}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	200008b4 	.word	0x200008b4

08003b88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	60fb      	str	r3, [r7, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3318      	adds	r3, #24
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fb02 	bl	80021c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <xTaskRemoveFromEventList+0xb0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11d      	bne.n	8003c04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe faf9 	bl	80021c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd6:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <xTaskRemoveFromEventList+0xb4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d903      	bls.n	8003be6 <xTaskRemoveFromEventList+0x5e>
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	4a16      	ldr	r2, [pc, #88]	@ (8003c3c <xTaskRemoveFromEventList+0xb4>)
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a13      	ldr	r2, [pc, #76]	@ (8003c40 <xTaskRemoveFromEventList+0xb8>)
 8003bf4:	441a      	add	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7fe fa86 	bl	800210e <vListInsertEnd>
 8003c02:	e005      	b.n	8003c10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	3318      	adds	r3, #24
 8003c08:	4619      	mov	r1, r3
 8003c0a:	480e      	ldr	r0, [pc, #56]	@ (8003c44 <xTaskRemoveFromEventList+0xbc>)
 8003c0c:	f7fe fa7f 	bl	800210e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <xTaskRemoveFromEventList+0xc0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d905      	bls.n	8003c2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <xTaskRemoveFromEventList+0xc4>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e001      	b.n	8003c2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c2e:	697b      	ldr	r3, [r7, #20]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000db0 	.word	0x20000db0
 8003c3c:	20000d90 	.word	0x20000d90
 8003c40:	200008b8 	.word	0x200008b8
 8003c44:	20000d48 	.word	0x20000d48
 8003c48:	200008b4 	.word	0x200008b4
 8003c4c:	20000d9c 	.word	0x20000d9c

08003c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c58:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <vTaskInternalSetTimeOutState+0x24>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <vTaskInternalSetTimeOutState+0x28>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	605a      	str	r2, [r3, #4]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000da0 	.word	0x20000da0
 8003c78:	20000d8c 	.word	0x20000d8c

08003c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	613b      	str	r3, [r7, #16]
}
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10b      	bne.n	8003cc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60fb      	str	r3, [r7, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	e7fd      	b.n	8003cbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003cc2:	f000 ff53 	bl	8004b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <xTaskCheckForTimeOut+0xc0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d102      	bne.n	8003ce6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e023      	b.n	8003d2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b15      	ldr	r3, [pc, #84]	@ (8003d40 <xTaskCheckForTimeOut+0xc4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d007      	beq.n	8003d02 <xTaskCheckForTimeOut+0x86>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e015      	b.n	8003d2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d20b      	bcs.n	8003d24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad2      	subs	r2, r2, r3
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff ff99 	bl	8003c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e004      	b.n	8003d2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f000 ff4d 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003d32:	69fb      	ldr	r3, [r7, #28]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000d8c 	.word	0x20000d8c
 8003d40:	20000da0 	.word	0x20000da0

08003d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d48:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <vTaskMissedYield+0x14>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000d9c 	.word	0x20000d9c

08003d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d64:	f000 f852 	bl	8003e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d68:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <prvIdleTask+0x28>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d9f9      	bls.n	8003d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d70:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <prvIdleTask+0x2c>)
 8003d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d80:	e7f0      	b.n	8003d64 <prvIdleTask+0x8>
 8003d82:	bf00      	nop
 8003d84:	200008b8 	.word	0x200008b8
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	e00c      	b.n	8003db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4a12      	ldr	r2, [pc, #72]	@ (8003dec <prvInitialiseTaskLists+0x60>)
 8003da4:	4413      	add	r3, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe f986 	bl	80020b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3301      	adds	r3, #1
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b37      	cmp	r3, #55	@ 0x37
 8003db6:	d9ef      	bls.n	8003d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003db8:	480d      	ldr	r0, [pc, #52]	@ (8003df0 <prvInitialiseTaskLists+0x64>)
 8003dba:	f7fe f97d 	bl	80020b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dbe:	480d      	ldr	r0, [pc, #52]	@ (8003df4 <prvInitialiseTaskLists+0x68>)
 8003dc0:	f7fe f97a 	bl	80020b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dc4:	480c      	ldr	r0, [pc, #48]	@ (8003df8 <prvInitialiseTaskLists+0x6c>)
 8003dc6:	f7fe f977 	bl	80020b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dca:	480c      	ldr	r0, [pc, #48]	@ (8003dfc <prvInitialiseTaskLists+0x70>)
 8003dcc:	f7fe f974 	bl	80020b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dd0:	480b      	ldr	r0, [pc, #44]	@ (8003e00 <prvInitialiseTaskLists+0x74>)
 8003dd2:	f7fe f971 	bl	80020b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <prvInitialiseTaskLists+0x78>)
 8003dd8:	4a05      	ldr	r2, [pc, #20]	@ (8003df0 <prvInitialiseTaskLists+0x64>)
 8003dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <prvInitialiseTaskLists+0x7c>)
 8003dde:	4a05      	ldr	r2, [pc, #20]	@ (8003df4 <prvInitialiseTaskLists+0x68>)
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	200008b8 	.word	0x200008b8
 8003df0:	20000d18 	.word	0x20000d18
 8003df4:	20000d2c 	.word	0x20000d2c
 8003df8:	20000d48 	.word	0x20000d48
 8003dfc:	20000d5c 	.word	0x20000d5c
 8003e00:	20000d74 	.word	0x20000d74
 8003e04:	20000d40 	.word	0x20000d40
 8003e08:	20000d44 	.word	0x20000d44

08003e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e12:	e019      	b.n	8003e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e14:	f000 feaa 	bl	8004b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e18:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <prvCheckTasksWaitingTermination+0x50>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe f9cd 	bl	80021c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <prvCheckTasksWaitingTermination+0x54>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	4a0b      	ldr	r2, [pc, #44]	@ (8003e60 <prvCheckTasksWaitingTermination+0x54>)
 8003e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <prvCheckTasksWaitingTermination+0x58>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e64 <prvCheckTasksWaitingTermination+0x58>)
 8003e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e3e:	f000 fec5 	bl	8004bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f810 	bl	8003e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e48:	4b06      	ldr	r3, [pc, #24]	@ (8003e64 <prvCheckTasksWaitingTermination+0x58>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e1      	bne.n	8003e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000d5c 	.word	0x20000d5c
 8003e60:	20000d88 	.word	0x20000d88
 8003e64:	20000d70 	.word	0x20000d70

08003e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3354      	adds	r3, #84	@ 0x54
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 f96f 	bl	8005158 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f83f 	bl	8004f0c <vPortFree>
				vPortFree( pxTCB );
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f001 f83c 	bl	8004f0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e94:	e019      	b.n	8003eca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d103      	bne.n	8003ea8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f001 f833 	bl	8004f0c <vPortFree>
	}
 8003ea6:	e010      	b.n	8003eca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d00b      	beq.n	8003eca <prvDeleteTCB+0x62>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60fb      	str	r3, [r7, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <prvDeleteTCB+0x5e>
	}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eda:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eec:	e008      	b.n	8003f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eee:	4b07      	ldr	r3, [pc, #28]	@ (8003f0c <prvResetNextTaskUnblockTime+0x38>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a04      	ldr	r2, [pc, #16]	@ (8003f10 <prvResetNextTaskUnblockTime+0x3c>)
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000d40 	.word	0x20000d40
 8003f10:	20000da8 	.word	0x20000da8

08003f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <xTaskGetSchedulerState+0x34>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f22:	2301      	movs	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	e008      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f28:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <xTaskGetSchedulerState+0x38>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f30:	2302      	movs	r3, #2
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e001      	b.n	8003f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f3a:	687b      	ldr	r3, [r7, #4]
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000d94 	.word	0x20000d94
 8003f4c:	20000db0 	.word	0x20000db0

08003f50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d051      	beq.n	800400a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004014 <xTaskPriorityInherit+0xc4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d241      	bcs.n	8003ff8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	db06      	blt.n	8003f8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7c:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <xTaskPriorityInherit+0xc4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6959      	ldr	r1, [r3, #20]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004018 <xTaskPriorityInherit+0xc8>)
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4299      	cmp	r1, r3
 8003fa0:	d122      	bne.n	8003fe8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe f90c 	bl	80021c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <xTaskPriorityInherit+0xc4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fba:	4b18      	ldr	r3, [pc, #96]	@ (800401c <xTaskPriorityInherit+0xcc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d903      	bls.n	8003fca <xTaskPriorityInherit+0x7a>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4a15      	ldr	r2, [pc, #84]	@ (800401c <xTaskPriorityInherit+0xcc>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4a10      	ldr	r2, [pc, #64]	@ (8004018 <xTaskPriorityInherit+0xc8>)
 8003fd8:	441a      	add	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f7fe f894 	bl	800210e <vListInsertEnd>
 8003fe6:	e004      	b.n	8003ff2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <xTaskPriorityInherit+0xc4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e008      	b.n	800400a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ffc:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <xTaskPriorityInherit+0xc4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	429a      	cmp	r2, r3
 8004004:	d201      	bcs.n	800400a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004006:	2301      	movs	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800400a:	68fb      	ldr	r3, [r7, #12]
	}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200008b4 	.word	0x200008b4
 8004018:	200008b8 	.word	0x200008b8
 800401c:	20000d90 	.word	0x20000d90

08004020 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d058      	beq.n	80040e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004036:	4b2f      	ldr	r3, [pc, #188]	@ (80040f4 <xTaskPriorityDisinherit+0xd4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d00b      	beq.n	8004058 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60bb      	str	r3, [r7, #8]
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407c:	1e5a      	subs	r2, r3, #1
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408a:	429a      	cmp	r2, r3
 800408c:	d02c      	beq.n	80040e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004092:	2b00      	cmp	r3, #0
 8004094:	d128      	bne.n	80040e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3304      	adds	r3, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe f892 	bl	80021c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b8:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <xTaskPriorityDisinherit+0xd8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d903      	bls.n	80040c8 <xTaskPriorityDisinherit+0xa8>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	4a0c      	ldr	r2, [pc, #48]	@ (80040f8 <xTaskPriorityDisinherit+0xd8>)
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4a09      	ldr	r2, [pc, #36]	@ (80040fc <xTaskPriorityDisinherit+0xdc>)
 80040d6:	441a      	add	r2, r3
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	3304      	adds	r3, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7fe f815 	bl	800210e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040e8:	697b      	ldr	r3, [r7, #20]
	}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200008b4 	.word	0x200008b4
 80040f8:	20000d90 	.word	0x20000d90
 80040fc:	200008b8 	.word	0x200008b8

08004100 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800410e:	2301      	movs	r3, #1
 8004110:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d06c      	beq.n	80041f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60fb      	str	r3, [r7, #12]
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d902      	bls.n	8004148 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e002      	b.n	800414e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	429a      	cmp	r2, r3
 8004156:	d04c      	beq.n	80041f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	429a      	cmp	r2, r3
 8004160:	d147      	bne.n	80041f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004162:	4b26      	ldr	r3, [pc, #152]	@ (80041fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d10b      	bne.n	8004184 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60bb      	str	r3, [r7, #8]
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	db04      	blt.n	80041a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	6959      	ldr	r1, [r3, #20]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80041b2:	4413      	add	r3, r2
 80041b4:	4299      	cmp	r1, r3
 80041b6:	d11c      	bne.n	80041f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe f801 	bl	80021c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d903      	bls.n	80041d6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004204 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4a07      	ldr	r2, [pc, #28]	@ (8004200 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80041e4:	441a      	add	r2, r3
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f7fd ff8e 	bl	800210e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f2:	bf00      	nop
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200008b4 	.word	0x200008b4
 8004200:	200008b8 	.word	0x200008b8
 8004204:	20000d90 	.word	0x20000d90

08004208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800420c:	4b07      	ldr	r3, [pc, #28]	@ (800422c <pvTaskIncrementMutexHeldCount+0x24>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <pvTaskIncrementMutexHeldCount+0x24>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800421a:	3201      	adds	r2, #1
 800421c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800421e:	4b03      	ldr	r3, [pc, #12]	@ (800422c <pvTaskIncrementMutexHeldCount+0x24>)
 8004220:	681b      	ldr	r3, [r3, #0]
	}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	200008b4 	.word	0x200008b4

08004230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800423a:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004240:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd ffbc 	bl	80021c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d10a      	bne.n	800426a <prvAddCurrentTaskToDelayedList+0x3a>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800425a:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4819      	ldr	r0, [pc, #100]	@ (80042c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004264:	f7fd ff53 	bl	800210e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004268:	e026      	b.n	80042b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004272:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	429a      	cmp	r2, r3
 8004280:	d209      	bcs.n	8004296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004282:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7fd ff60 	bl	8002154 <vListInsert>
}
 8004294:	e010      	b.n	80042b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004296:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7fd ff56 	bl	8002154 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d202      	bcs.n	80042b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042b2:	4a08      	ldr	r2, [pc, #32]	@ (80042d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6013      	str	r3, [r2, #0]
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000d8c 	.word	0x20000d8c
 80042c4:	200008b4 	.word	0x200008b4
 80042c8:	20000d74 	.word	0x20000d74
 80042cc:	20000d44 	.word	0x20000d44
 80042d0:	20000d40 	.word	0x20000d40
 80042d4:	20000da8 	.word	0x20000da8

080042d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	@ 0x28
 80042dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042e2:	f000 fb11 	bl	8004908 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042e6:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <xTimerCreateTimerTask+0x84>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d021      	beq.n	8004332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042f6:	1d3a      	adds	r2, r7, #4
 80042f8:	f107 0108 	add.w	r1, r7, #8
 80042fc:	f107 030c 	add.w	r3, r7, #12
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd febf 	bl	8002084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	9202      	str	r2, [sp, #8]
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	2302      	movs	r3, #2
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	460a      	mov	r2, r1
 8004318:	4911      	ldr	r1, [pc, #68]	@ (8004360 <xTimerCreateTimerTask+0x88>)
 800431a:	4812      	ldr	r0, [pc, #72]	@ (8004364 <xTimerCreateTimerTask+0x8c>)
 800431c:	f7fe ffa6 	bl	800326c <xTaskCreateStatic>
 8004320:	4603      	mov	r3, r0
 8004322:	4a11      	ldr	r2, [pc, #68]	@ (8004368 <xTimerCreateTimerTask+0x90>)
 8004324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <xTimerCreateTimerTask+0x90>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800432e:	2301      	movs	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	613b      	str	r3, [r7, #16]
}
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	e7fd      	b.n	800434c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004350:	697b      	ldr	r3, [r7, #20]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000de4 	.word	0x20000de4
 8004360:	08005378 	.word	0x08005378
 8004364:	080044a5 	.word	0x080044a5
 8004368:	20000de8 	.word	0x20000de8

0800436c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	@ 0x28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800437a:	2300      	movs	r3, #0
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <xTimerGenericCommand+0x30>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <xTimerGenericCommand+0x98>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02a      	beq.n	80043fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	dc18      	bgt.n	80043e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043b6:	f7ff fdad 	bl	8003f14 <xTaskGetSchedulerState>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d109      	bne.n	80043d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <xTimerGenericCommand+0x98>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	f107 0110 	add.w	r1, r7, #16
 80043c8:	2300      	movs	r3, #0
 80043ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043cc:	f7fe f8d8 	bl	8002580 <xQueueGenericSend>
 80043d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80043d2:	e012      	b.n	80043fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <xTimerGenericCommand+0x98>)
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	f107 0110 	add.w	r1, r7, #16
 80043dc:	2300      	movs	r3, #0
 80043de:	2200      	movs	r2, #0
 80043e0:	f7fe f8ce 	bl	8002580 <xQueueGenericSend>
 80043e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80043e6:	e008      	b.n	80043fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <xTimerGenericCommand+0x98>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	f107 0110 	add.w	r1, r7, #16
 80043f0:	2300      	movs	r3, #0
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	f7fe f9c6 	bl	8002784 <xQueueGenericSendFromISR>
 80043f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3728      	adds	r7, #40	@ 0x28
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000de4 	.word	0x20000de4

08004408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004412:	4b23      	ldr	r3, [pc, #140]	@ (80044a0 <prvProcessExpiredTimer+0x98>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	3304      	adds	r3, #4
 8004420:	4618      	mov	r0, r3
 8004422:	f7fd fecf 	bl	80021c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d023      	beq.n	800447c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	18d1      	adds	r1, r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	f000 f8d3 	bl	80045ec <prvInsertTimerInActiveList>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	2100      	movs	r1, #0
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f7ff ff88 	bl	800436c <xTimerGenericCommand>
 800445c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d114      	bne.n	800448e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60fb      	str	r3, [r7, #12]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	4798      	blx	r3
}
 8004496:	bf00      	nop
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000ddc 	.word	0x20000ddc

080044a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f859 	bl	8004568 <prvGetNextExpireTime>
 80044b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f805 	bl	80044cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044c2:	f000 f8d5 	bl	8004670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044c6:	bf00      	nop
 80044c8:	e7f0      	b.n	80044ac <prvTimerTask+0x8>
	...

080044cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044d6:	f7ff f92d 	bl	8003734 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f864 	bl	80045ac <prvSampleTimeNow>
 80044e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d130      	bne.n	800454e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <prvProcessTimerOrBlockTask+0x3c>
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d806      	bhi.n	8004508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044fa:	f7ff f929 	bl	8003750 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff81 	bl	8004408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004506:	e024      	b.n	8004552 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <prvProcessTimerOrBlockTask+0x90>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <prvProcessTimerOrBlockTask+0x50>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <prvProcessTimerOrBlockTask+0x52>
 800451c:	2300      	movs	r3, #0
 800451e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004520:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <prvProcessTimerOrBlockTask+0x94>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	f7fe fe69 	bl	8003204 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004532:	f7ff f90d 	bl	8003750 <xTaskResumeAll>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800453c:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <prvProcessTimerOrBlockTask+0x98>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
}
 800454c:	e001      	b.n	8004552 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800454e:	f7ff f8ff 	bl	8003750 <xTaskResumeAll>
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000de0 	.word	0x20000de0
 8004560:	20000de4 	.word	0x20000de4
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004570:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <prvGetNextExpireTime+0x40>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <prvGetNextExpireTime+0x16>
 800457a:	2201      	movs	r2, #1
 800457c:	e000      	b.n	8004580 <prvGetNextExpireTime+0x18>
 800457e:	2200      	movs	r2, #0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <prvGetNextExpireTime+0x40>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e001      	b.n	800459c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	20000ddc 	.word	0x20000ddc

080045ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045b4:	f7ff f96a 	bl	800388c <xTaskGetTickCount>
 80045b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <prvSampleTimeNow+0x3c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d205      	bcs.n	80045d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045c4:	f000 f93a 	bl	800483c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e002      	b.n	80045d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045d6:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <prvSampleTimeNow+0x3c>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000dec 	.word	0x20000dec

080045ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d812      	bhi.n	8004638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	1ad2      	subs	r2, r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e01b      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <prvInsertTimerInActiveList+0x7c>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7fd fd8f 	bl	8002154 <vListInsert>
 8004636:	e012      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d206      	bcs.n	800464e <prvInsertTimerInActiveList+0x62>
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e007      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800464e:	4b07      	ldr	r3, [pc, #28]	@ (800466c <prvInsertTimerInActiveList+0x80>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7fd fd7b 	bl	8002154 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000de0 	.word	0x20000de0
 800466c:	20000ddc 	.word	0x20000ddc

08004670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	@ 0x38
 8004674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004676:	e0ce      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da19      	bge.n	80046b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	3304      	adds	r3, #4
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	61fb      	str	r3, [r7, #28]
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a8:	6850      	ldr	r0, [r2, #4]
 80046aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f2c0 80ae 	blt.w	8004816 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	3304      	adds	r3, #4
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fd7a 	bl	80021c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046d0:	463b      	mov	r3, r7
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff6a 	bl	80045ac <prvSampleTimeNow>
 80046d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b09      	cmp	r3, #9
 80046de:	f200 8097 	bhi.w	8004810 <prvProcessReceivedCommands+0x1a0>
 80046e2:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <prvProcessReceivedCommands+0x78>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004711 	.word	0x08004711
 80046f4:	08004787 	.word	0x08004787
 80046f8:	0800479b 	.word	0x0800479b
 80046fc:	080047e7 	.word	0x080047e7
 8004700:	08004711 	.word	0x08004711
 8004704:	08004711 	.word	0x08004711
 8004708:	08004787 	.word	0x08004787
 800470c:	0800479b 	.word	0x0800479b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	18d1      	adds	r1, r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004730:	f7ff ff5c 	bl	80045ec <prvInsertTimerInActiveList>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d06c      	beq.n	8004814 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004740:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d061      	beq.n	8004814 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	441a      	add	r2, r3
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	2100      	movs	r1, #0
 8004760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004762:	f7ff fe03 	bl	800436c <xTimerGenericCommand>
 8004766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d152      	bne.n	8004814 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	61bb      	str	r3, [r7, #24]
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004798:	e03d      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	617b      	str	r3, [r7, #20]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	18d1      	adds	r1, r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047e0:	f7ff ff04 	bl	80045ec <prvInsertTimerInActiveList>
					break;
 80047e4:	e017      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80047f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f6:	f000 fb89 	bl	8004f0c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047fa:	e00c      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800480e:	e002      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004810:	bf00      	nop
 8004812:	e000      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
					break;
 8004814:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004816:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <prvProcessReceivedCommands+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	1d39      	adds	r1, r7, #4
 800481c:	2200      	movs	r2, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe f8de 	bl	80029e0 <xQueueReceive>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	f47f af26 	bne.w	8004678 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3730      	adds	r7, #48	@ 0x30
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000de4 	.word	0x20000de4

0800483c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004842:	e049      	b.n	80048d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004844:	4b2e      	ldr	r3, [pc, #184]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484e:	4b2c      	ldr	r3, [pc, #176]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3304      	adds	r3, #4
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd fcb1 	bl	80021c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02f      	beq.n	80048d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4413      	add	r3, r2
 8004880:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	d90e      	bls.n	80048a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004896:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7fd fc57 	bl	8002154 <vListInsert>
 80048a6:	e017      	b.n	80048d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a8:	2300      	movs	r3, #0
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	2100      	movs	r1, #0
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fd5a 	bl	800436c <xTimerGenericCommand>
 80048b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	603b      	str	r3, [r7, #0]
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1b0      	bne.n	8004844 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048e2:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <prvSwitchTimerLists+0xc8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 80048ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048f0:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <prvSwitchTimerLists+0xc8>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6013      	str	r3, [r2, #0]
}
 80048f6:	bf00      	nop
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000ddc 	.word	0x20000ddc
 8004904:	20000de0 	.word	0x20000de0

08004908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800490e:	f000 f92d 	bl	8004b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004912:	4b15      	ldr	r3, [pc, #84]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d120      	bne.n	800495c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800491a:	4814      	ldr	r0, [pc, #80]	@ (800496c <prvCheckForValidListAndQueue+0x64>)
 800491c:	f7fd fbcc 	bl	80020b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004920:	4813      	ldr	r0, [pc, #76]	@ (8004970 <prvCheckForValidListAndQueue+0x68>)
 8004922:	f7fd fbc9 	bl	80020b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004926:	4b13      	ldr	r3, [pc, #76]	@ (8004974 <prvCheckForValidListAndQueue+0x6c>)
 8004928:	4a10      	ldr	r2, [pc, #64]	@ (800496c <prvCheckForValidListAndQueue+0x64>)
 800492a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800492c:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <prvCheckForValidListAndQueue+0x70>)
 800492e:	4a10      	ldr	r2, [pc, #64]	@ (8004970 <prvCheckForValidListAndQueue+0x68>)
 8004930:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004932:	2300      	movs	r3, #0
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4b11      	ldr	r3, [pc, #68]	@ (800497c <prvCheckForValidListAndQueue+0x74>)
 8004938:	4a11      	ldr	r2, [pc, #68]	@ (8004980 <prvCheckForValidListAndQueue+0x78>)
 800493a:	2110      	movs	r1, #16
 800493c:	200a      	movs	r0, #10
 800493e:	f7fd fcd5 	bl	80022ec <xQueueGenericCreateStatic>
 8004942:	4603      	mov	r3, r0
 8004944:	4a08      	ldr	r2, [pc, #32]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 8004946:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004948:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004950:	4b05      	ldr	r3, [pc, #20]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	490b      	ldr	r1, [pc, #44]	@ (8004984 <prvCheckForValidListAndQueue+0x7c>)
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fc02 	bl	8003160 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800495c:	f000 f936 	bl	8004bcc <vPortExitCritical>
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000de4 	.word	0x20000de4
 800496c:	20000db4 	.word	0x20000db4
 8004970:	20000dc8 	.word	0x20000dc8
 8004974:	20000ddc 	.word	0x20000ddc
 8004978:	20000de0 	.word	0x20000de0
 800497c:	20000e90 	.word	0x20000e90
 8004980:	20000df0 	.word	0x20000df0
 8004984:	08005380 	.word	0x08005380

08004988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b04      	subs	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3b04      	subs	r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049b8:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <pxPortInitialiseStack+0x54>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b14      	subs	r3, #20
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b20      	subs	r3, #32
 80049ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	080049e1 	.word	0x080049e1

080049e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ea:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <prvTaskExitError+0x54>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d00b      	beq.n	8004a0c <prvTaskExitError+0x2c>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60fb      	str	r3, [r7, #12]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <prvTaskExitError+0x28>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60bb      	str	r3, [r7, #8]
}
 8004a1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a20:	bf00      	nop
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0fc      	beq.n	8004a22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	2000000c 	.word	0x2000000c
	...

08004a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a40:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <pxCurrentTCBConst2>)
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	6808      	ldr	r0, [r1, #0]
 8004a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a4a:	f380 8809 	msr	PSP, r0
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8811 	msr	BASEPRI, r0
 8004a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a5e:	4770      	bx	lr

08004a60 <pxCurrentTCBConst2>:
 8004a60:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop

08004a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a68:	4806      	ldr	r0, [pc, #24]	@ (8004a84 <prvPortStartFirstTask+0x1c>)
 8004a6a:	6800      	ldr	r0, [r0, #0]
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	f380 8808 	msr	MSP, r0
 8004a72:	b662      	cpsie	i
 8004a74:	b661      	cpsie	f
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	df00      	svc	0
 8004a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a82:	bf00      	nop
 8004a84:	e000ed08 	.word	0xe000ed08

08004a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a8e:	4b32      	ldr	r3, [pc, #200]	@ (8004b58 <xPortStartScheduler+0xd0>)
 8004a90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	@ 0xff
 8004a9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b5c <xPortStartScheduler+0xd4>)
 8004ab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ab8:	2207      	movs	r2, #7
 8004aba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004abc:	e009      	b.n	8004ad2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004abe:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	4a26      	ldr	r2, [pc, #152]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b80      	cmp	r3, #128	@ 0x80
 8004adc:	d0ef      	beq.n	8004abe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ade:	4b20      	ldr	r3, [pc, #128]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d00b      	beq.n	8004b02 <xPortStartScheduler+0x7a>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60bb      	str	r3, [r7, #8]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b02:	4b17      	ldr	r3, [pc, #92]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b0c:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b14:	4a12      	ldr	r2, [pc, #72]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b20:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0f      	ldr	r2, [pc, #60]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0c      	ldr	r2, [pc, #48]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b38:	f000 f8b8 	bl	8004cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <xPortStartScheduler+0xe0>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b42:	f7ff ff91 	bl	8004a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b46:	f7fe ff69 	bl	8003a1c <vTaskSwitchContext>
	prvTaskExitError();
 8004b4a:	f7ff ff49 	bl	80049e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000e400 	.word	0xe000e400
 8004b5c:	20000ee0 	.word	0x20000ee0
 8004b60:	20000ee4 	.word	0x20000ee4
 8004b64:	e000ed20 	.word	0xe000ed20
 8004b68:	2000000c 	.word	0x2000000c

08004b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	607b      	str	r3, [r7, #4]
}
 8004b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d110      	bne.n	8004bba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <vPortEnterCritical+0x5c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <vPortEnterCritical+0x4e>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	603b      	str	r3, [r7, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <vPortEnterCritical+0x4a>
	}
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	2000000c 	.word	0x2000000c
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bd2:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <vPortExitCritical+0x26>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	607b      	str	r3, [r7, #4]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	4a08      	ldr	r2, [pc, #32]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bfc:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <vPortExitCritical+0x44>
 8004c04:	2300      	movs	r3, #0
 8004c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c20:	f3ef 8009 	mrs	r0, PSP
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <pxCurrentTCBConst>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c30:	6010      	str	r0, [r2, #0]
 8004c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c3a:	f380 8811 	msr	BASEPRI, r0
 8004c3e:	f7fe feed 	bl	8003a1c <vTaskSwitchContext>
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c56:	f380 8809 	msr	PSP, r0
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	4770      	bx	lr

08004c60 <pxCurrentTCBConst>:
 8004c60:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f7fe fe11 	bl	80038a8 <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <xPortSysTickHandler+0x40>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b03      	ldr	r3, [pc, #12]	@ (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	e000e010 	.word	0xe000e010
 8004ce0:	e000e018 	.word	0xe000e018
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	10624dd3 	.word	0x10624dd3
 8004cec:	e000e014 	.word	0xe000e014

08004cf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cf6:	f3ef 8305 	mrs	r3, IPSR
 8004cfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	d915      	bls.n	8004d2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d02:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <vPortValidateInterruptPriority+0x70>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d0c:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <vPortValidateInterruptPriority+0x74>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	7afa      	ldrb	r2, [r7, #11]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d20b      	bcs.n	8004d2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	607b      	str	r3, [r7, #4]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <vPortValidateInterruptPriority+0x78>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d36:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <vPortValidateInterruptPriority+0x7c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90b      	bls.n	8004d56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <vPortValidateInterruptPriority+0x62>
	}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	e000e3f0 	.word	0xe000e3f0
 8004d64:	20000ee0 	.word	0x20000ee0
 8004d68:	e000ed0c 	.word	0xe000ed0c
 8004d6c:	20000ee4 	.word	0x20000ee4

08004d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	@ 0x28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d7c:	f7fe fcda 	bl	8003734 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d80:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d88:	f000 f924 	bl	8004fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef8 <pvPortMalloc+0x188>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8095 	bne.w	8004ec4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d015      	beq.n	8004dde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	3308      	adds	r3, #8
 8004dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <pvPortMalloc+0x6e>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	617b      	str	r3, [r7, #20]
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d06f      	beq.n	8004ec4 <pvPortMalloc+0x154>
 8004de4:	4b45      	ldr	r3, [pc, #276]	@ (8004efc <pvPortMalloc+0x18c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d86a      	bhi.n	8004ec4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dee:	4b44      	ldr	r3, [pc, #272]	@ (8004f00 <pvPortMalloc+0x190>)
 8004df0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004df2:	4b43      	ldr	r3, [pc, #268]	@ (8004f00 <pvPortMalloc+0x190>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df8:	e004      	b.n	8004e04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <pvPortMalloc+0xa6>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f1      	bne.n	8004dfa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e16:	4b37      	ldr	r3, [pc, #220]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d051      	beq.n	8004ec4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2208      	movs	r2, #8
 8004e26:	4413      	add	r3, r2
 8004e28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d920      	bls.n	8004e84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <pvPortMalloc+0xfc>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	613b      	str	r3, [r7, #16]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f000 f90a 	bl	8005098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <pvPortMalloc+0x18c>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004efc <pvPortMalloc+0x18c>)
 8004e90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e92:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <pvPortMalloc+0x18c>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <pvPortMalloc+0x194>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d203      	bcs.n	8004ea6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e9e:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <pvPortMalloc+0x18c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <pvPortMalloc+0x194>)
 8004ea4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <pvPortMalloc+0x188>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004eba:	4b13      	ldr	r3, [pc, #76]	@ (8004f08 <pvPortMalloc+0x198>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4a11      	ldr	r2, [pc, #68]	@ (8004f08 <pvPortMalloc+0x198>)
 8004ec2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ec4:	f7fe fc44 	bl	8003750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <pvPortMalloc+0x17a>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	60fb      	str	r3, [r7, #12]
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <pvPortMalloc+0x176>
	return pvReturn;
 8004eea:	69fb      	ldr	r3, [r7, #28]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3728      	adds	r7, #40	@ 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20002278 	.word	0x20002278
 8004ef8:	2000228c 	.word	0x2000228c
 8004efc:	2000227c 	.word	0x2000227c
 8004f00:	20002270 	.word	0x20002270
 8004f04:	20002280 	.word	0x20002280
 8004f08:	20002284 	.word	0x20002284

08004f0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d04f      	beq.n	8004fbe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f1e:	2308      	movs	r3, #8
 8004f20:	425b      	negs	r3, r3
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b25      	ldr	r3, [pc, #148]	@ (8004fc8 <vPortFree+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <vPortFree+0x46>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60fb      	str	r3, [r7, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <vPortFree+0x66>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60bb      	str	r3, [r7, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <vPortFree+0xbc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01e      	beq.n	8004fbe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11a      	bne.n	8004fbe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <vPortFree+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f98:	f7fe fbcc 	bl	8003734 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <vPortFree+0xc0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4a09      	ldr	r2, [pc, #36]	@ (8004fcc <vPortFree+0xc0>)
 8004fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f000 f874 	bl	8005098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fb0:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <vPortFree+0xc4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a06      	ldr	r2, [pc, #24]	@ (8004fd0 <vPortFree+0xc4>)
 8004fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004fba:	f7fe fbc9 	bl	8003750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	2000228c 	.word	0x2000228c
 8004fcc:	2000227c 	.word	0x2000227c
 8004fd0:	20002288 	.word	0x20002288

08004fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fe0:	4b27      	ldr	r3, [pc, #156]	@ (8005080 <prvHeapInit+0xac>)
 8004fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a1f      	ldr	r2, [pc, #124]	@ (8005080 <prvHeapInit+0xac>)
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800500c:	4a1d      	ldr	r2, [pc, #116]	@ (8005084 <prvHeapInit+0xb0>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005012:	4b1c      	ldr	r3, [pc, #112]	@ (8005084 <prvHeapInit+0xb0>)
 8005014:	2200      	movs	r2, #0
 8005016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005020:	2208      	movs	r2, #8
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <prvHeapInit+0xb4>)
 8005034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005036:	4b14      	ldr	r3, [pc, #80]	@ (8005088 <prvHeapInit+0xb4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800503e:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <prvHeapInit+0xb4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005054:	4b0c      	ldr	r3, [pc, #48]	@ (8005088 <prvHeapInit+0xb4>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <prvHeapInit+0xb8>)
 8005062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a09      	ldr	r2, [pc, #36]	@ (8005090 <prvHeapInit+0xbc>)
 800506a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800506c:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <prvHeapInit+0xc0>)
 800506e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000ee8 	.word	0x20000ee8
 8005084:	20002270 	.word	0x20002270
 8005088:	20002278 	.word	0x20002278
 800508c:	20002280 	.word	0x20002280
 8005090:	2000227c 	.word	0x2000227c
 8005094:	2000228c 	.word	0x2000228c

08005098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050a0:	4b27      	ldr	r3, [pc, #156]	@ (8005140 <prvInsertBlockIntoFreeList+0xa8>)
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e002      	b.n	80050ac <prvInsertBlockIntoFreeList+0x14>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d8f7      	bhi.n	80050a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d108      	bne.n	80050da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	441a      	add	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d118      	bne.n	8005120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <prvInsertBlockIntoFreeList+0xac>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d00d      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	441a      	add	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e008      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005116:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <prvInsertBlockIntoFreeList+0xac>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e003      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d002      	beq.n	8005136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	20002270 	.word	0x20002270
 8005144:	20002278 	.word	0x20002278

08005148 <memset>:
 8005148:	4603      	mov	r3, r0
 800514a:	4402      	add	r2, r0
 800514c:	4293      	cmp	r3, r2
 800514e:	d100      	bne.n	8005152 <memset+0xa>
 8005150:	4770      	bx	lr
 8005152:	f803 1b01 	strb.w	r1, [r3], #1
 8005156:	e7f9      	b.n	800514c <memset+0x4>

08005158 <_reclaim_reent>:
 8005158:	4b2d      	ldr	r3, [pc, #180]	@ (8005210 <_reclaim_reent+0xb8>)
 800515a:	b570      	push	{r4, r5, r6, lr}
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4604      	mov	r4, r0
 8005160:	4283      	cmp	r3, r0
 8005162:	d053      	beq.n	800520c <_reclaim_reent+0xb4>
 8005164:	69c3      	ldr	r3, [r0, #28]
 8005166:	b31b      	cbz	r3, 80051b0 <_reclaim_reent+0x58>
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	b163      	cbz	r3, 8005186 <_reclaim_reent+0x2e>
 800516c:	2500      	movs	r5, #0
 800516e:	69e3      	ldr	r3, [r4, #28]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	5959      	ldr	r1, [r3, r5]
 8005174:	b9b1      	cbnz	r1, 80051a4 <_reclaim_reent+0x4c>
 8005176:	3504      	adds	r5, #4
 8005178:	2d80      	cmp	r5, #128	@ 0x80
 800517a:	d1f8      	bne.n	800516e <_reclaim_reent+0x16>
 800517c:	69e3      	ldr	r3, [r4, #28]
 800517e:	4620      	mov	r0, r4
 8005180:	68d9      	ldr	r1, [r3, #12]
 8005182:	f000 f87b 	bl	800527c <_free_r>
 8005186:	69e3      	ldr	r3, [r4, #28]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	b111      	cbz	r1, 8005192 <_reclaim_reent+0x3a>
 800518c:	4620      	mov	r0, r4
 800518e:	f000 f875 	bl	800527c <_free_r>
 8005192:	69e3      	ldr	r3, [r4, #28]
 8005194:	689d      	ldr	r5, [r3, #8]
 8005196:	b15d      	cbz	r5, 80051b0 <_reclaim_reent+0x58>
 8005198:	4629      	mov	r1, r5
 800519a:	4620      	mov	r0, r4
 800519c:	682d      	ldr	r5, [r5, #0]
 800519e:	f000 f86d 	bl	800527c <_free_r>
 80051a2:	e7f8      	b.n	8005196 <_reclaim_reent+0x3e>
 80051a4:	680e      	ldr	r6, [r1, #0]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f868 	bl	800527c <_free_r>
 80051ac:	4631      	mov	r1, r6
 80051ae:	e7e1      	b.n	8005174 <_reclaim_reent+0x1c>
 80051b0:	6961      	ldr	r1, [r4, #20]
 80051b2:	b111      	cbz	r1, 80051ba <_reclaim_reent+0x62>
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 f861 	bl	800527c <_free_r>
 80051ba:	69e1      	ldr	r1, [r4, #28]
 80051bc:	b111      	cbz	r1, 80051c4 <_reclaim_reent+0x6c>
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 f85c 	bl	800527c <_free_r>
 80051c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80051c6:	b111      	cbz	r1, 80051ce <_reclaim_reent+0x76>
 80051c8:	4620      	mov	r0, r4
 80051ca:	f000 f857 	bl	800527c <_free_r>
 80051ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051d0:	b111      	cbz	r1, 80051d8 <_reclaim_reent+0x80>
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f852 	bl	800527c <_free_r>
 80051d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80051da:	b111      	cbz	r1, 80051e2 <_reclaim_reent+0x8a>
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 f84d 	bl	800527c <_free_r>
 80051e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80051e4:	b111      	cbz	r1, 80051ec <_reclaim_reent+0x94>
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f848 	bl	800527c <_free_r>
 80051ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80051ee:	b111      	cbz	r1, 80051f6 <_reclaim_reent+0x9e>
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 f843 	bl	800527c <_free_r>
 80051f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80051f8:	b111      	cbz	r1, 8005200 <_reclaim_reent+0xa8>
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f83e 	bl	800527c <_free_r>
 8005200:	6a23      	ldr	r3, [r4, #32]
 8005202:	b11b      	cbz	r3, 800520c <_reclaim_reent+0xb4>
 8005204:	4620      	mov	r0, r4
 8005206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800520a:	4718      	bx	r3
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	bf00      	nop
 8005210:	20000010 	.word	0x20000010

08005214 <__libc_init_array>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	2600      	movs	r6, #0
 8005218:	4d0c      	ldr	r5, [pc, #48]	@ (800524c <__libc_init_array+0x38>)
 800521a:	4c0d      	ldr	r4, [pc, #52]	@ (8005250 <__libc_init_array+0x3c>)
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	42a6      	cmp	r6, r4
 8005222:	d109      	bne.n	8005238 <__libc_init_array+0x24>
 8005224:	f000 f87e 	bl	8005324 <_init>
 8005228:	2600      	movs	r6, #0
 800522a:	4d0a      	ldr	r5, [pc, #40]	@ (8005254 <__libc_init_array+0x40>)
 800522c:	4c0a      	ldr	r4, [pc, #40]	@ (8005258 <__libc_init_array+0x44>)
 800522e:	1b64      	subs	r4, r4, r5
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	42a6      	cmp	r6, r4
 8005234:	d105      	bne.n	8005242 <__libc_init_array+0x2e>
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	f855 3b04 	ldr.w	r3, [r5], #4
 800523c:	4798      	blx	r3
 800523e:	3601      	adds	r6, #1
 8005240:	e7ee      	b.n	8005220 <__libc_init_array+0xc>
 8005242:	f855 3b04 	ldr.w	r3, [r5], #4
 8005246:	4798      	blx	r3
 8005248:	3601      	adds	r6, #1
 800524a:	e7f2      	b.n	8005232 <__libc_init_array+0x1e>
 800524c:	08005430 	.word	0x08005430
 8005250:	08005430 	.word	0x08005430
 8005254:	08005430 	.word	0x08005430
 8005258:	08005434 	.word	0x08005434

0800525c <__retarget_lock_acquire_recursive>:
 800525c:	4770      	bx	lr

0800525e <__retarget_lock_release_recursive>:
 800525e:	4770      	bx	lr

08005260 <memcpy>:
 8005260:	440a      	add	r2, r1
 8005262:	4291      	cmp	r1, r2
 8005264:	f100 33ff 	add.w	r3, r0, #4294967295
 8005268:	d100      	bne.n	800526c <memcpy+0xc>
 800526a:	4770      	bx	lr
 800526c:	b510      	push	{r4, lr}
 800526e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005272:	4291      	cmp	r1, r2
 8005274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005278:	d1f9      	bne.n	800526e <memcpy+0xe>
 800527a:	bd10      	pop	{r4, pc}

0800527c <_free_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	4605      	mov	r5, r0
 8005280:	2900      	cmp	r1, #0
 8005282:	d040      	beq.n	8005306 <_free_r+0x8a>
 8005284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005288:	1f0c      	subs	r4, r1, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfb8      	it	lt
 800528e:	18e4      	addlt	r4, r4, r3
 8005290:	f000 f83c 	bl	800530c <__malloc_lock>
 8005294:	4a1c      	ldr	r2, [pc, #112]	@ (8005308 <_free_r+0x8c>)
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	b933      	cbnz	r3, 80052a8 <_free_r+0x2c>
 800529a:	6063      	str	r3, [r4, #4]
 800529c:	6014      	str	r4, [r2, #0]
 800529e:	4628      	mov	r0, r5
 80052a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052a4:	f000 b838 	b.w	8005318 <__malloc_unlock>
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d908      	bls.n	80052be <_free_r+0x42>
 80052ac:	6820      	ldr	r0, [r4, #0]
 80052ae:	1821      	adds	r1, r4, r0
 80052b0:	428b      	cmp	r3, r1
 80052b2:	bf01      	itttt	eq
 80052b4:	6819      	ldreq	r1, [r3, #0]
 80052b6:	685b      	ldreq	r3, [r3, #4]
 80052b8:	1809      	addeq	r1, r1, r0
 80052ba:	6021      	streq	r1, [r4, #0]
 80052bc:	e7ed      	b.n	800529a <_free_r+0x1e>
 80052be:	461a      	mov	r2, r3
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	b10b      	cbz	r3, 80052c8 <_free_r+0x4c>
 80052c4:	42a3      	cmp	r3, r4
 80052c6:	d9fa      	bls.n	80052be <_free_r+0x42>
 80052c8:	6811      	ldr	r1, [r2, #0]
 80052ca:	1850      	adds	r0, r2, r1
 80052cc:	42a0      	cmp	r0, r4
 80052ce:	d10b      	bne.n	80052e8 <_free_r+0x6c>
 80052d0:	6820      	ldr	r0, [r4, #0]
 80052d2:	4401      	add	r1, r0
 80052d4:	1850      	adds	r0, r2, r1
 80052d6:	4283      	cmp	r3, r0
 80052d8:	6011      	str	r1, [r2, #0]
 80052da:	d1e0      	bne.n	800529e <_free_r+0x22>
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4408      	add	r0, r1
 80052e2:	6010      	str	r0, [r2, #0]
 80052e4:	6053      	str	r3, [r2, #4]
 80052e6:	e7da      	b.n	800529e <_free_r+0x22>
 80052e8:	d902      	bls.n	80052f0 <_free_r+0x74>
 80052ea:	230c      	movs	r3, #12
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	e7d6      	b.n	800529e <_free_r+0x22>
 80052f0:	6820      	ldr	r0, [r4, #0]
 80052f2:	1821      	adds	r1, r4, r0
 80052f4:	428b      	cmp	r3, r1
 80052f6:	bf01      	itttt	eq
 80052f8:	6819      	ldreq	r1, [r3, #0]
 80052fa:	685b      	ldreq	r3, [r3, #4]
 80052fc:	1809      	addeq	r1, r1, r0
 80052fe:	6021      	streq	r1, [r4, #0]
 8005300:	6063      	str	r3, [r4, #4]
 8005302:	6054      	str	r4, [r2, #4]
 8005304:	e7cb      	b.n	800529e <_free_r+0x22>
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	200023cc 	.word	0x200023cc

0800530c <__malloc_lock>:
 800530c:	4801      	ldr	r0, [pc, #4]	@ (8005314 <__malloc_lock+0x8>)
 800530e:	f7ff bfa5 	b.w	800525c <__retarget_lock_acquire_recursive>
 8005312:	bf00      	nop
 8005314:	200023c8 	.word	0x200023c8

08005318 <__malloc_unlock>:
 8005318:	4801      	ldr	r0, [pc, #4]	@ (8005320 <__malloc_unlock+0x8>)
 800531a:	f7ff bfa0 	b.w	800525e <__retarget_lock_release_recursive>
 800531e:	bf00      	nop
 8005320:	200023c8 	.word	0x200023c8

08005324 <_init>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <_fini>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr
